MODULE main


     DEFINE
nonodeatall := FALSE;
other := (! ( ( state = DB | ( state = http | ( state = anon | state = net))))) & ! (state = pozzo);



     VAR

         state : { pozzo, DB,
              anon,
              home,
              http,
              net  };




     IVAR

         operation : { read,
              write  };



    TRANS
(state = DB -> ( (operation = read & next(state = anon)) |  next(state = pozzo) )) &
(state = anon -> ( (operation = read & next(state = http)) |  next(state = pozzo) )) &
(state = home -> (  next(state = pozzo) )) &
(state = http -> ( (operation = write & next(state = DB)) | (operation = write & next(state = net)) |  next(state = pozzo) )) &
(state = net -> ( (operation = read & next(state = http)) |  next(state = pozzo) )) &
(state = pozzo -> next(state = pozzo))


--  (S1R) .IFL-every  ( #.DB,  -[any-mod]> , #.net )  must be  ( #.DB,  [read]> , #.anon )  ( #.anon,  -[any-mod]> , #.net ) 
 
LTLSPEC (!(state = DB &  X ( F state = net)) | (state = DB & operation = read &  X (state = anon &  X ( F state = net))))
--  (F1) .IFL-must  ( #.net,  -[any-mod]> , #.http ) 
 
LTLSPEC !(state = net &  X ( F state = http))
--  (F2) .IFL-must  ( #.http,  -[any-mod]> , #.net ) 
 
LTLSPEC !(state = http &  X ( F state = net))
--  (F2R) .IFL-must  ( #.DB,  -[any-mod]> , #.http )  ( #.http,  -[any-mod]> , #.net ) 
 
LTLSPEC !(state = DB &  X ( F (state = http &  X ( F state = net))))
--  (F1R) .IFL-must  ( #.net,  -[any-mod]> , #.http )  ( #.http,  -[any-mod]> , #.DB ) 
 
LTLSPEC !(state = net &  X ( F (state = http &  X ( F state = DB))))
--  (S2) .IFL-mustnot  ( #.DB,  -[any-mod]> , #.other ) 
 
LTLSPEC !(state = DB &  X ( F other))

