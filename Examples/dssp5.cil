;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

; typeattributes for information flows;
(typeattribute TCB)
(typeattribute Harm)
(typeattribute Harmless)
(typeattributeset Harmless (or TCB (not Harm)))

;IFL; (TCBintegrity) +> TCB : Harmless +> TCB ;IFL;

;IFL; (wrapping1) selinux > : > sys.subj ;IFL;
;IFL; (wrapping2) > sys.subj : selinux > ;IFL;
;IFL; (wrapping3) sys.subj > : > mqueue.fs ;IFL;
;IFL; (wrapping4) > mqueue.fs : sys.subj > ;IFL;
;IFL; (wrapping5) mqueue.fs > : > lostfound.file ;IFL;
;IFL; (wrapping6) > lostfound.file : mqueue.fs > ;IFL;
;IFL; (wrapping7) lostfound.file > : > xattr.fs ;IFL;
;IFL; (wrapping8) > xattr.fs : lostfound.file > ;IFL;

;IFL; (pipeline1) selinux +> lostfound.file : selinux +> sys.subj +> mqueue.fs +> lostfound.file ;IFL;
;IFL; (pipeline2) selinux +> hugetlb.fs : selinux +> sys.subj +> hugetlb.fs ;IFL;
;IFL; (pipeline3) boot.file +> sys.subj : boot.file +> hugetlb.fs +> sys.subj ;IFL;
;IFL; (pipeline4) xattr.fs +> sys.subj : xattr.fs +> boot.file +> sys.subj ;IFL;


(classmap constrainobject (append create getattr read relabelto setattr write))

(classmap files
	  (create delete manage read readwrite relabel relabelfrom relabelto
		  rename watch write))

(classmapping constrainobject append (blk_file (append)))
(classmapping constrainobject append (chr_file (append)))
(classmapping constrainobject append (dir (append)))
(classmapping constrainobject append (file (append)))
(classmapping constrainobject append (lnk_file (append)))
(classmapping constrainobject append (sock_file (append)))

(classmapping constrainobject create (blk_file (create)))
(classmapping constrainobject create (chr_file (create)))
(classmapping constrainobject create (dir (create)))
(classmapping constrainobject create (fifo_file (create)))
(classmapping constrainobject create (file (create)))
(classmapping constrainobject create (lnk_file (create)))
(classmapping constrainobject create (sock_file (create)))

(classmapping constrainobject getattr (blk_file (getattr)))
(classmapping constrainobject getattr (chr_file (getattr)))
(classmapping constrainobject getattr (dir (getattr)))
(classmapping constrainobject getattr (file (getattr)))
(classmapping constrainobject getattr (lnk_file (getattr)))
(classmapping constrainobject getattr (sock_file (getattr)))

(classmapping constrainobject read (blk_file (read)))
(classmapping constrainobject read (chr_file (read)))
(classmapping constrainobject read (dir (read)))
(classmapping constrainobject read (file (read)))
(classmapping constrainobject read (lnk_file (read)))
(classmapping constrainobject read (sock_file (read)))

(classmapping constrainobject relabelto (blk_file (relabelto)))
(classmapping constrainobject relabelto (chr_file (relabelto)))
(classmapping constrainobject relabelto (dir (relabelto)))
(classmapping constrainobject relabelto (fifo_file (relabelto)))
(classmapping constrainobject relabelto (file (relabelto)))
(classmapping constrainobject relabelto (lnk_file (relabelto)))
(classmapping constrainobject relabelto (sock_file (relabelto)))

(classmapping constrainobject setattr (blk_file (setattr)))
(classmapping constrainobject setattr (chr_file (setattr)))
(classmapping constrainobject setattr (dir (setattr)))
(classmapping constrainobject setattr (file (setattr)))
(classmapping constrainobject setattr (lnk_file (setattr)))
(classmapping constrainobject setattr (sock_file (setattr)))

(classmapping constrainobject write (blk_file (write)))
(classmapping constrainobject write (chr_file (write)))
(classmapping constrainobject write (dir (write)))
(classmapping constrainobject write (file (write)))
(classmapping constrainobject write (lnk_file (write)))
(classmapping constrainobject write (sock_file (write)))

(classmapping files create addname_dir)
(classmapping files create create_blk_file)
(classmapping files create create_chr_file)
(classmapping files create create_dir)
(classmapping files create create_fifo_file)
(classmapping files create create_file)
(classmapping files create create_lnk_file)
(classmapping files create create_sock_file)
(classmapping files create read_lnk_file)

(classmapping files delete delete_blk_file)
(classmapping files delete delete_chr_file)
(classmapping files delete delete_dir)
(classmapping files delete delete_fifo_file)
(classmapping files delete delete_file)
(classmapping files delete delete_lnk_file)
(classmapping files delete delete_sock_file)
(classmapping files delete deletename_dir)
(classmapping files delete read_lnk_file)

(classmapping files manage manage_blk_file)
(classmapping files manage manage_chr_file)
(classmapping files manage manage_dir)
(classmapping files manage manage_fifo_file)
(classmapping files manage manage_file)
(classmapping files manage manage_lnk_file)
(classmapping files manage manage_sock_file)
(classmapping files manage read_lnk_file)

(classmapping files read list_dir)
(classmapping files read read_blk_file)
(classmapping files read read_chr_file)
(classmapping files read read_fifo_file)
(classmapping files read read_file)
(classmapping files read read_lnk_file)
(classmapping files read read_sock_file)

(classmapping files readwrite readwrite_blk_file)
(classmapping files readwrite readwrite_chr_file)
(classmapping files readwrite readwrite_dir)
(classmapping files readwrite readwrite_fifo_file)
(classmapping files readwrite readwrite_file)
(classmapping files readwrite readwrite_lnk_file)
(classmapping files readwrite readwrite_sock_file)

(classmapping files relabel read_lnk_file)
(classmapping files relabel relabel_blk_file)
(classmapping files relabel relabel_chr_file)
(classmapping files relabel relabel_dir)
(classmapping files relabel relabel_fifo_file)
(classmapping files relabel relabel_file)
(classmapping files relabel relabel_lnk_file)
(classmapping files relabel relabel_sock_file)
(classmapping files relabel search_dir)

(classmapping files relabelfrom read_lnk_file)
(classmapping files relabelfrom relabelfrom_blk_file)
(classmapping files relabelfrom relabelfrom_chr_file)
(classmapping files relabelfrom relabelfrom_dir)
(classmapping files relabelfrom relabelfrom_fifo_file)
(classmapping files relabelfrom relabelfrom_file)
(classmapping files relabelfrom relabelfrom_lnk_file)
(classmapping files relabelfrom relabelfrom_sock_file)
(classmapping files relabelfrom search_dir)

(classmapping files relabelto read_lnk_file)
(classmapping files relabelto relabelto_blk_file)
(classmapping files relabelto relabelto_chr_file)
(classmapping files relabelto relabelto_dir)
(classmapping files relabelto relabelto_fifo_file)
(classmapping files relabelto relabelto_file)
(classmapping files relabelto relabelto_lnk_file)
(classmapping files relabelto relabelto_sock_file)
(classmapping files relabelto search_dir)

(classmapping files rename read_lnk_file)
(classmapping files rename readwrite_dir)
(classmapping files rename rename_blk_file)
(classmapping files rename rename_chr_file)
(classmapping files rename rename_dir)
(classmapping files rename rename_fifo_file)
(classmapping files rename rename_file)
(classmapping files rename rename_lnk_file)
(classmapping files rename rename_sock_file)

(classmapping files watch (blk_file (watch)))
(classmapping files watch (chr_file (watch)))
(classmapping files watch (dir (watch)))
(classmapping files watch (fifo_file (watch)))
(classmapping files watch (file (watch)))
(classmapping files watch (lnk_file (watch)))
(classmapping files watch (sock_file (watch)))

(classmapping files write read_lnk_file)
(classmapping files write write_blk_file)
(classmapping files write write_chr_file)
(classmapping files write write_dir)
(classmapping files write write_fifo_file)
(classmapping files write write_file)
(classmapping files write write_lnk_file)
(classmapping files write write_sock_file)
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block rbacsep

       (constrain (fifo_file (append getattr read setattr write))
		  (or (or (or (or (eq r1 r2)
				  (and (eq r1 exempt.roleattr)
				       (neq t1 constrained.typeattr)))
			      (eq t1 exempt.subj.typeattr))
			  (eq t2 exempt.obj.typeattr))
		      (and (eq t1 exemptsource.typeattr)
			   (eq t2 exempttarget.typeattr))))

       (constrain (constrainobject (append setattr write))
		  (or (or (or (eq r1 r2)
			      (and (eq r1 exempt.roleattr)
				   (neq t1 constrained.typeattr)))
			  (eq t1 exempt.subj.typeattr))
		      (eq t2 exempt.obj.typeattr)))

       (constrain (constrainobject (getattr read))
		  (or (or (or (or (or (eq r1 r2)
				      (and (eq r1 exempt.roleattr)
					   (neq t1 constrained.typeattr)))
				  (eq t1 exempt.subj.typeattr))
			      (eq t2 exempt.obj.typeattr))
			  (and (eq r2 exempt.roleattr) (eq t2 typeattr)))
		      (and
		       (eq t1 readstatesource.typeattr)
		       (eq t2 readstatetarget.typeattr))))

       (constrain
	(process (getrlimit getsched ptrace setrlimit setsched sigchld sigkill
			    signal signull sigstop))
	(or (or (or (eq r1 r2)
		    (and (eq r1 exempt.roleattr) (neq t1 constrained.typeattr)))
		(eq t1 exempt.subj.typeattr))
	    (and (eq t1 exemptsource.typeattr) (eq t2 exempttarget.typeattr))))

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (block constrained

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block exempt

	      (macro role ((role ARG1))
		     (roleattributeset roleattr ARG1))

	      (roleattribute roleattr)

	      (block obj

		     (macro type ((type ARG1))
			    (typeattributeset typeattr ARG1))

		     (typeattribute typeattr))

	      (block subj

		     (macro type ((type ARG1))
			    (typeattributeset typeattr ARG1))

		     (typeattribute typeattr)))

       (block exemptsource

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block exempttarget

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block readstatesource

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block readstatetarget

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block usefdsource

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block usefdtarget

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)))

(in obj

    (call .rbacsep.type (typeattr)))

(in subj.unconfined

    (call .rbacsep.exempt.subj.type (typeattr)))

(in sys

    (call .rbacsep.exempt.role (role)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ibac

       (constrain (constrainobject (create relabelto))
		  (or (or (or (eq u1 u2)
			      (and (eq t1 objchangesys.typeattr)
				   (eq u2 .sys.id)))
			  (eq t1 objchange.typeattr))
		      (eq t1 exempt.typeattr)))

       (constrain (process (dyntransition transition))
		  (or (or (or (eq u1 u2)
			      (and (eq t1 subjchange.typeattr)
				   (eq t2 subjchangetarget.typeattr)))
			  (and (eq t1 subjchangesys.typeattr) (eq u2 .sys.id)))
		      (eq t1 exempt.typeattr)))

       (block change

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call objchange.type (typeattr))
	      (call subjchange.type (typeattr)))

       (block changesys

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call objchangesys.type (typeattr))
	      (call subjchangesys.type (typeattr)))

       (block exempt

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block objchange

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block objchangesys

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block subjchange

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block subjchangesys

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block subjchangetarget

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)))

(in subj.unconfined

    (call .ibac.exempt.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(defaultrange blk_file source low)
(defaultrange chr_file source low)
(defaultrange dir source low)
(defaultrange fifo_file source low)
(defaultrange file source low)
(defaultrange lnk_file source low)
(defaultrange sock_file source low)

(block mcs

       (mlsconstrain (constrainobject (create relabelto))
		     (or (neq t1 constrained.typeattr)
			 (and (dom h1 h2) (eq l2 h2))))

       (mlsconstrain (constrainobject (append getattr read setattr write))
		     (or (dom h1 h2)
			 (neq t1 constrained.typeattr)))

       (mlsconstrain
	(process (dyntransition getrlimit getsched ptrace setrlimit setsched
				sigchld sigkill signal signull sigstop
				transition))
	(or (dom h1 h2)
	    (neq t1 constrained.typeattr)))

       (mlsconstrain (fifo_file (append getattr read write setattr))
		     (or (dom h1 h2)
			 (neq t1 constrained.typeattr)))

       (block constrained

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block rbac

       (constrain (constrainobject (create relabelto))
		  (or (or (or (eq r1 r2)
			      (and (eq t1 objchangesys.typeattr)
				   (eq r2 .sys.role)))
			  (eq t1 objchange.typeattr))
		      (eq t1 exempt.typeattr)))

       (constrain (process (dyntransition transition))
		  (or (or (or (eq r1 r2)
			      (and (eq t1 subjchange.typeattr)
				   (eq t2 subjchangetarget.typeattr)))
			  (and (eq t1 subjchangesys.typeattr) (eq r2 .sys.role)))
		      (eq t1 exempt.typeattr)))

       (block change

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call objchange.type (typeattr))
	      (call subjchange.type (typeattr)))

       (block changesys

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call objchangesys.type (typeattr))
	      (call subjchangesys.type (typeattr)))

       (block exempt

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block objchange

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block objchangesys

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block subjchange

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block subjchangesys

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr))

       (block subjchangetarget

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)))

(in subj.unconfined

    (call .rbac.exempt.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class system
       (halt ipc_info module_load module_request reboot reload start status
	     stop syslog_console syslog_mod syslog_read))
(classorder (unordered system))

(in sys

    (macro ipcinfo_system ((type ARG1))
	   (allow ARG1 subj (system (ipc_info))))

    (macro modulerequest_system ((type ARG1))
	   (allow ARG1 subj (system (module_request))))

    (macro syslogconsole_system ((type ARG1))
	   (allow ARG1 subj (system (syslog_console))))

    (macro syslogmod_system ((type ARG1))
	   (allow ARG1 subj (system (syslog_mod))))

    (macro syslogread_system ((type ARG1))
	   (allow ARG1 subj (system (syslog_read))))

    (block moduleload

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute not_typeattr)
	   (typeattribute typeattr)

	   (typeattributeset not_typeattr (not typeattr))

	   (neverallow not_typeattr self (system (module_load)))
	   )

    (block unconfined

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (allow typeattr self (system (module_load)))
	   (allow typeattr subj
		  (system (ipc_info module_request syslog_console syslog_mod
				    syslog_read)))

	   (call moduleload.type (typeattr))))

(in unconfined

    (call .sys.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class msg (receive send))
(classorder (unordered msg))

(in invalid.unconfined

    (allow typeattr .invalid (msg (all))))

(in mcs

    (mlsconstrain (msg (send))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in rbacsep

    (constrain (msg (send))
	       (or (or (or (eq r1 r2)
			   (and (eq r1 exempt.roleattr)
				(neq t1 constrained.typeattr)))
		       (eq t1 exempt.subj.typeattr))
		   (and (eq t1 exemptsource.typeattr)
			(eq t2 exempttarget.typeattr)))))

(in subj.unconfined

    (allow typeattr subj.typeattr (msg (all))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class anon_inode ())
(classorder (unordered anon_inode))

(classcommon anon_inode common_file)

(classpermission manage_anon_inode)
(classpermissionset manage_anon_inode (anon_inode (create getattr ioctl read)))

(macro manage_invalid_anon_inodes ((type ARG1))
       (allow ARG1 invalid manage_anon_inode))

(in ibac

    (constrain (anon_inode (create))
	       (or (or (or (eq u1 u2)
			   (and (eq t1 subjchangesys.typeattr) (eq u2 .sys.id)))
		       (eq t1 subjchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in invalid.unconfined

    (allow typeattr .invalid manage_anon_inode))

(in mcs

    (mlsconstrain (anon_inode (create getattr ioctl read))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in rbac

    (constrain (anon_inode (create))
	       (or (or (or (eq r1 r2)
			   (and (eq t1 subjchangesys.typeattr)
				(eq r2 .sys.role)))
		       (eq t1 subjchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in rbacsep

    (constrain (anon_inode (getattr ioctl read))
	       (or (or (or (eq r1 r2)
			   (and (eq r1 exempt.roleattr)
				(neq t1 constrained.typeattr)))
		       (eq t1 exempt.subj.typeattr))
		   (and (eq t1 exemptsource.typeattr)
			(eq t2 exempttarget.typeattr)))))

(in subj.unconfined

    (allow typeattr subj.typeattr manage_anon_inode))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class memprotect (mmap_zero))
(classorder (unordered memprotect))

(in subj

    (block mmapzero

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute not_typeattr)
	   (typeattribute typeattr)

	   (typeattributeset not_typeattr (not typeattr))

	   (neverallow not_typeattr self (memprotect (mmap_zero)))))

(in subj.unconfined

    (allow typeattr self (memprotect (all)))

    (call mmapzero.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class cap_userns ())
(classorder (unordered cap_userns))

(class cap2_userns ())
(classorder (unordered cap2_userns))

(class capability ())
(classorder (unordered capability))

(class capability2 ())
(classorder (unordered capability2))

(classcommon cap_userns common_capability)
(classcommon cap2_userns common_capability2)
(classcommon capability common_capability)
(classcommon capability2 common_capability2)

(common common_capability
	(audit_control audit_write chown dac_read_search dac_override fowner
		       fsetid ipc_lock ipc_owner kill linux_immutable lease
		       mknod net_admin net_bind_service net_broadcast net_raw
		       setfcap setgid setpcap setuid sys_admin sys_boot
		       sys_chroot sys_module sys_nice sys_pacct sys_ptrace
		       sys_rawio sys_resource sys_time sys_tty_config))

(common common_capability2
	(audit_read block_suspend bpf checkpoint_restore mac_admin mac_override
		    perfmon syslog wake_alarm))

(in subj.unconfined

    (allow typeattr self (cap_userns (all)))
    (allow typeattr self (cap2_userns (not (mac_admin mac_override))))
    (allow typeattr self (capability (all)))
    (allow typeattr self (capability2 (not (mac_admin mac_override)))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class fd (use))
(classorder (unordered fd))

(macro use_invalid_fds ((type ARG1))
       (allow ARG1 invalid (fd (use))))

(in invalid.unconfined

    (allow typeattr .invalid (fd (all))))

(in mcs

    (mlsconstrain (fd (use))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in rbacsep

    (constrain (fd (use))
	       (or (or (or (eq r1 r2)
			   (and (eq r1 exempt.roleattr)
				(neq t1 constrained.typeattr)))
		       (eq t1 exempt.subj.typeattr))
		   (and (eq t1 usefdsource.typeattr)
			(eq t2 usefdtarget.typeattr)))))

(in subj

    (block interactivefd

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr))

    (block useinteractivefd

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (allow typeattr interactivefd.typeattr (fd (use)))))

(in subj.all_macro_template

    (macro use_all_fds ((type ARG1))
	   (allow ARG1 typeattr (fd (use)))))

(in subj.macro_template

    (macro use_subj_fds ((type ARG1))
	   (allow ARG1 subj (fd (use)))))

(in subj.unconfined

    (allow typeattr subj.typeattr (fd (all))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class ipc ())
(classorder (unordered ipc))

(class msgq (enqueue))
(classorder (unordered msgq))

(class sem ())
(classorder (unordered sem))

(class shm (lock))
(classorder (unordered shm))

(classcommon ipc common_ipc)
(classcommon msgq common_ipc)
(classcommon sem common_ipc)
(classcommon shm common_ipc)

(common common_ipc
	(associate create destroy getattr read setattr unix_read unix_write
		   write))

(classpermission create_ipc)
(classpermission create_msgq)
(classpermission create_sem)
(classpermission create_shm)

(classpermission read_ipc)
(classpermission read_msgq)
(classpermission read_sem)
(classpermission read_shm)

(classpermission readwrite_ipc)
(classpermission readwrite_msgq)
(classpermission readwrite_sem)
(classpermission readwrite_shm)

(classpermissionset create_ipc
		    (ipc (associate create destroy getattr read setattr unix_read
				    unix_write write)))
(classpermissionset create_msgq
		    (msgq (associate create destroy enqueue getattr read setattr
				     unix_read unix_write write)))
(classpermissionset create_sem
		    (sem (associate create destroy getattr read setattr unix_read
				    unix_write write)))
(classpermissionset create_shm
		    (shm (associate create destroy getattr read setattr unix_read
				    unix_write write)))

(classpermissionset read_ipc (ipc (associate getattr read unix_read)))
(classpermissionset read_msgq (msgq (associate getattr read unix_read)))
(classpermissionset read_sem (sem (associate getattr read unix_read)))
(classpermissionset read_shm (shm (associate getattr read unix_read)))

(classpermissionset readwrite_ipc
		    (ipc (associate getattr read unix_read unix_write write)))
(classpermissionset readwrite_msgq
		    (msgq (associate enqueue getattr read unix_read unix_write
				     write)))
(classpermissionset readwrite_sem
		    (sem (associate getattr read unix_read unix_write write)))
(classpermissionset readwrite_shm
		    (shm (associate getattr read unix_read unix_write write)))

(classmap constrainipcsubject (create getattr read setattr write))

(classmapping constrainipcsubject create (ipc (create)))
(classmapping constrainipcsubject create (msgq (create)))
(classmapping constrainipcsubject create (sem (create)))
(classmapping constrainipcsubject create (shm (create)))

(classmapping constrainipcsubject getattr (ipc (getattr)))
(classmapping constrainipcsubject getattr (msgq (getattr)))
(classmapping constrainipcsubject getattr (sem (getattr)))
(classmapping constrainipcsubject getattr (shm (getattr)))

(classmapping constrainipcsubject read (ipc (read)))
(classmapping constrainipcsubject read (msgq (read)))
(classmapping constrainipcsubject read (sem (read)))
(classmapping constrainipcsubject read (shm (read)))

(classmapping constrainipcsubject setattr (ipc (setattr)))
(classmapping constrainipcsubject setattr (msgq (setattr)))
(classmapping constrainipcsubject setattr (sem (setattr)))
(classmapping constrainipcsubject setattr (shm (setattr)))

(classmapping constrainipcsubject write (ipc (write)))
(classmapping constrainipcsubject write (msgq (write)))
(classmapping constrainipcsubject write (sem (write)))
(classmapping constrainipcsubject write (shm (write)))

(in ibac

    (constrain (constrainipcsubject (create))
	       (or (or (or (eq u1 u2)
			   (and (eq t1 subjchangesys.typeattr) (eq u2 .sys.id)))
		       (eq t1 subjchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in invalid.unconfined

    (allow typeattr .invalid (ipc (all)))
    (allow typeattr .invalid (msgq (all)))
    (allow typeattr .invalid (sem (all)))
    (allow typeattr .invalid (shm (all))))

(in mcs

    (mlsconstrain (constrainipcsubject (create getattr read setattr write))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in rbac

    (constrain (constrainipcsubject (create))
	       (or (or (or (eq r1 r2)
			   (and (eq t1 subjchangesys.typeattr)
				(eq r2 .sys.role)))
		       (eq t1 subjchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in rbacsep

    (constrain (constrainipcsubject (getattr read setattr write))
	       (or (or (or (eq r1 r2)
			   (and (eq r1 exempt.roleattr)
				(neq t1 constrained.typeattr)))
		       (eq t1 exempt.subj.typeattr))
		   (and (eq t1 exemptsource.typeattr)
			(eq t2 exempttarget.typeattr)))))

(in subj.unconfined

    (allow typeattr subj.typeattr (ipc (all)))
    (allow typeattr subj.typeattr (msgq (all)))
    (allow typeattr subj.typeattr (sem (all)))
    (allow typeattr subj.typeattr (shm (all))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class lockdown (confidentiality integrity))
(classorder (unordered lockdown))

(in subj.unconfined

    (allow typeattr self (lockdown (all))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class alg_socket ())
(classorder (unordered alg_socket))

(class appletalk_socket ())
(classorder (unordered appletalk_socket))

(class atmpvc_socket ())
(classorder (unordered atmpvc_socket))

(class atmsvc_socket ())
(classorder (unordered atmsvc_socket))

(class ax25_socket ())
(classorder (unordered ax25_socket))

(class bluetooth_socket ())
(classorder (unordered bluetooth_socket))

(class caif_socket ())
(classorder (unordered caif_socket))

(class can_socket ())
(classorder (unordered can_socket))

(class dccp_socket (name_connect node_bind))
(classorder (unordered dccp_socket))

(class decnet_socket ())
(classorder (unordered decnet_socket))

(class icmp_socket (node_bind))
(classorder (unordered icmp_socket))

(class ieee802154_socket ())
(classorder (unordered ieee802154_socket))

(class ipx_socket ())
(classorder (unordered ipx_socket))

(class irda_socket ())
(classorder (unordered irda_socket))

(class isdn_socket ())
(classorder (unordered isdn_socket))

(class iucv_socket ())
(classorder (unordered iucv_socket))

(class kcm_socket ())
(classorder (unordered kcm_socket))

(class key_socket ())
(classorder (unordered key_socket))

(class llc_socket ())
(classorder (unordered llc_socket))

(class netlink_audit_socket
       (nlmsg_read nlmsg_readpriv nlmsg_relay nlmsg_tty_audit nlmsg_write))
(classorder (unordered netlink_audit_socket))

(class netlink_connector_socket ())
(classorder (unordered netlink_connector_socket))

(class netlink_crypto_socket ())
(classorder (unordered netlink_crypto_socket))

(class netlink_dnrt_socket ())
(classorder (unordered netlink_dnrt_socket))

(class netlink_fib_lookup_socket ())
(classorder (unordered netlink_fib_lookup_socket))

(class netlink_generic_socket ())
(classorder (unordered netlink_generic_socket))

(class netlink_iscsi_socket ())
(classorder (unordered netlink_iscsi_socket))

(class netlink_kobject_uevent_socket ())
(classorder (unordered netlink_kobject_uevent_socket))

(class netlink_netfilter_socket ())
(classorder (unordered netlink_netfilter_socket))

(class netlink_nflog_socket ())
(classorder (unordered netlink_nflog_socket))

(class netlink_rdma_socket ())
(classorder (unordered netlink_rdma_socket))

(class netlink_route_socket (nlmsg_read nlmsg_write))
(classorder (unordered netlink_route_socket))

(class netlink_scsitransport_socket ())
(classorder (unordered netlink_scsitransport_socket))

(class netlink_selinux_socket ())
(classorder (unordered netlink_selinux_socket))

(class netlink_socket ())
(classorder (unordered netlink_socket))

(class netlink_tcpdiag_socket (nlmsg_read nlmsg_write))
(classorder (unordered netlink_tcpdiag_socket))

(class netlink_xfrm_socket (nlmsg_read nlmsg_write))
(classorder (unordered netlink_xfrm_socket))

(class netrom_socket ())
(classorder (unordered netrom_socket))

(class nfc_socket ())
(classorder (unordered nfc_socket))

(class packet_socket ())
(classorder (unordered packet_socket))

(class phonet_socket ())
(classorder (unordered phonet_socket))

(class pppox_socket ())
(classorder (unordered pppox_socket))

(class qipcrtr_socket ())
(classorder (unordered qipcrtr_socket))

(class rawip_socket (node_bind))
(classorder (unordered rawip_socket))

(class rds_socket ())
(classorder (unordered rds_socket))

(class rose_socket ())
(classorder (unordered rose_socket))

(class rxrpc_socket ())
(classorder (unordered rxrpc_socket))

(class sctp_socket (association name_connect node_bind))
(classorder (unordered sctp_socket))

(class smc_socket ())
(classorder (unordered smc_socket))

(class socket ())
(classorder (unordered socket))

(class tcp_socket (name_connect node_bind))
(classorder (unordered tcp_socket))

(class tipc_socket ())
(classorder (unordered tipc_socket))

(class tun_socket (attach_queue))
(classorder (unordered tun_socket))

(class udp_socket (node_bind))
(classorder (unordered udp_socket))

(class unix_dgram_socket ())
(classorder (unordered unix_dgram_socket))

(class unix_stream_socket (connectto))
(classorder (unordered unix_stream_socket))

(class vsock_socket ())
(classorder (unordered vsock_socket))

(class x25_socket ())
(classorder (unordered x25_socket))

(class xdp_socket ())
(classorder (unordered xdp_socket))

(classcommon alg_socket common_socket)
(classcommon appletalk_socket common_socket)
(classcommon atmpvc_socket common_socket)
(classcommon atmsvc_socket common_socket)
(classcommon ax25_socket common_socket)
(classcommon bluetooth_socket common_socket)
(classcommon caif_socket common_socket)
(classcommon can_socket common_socket)
(classcommon dccp_socket common_socket)
(classcommon decnet_socket common_socket)
(classcommon icmp_socket common_socket)
(classcommon ieee802154_socket common_socket)
(classcommon ipx_socket common_socket)
(classcommon irda_socket common_socket)
(classcommon isdn_socket common_socket)
(classcommon iucv_socket common_socket)
(classcommon kcm_socket common_socket)
(classcommon key_socket common_socket)
(classcommon llc_socket common_socket)
(classcommon netlink_audit_socket common_socket)
(classcommon netlink_connector_socket common_socket)
(classcommon netlink_crypto_socket common_socket)
(classcommon netlink_dnrt_socket common_socket)
(classcommon netlink_fib_lookup_socket common_socket)
(classcommon netlink_generic_socket common_socket)
(classcommon netlink_iscsi_socket common_socket)
(classcommon netlink_kobject_uevent_socket common_socket)
(classcommon netlink_netfilter_socket common_socket)
(classcommon netlink_nflog_socket common_socket)
(classcommon netlink_rdma_socket common_socket)
(classcommon netlink_route_socket common_socket)
(classcommon netlink_scsitransport_socket common_socket)
(classcommon netlink_selinux_socket common_socket)
(classcommon netlink_socket common_socket)
(classcommon netlink_tcpdiag_socket common_socket)
(classcommon netlink_xfrm_socket common_socket)
(classcommon netrom_socket common_socket)
(classcommon nfc_socket common_socket)
(classcommon packet_socket common_socket)
(classcommon phonet_socket common_socket)
(classcommon pppox_socket common_socket)
(classcommon qipcrtr_socket common_socket)
(classcommon rawip_socket common_socket)
(classcommon rds_socket common_socket)
(classcommon rose_socket common_socket)
(classcommon rxrpc_socket common_socket)
(classcommon sctp_socket common_socket)
(classcommon smc_socket common_socket)
(classcommon socket common_socket)
(classcommon tcp_socket common_socket)
(classcommon tipc_socket common_socket)
(classcommon tun_socket common_socket)
(classcommon udp_socket common_socket)
(classcommon unix_dgram_socket common_socket)
(classcommon unix_stream_socket common_socket)
(classcommon vsock_socket common_socket)
(classcommon x25_socket common_socket)
(classcommon xdp_socket common_socket)

(common common_socket
	(accept append bind connect create getattr getopt ioctl listen lock map
		name_bind read recvfrom relabelfrom relabelto sendto setattr
		setopt shutdown write))

(classpermission create_alg_socket)
(classpermission create_alg_stream_socket)
(classpermission create_appletalk_socket)
(classpermission create_atmpvc_socket)
(classpermission create_atmsvc_socket)
(classpermission create_ax25_socket)
(classpermission create_bluetooth_socket)
(classpermission create_bluetooth_stream_socket)
(classpermission create_caif_socket)
(classpermission create_can_socket)
(classpermission create_dccp_socket)
(classpermission create_dccp_stream_socket)
(classpermission create_decnet_socket)
(classpermission create_icmp_socket)
(classpermission create_ieee802154_socket)
(classpermission create_ipx_socket)
(classpermission create_irda_socket)
(classpermission create_isdn_socket)
(classpermission create_iucv_socket)
(classpermission create_kcm_socket)
(classpermission create_key_socket)
(classpermission create_llc_socket)
(classpermission create_netrom_socket)
(classpermission create_nfc_socket)
(classpermission create_netlink_audit_socket)
(classpermission create_netlink_connector_socket)
(classpermission create_netlink_crypto_socket)
(classpermission create_netlink_dnrt_socket)
(classpermission create_netlink_fib_lookup_socket)
(classpermission create_netlink_generic_socket)
(classpermission create_netlink_iscsi_socket)
(classpermission create_netlink_kobject_uevent_socket)
(classpermission create_netlink_netfilter_socket)
(classpermission create_netlink_nflog_socket)
(classpermission create_netlink_rdma_socket)
(classpermission create_netlink_route_socket)
(classpermission create_netlink_scsitransport_socket)
(classpermission create_netlink_selinux_socket)
(classpermission create_netlink_socket)
(classpermission create_netlink_tcpdiag_socket)
(classpermission create_netlink_xfrm_socket)
(classpermission create_packet_socket)
(classpermission create_phonet_socket)
(classpermission create_pppox_socket)
(classpermission create_qipcrtr_socket)
(classpermission create_rawip_socket)
(classpermission create_rds_socket)
(classpermission create_rose_socket)
(classpermission create_rxrpc_socket)
(classpermission create_sctp_socket)
(classpermission create_sctp_stream_socket)
(classpermission create_smc_socket)
(classpermission create_socket)
(classpermission create_tcp_socket)
(classpermission create_tcp_stream_socket)
(classpermission create_tipc_socket)
(classpermission create_tun_socket)
(classpermission create_udp_socket)
(classpermission create_unix_dgram_socket)
(classpermission create_unix_stream_socket)
(classpermission create_unix_stream_stream_socket)
(classpermission create_vsock_socket)
(classpermission create_x25_socket)
(classpermission create_xdp_socket)

(classpermission readwrite_alg_socket)
(classpermission readwrite_bluetooth_socket)
(classpermission readwrite_dccp_socket)
(classpermission readwrite_netlink_audit_socket)
(classpermission readwrite_sctp_socket)
(classpermission readwrite_tcp_socket)
(classpermission readwrite_tun_socket)
(classpermission readwrite_unix_dgram_socket)
(classpermission readwrite_unix_stream_socket)

(classpermission write_alg_socket)
(classpermission write_bluetooth_socket)
(classpermission write_dccp_socket)
(classpermission write_sctp_socket)
(classpermission write_tcp_socket)
(classpermission write_tun_socket)
(classpermission write_unix_dgram_socket)
(classpermission write_unix_stream_socket)

(classpermissionset create_alg_socket
		    (alg_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_alg_stream_socket
		    (alg_socket (accept append bind connect create getattr getopt
					ioctl listen read setattr setopt shutdown
					write)))
(classpermissionset create_appletalk_socket
		    (appletalk_socket (append bind connect create getattr getopt
					      ioctl read setattr setopt shutdown
					      write)))
(classpermissionset create_atmpvc_socket
		    (atmpvc_socket (append bind connect create getattr getopt
					   ioctl read setattr setopt shutdown
					   write)))
(classpermissionset create_atmsvc_socket
		    (atmsvc_socket (append bind connect create getattr getopt
					   ioctl read setattr setopt shutdown
					   write)))
(classpermissionset create_ax25_socket
		    (ax25_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_bluetooth_socket
		    (bluetooth_socket (append bind connect create getattr getopt
					      ioctl read setattr setopt shutdown
					      write)))
(classpermissionset create_bluetooth_stream_socket
		    (bluetooth_socket (accept append bind connect create getattr
					      getopt ioctl listen read setattr
					      setopt shutdown write)))
(classpermissionset create_caif_socket
		    (caif_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_can_socket
		    (can_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_dccp_socket
		    (dccp_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_dccp_stream_socket
		    (dccp_socket (accept append bind connect create getattr
					 getopt ioctl listen read setattr setopt
					 shutdown write)))
(classpermissionset create_decnet_socket
		    (decnet_socket (append bind connect create getattr getopt
					   ioctl read setattr setopt shutdown
					   write)))
(classpermissionset create_icmp_socket
		    (icmp_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_ieee802154_socket
		    (ieee802154_socket (append bind connect create getattr getopt
					       ioctl read setattr setopt shutdown
					       write)))
(classpermissionset create_ipx_socket
		    (ipx_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_irda_socket
		    (irda_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_isdn_socket
		    (isdn_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_iucv_socket
		    (iucv_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_kcm_socket
		    (kcm_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_key_socket
		    (key_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_llc_socket
		    (llc_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_netlink_audit_socket
		    (netlink_audit_socket (append bind connect create getattr
						  getopt ioctl read setattr
						  setopt shutdown write)))
(classpermissionset create_netlink_connector_socket
		    (netlink_connector_socket (append bind connect create getattr
						      getopt ioctl read setattr
						      setopt shutdown write)))
(classpermissionset create_netlink_crypto_socket
		    (netlink_crypto_socket (append bind connect create getattr
						   getopt ioctl read setattr
						   setopt shutdown write)))
(classpermissionset create_netlink_dnrt_socket
		    (netlink_dnrt_socket (append bind connect create getattr
						 getopt ioctl read setattr setopt
						 shutdown write)))
(classpermissionset create_netlink_fib_lookup_socket
		    (netlink_fib_lookup_socket (append bind connect create
						       getattr getopt ioctl
						       read setattr setopt
						       shutdown write)))
(classpermissionset create_netlink_generic_socket
		    (netlink_generic_socket (append bind connect create getattr
						    getopt ioctl read setattr
						    setopt shutdown write)))
(classpermissionset create_netlink_iscsi_socket
		    (netlink_iscsi_socket (append bind connect create getattr
						  getopt ioctl read setattr
						  setopt shutdown write)))
(classpermissionset create_netlink_kobject_uevent_socket
		    (netlink_kobject_uevent_socket (append bind connect create
							   getattr getopt ioctl
							   read setattr setopt
							   shutdown write)))
(classpermissionset create_netlink_netfilter_socket
		    (netlink_netfilter_socket (append bind connect create getattr
						      getopt ioctl read setattr
						      setopt shutdown write)))
(classpermissionset create_netlink_nflog_socket
		    (netlink_nflog_socket (append bind connect create getattr
						  getopt ioctl read setattr
						  setopt shutdown write)))
(classpermissionset create_netlink_rdma_socket
		    (netlink_rdma_socket (append bind connect create getattr
						 getopt ioctl read setattr setopt
						 shutdown write)))
(classpermissionset create_netlink_route_socket
		    (netlink_route_socket (append bind connect create getattr
						  getopt ioctl read setattr
						  setopt shutdown write)))
(classpermissionset create_netlink_scsitransport_socket
		    (netlink_scsitransport_socket (append bind connect create
							  getattr getopt ioctl
							  read setattr setopt
							  shutdown write)))
(classpermissionset create_netlink_selinux_socket
		    (netlink_selinux_socket (append bind connect create getattr
						    getopt ioctl read setattr
						    setopt shutdown write)))
(classpermissionset create_netlink_socket
		    (netlink_socket (append bind connect create getattr getopt
					    ioctl read setattr setopt shutdown
					    write)))
(classpermissionset create_netlink_tcpdiag_socket
		    (netlink_tcpdiag_socket (append bind connect create getattr
						    getopt ioctl read setattr
						    setopt shutdown write)))
(classpermissionset create_netlink_xfrm_socket
		    (netlink_xfrm_socket (append bind connect create getattr
						 getopt ioctl read setattr setopt
						 shutdown write)))
(classpermissionset create_netrom_socket
		    (netrom_socket (append bind connect create getattr getopt
					   ioctl read setattr setopt shutdown
					   write)))
(classpermissionset create_nfc_socket
		    (nfc_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_packet_socket
		    (packet_socket (append bind connect create getattr getopt
					   ioctl read setattr setopt shutdown
					   write)))
(classpermissionset create_phonet_socket
		    (phonet_socket (append bind connect create getattr getopt
					   ioctl read setattr setopt shutdown
					   write)))
(classpermissionset create_pppox_socket
		    (pppox_socket (append bind connect create getattr getopt
					  ioctl read setattr setopt shutdown
					  write)))
(classpermissionset create_qipcrtr_socket
		    (qipcrtr_socket (append bind connect create getattr getopt
					    ioctl read setattr setopt shutdown
					    write)))
(classpermissionset create_rawip_socket
		    (rawip_socket (append bind connect create getattr getopt
					  ioctl read setattr setopt shutdown
					  write)))
(classpermissionset create_rds_socket
		    (rds_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_rose_socket
		    (rose_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_rxrpc_socket
		    (rxrpc_socket (append bind connect create getattr getopt
					  ioctl read setattr setopt shutdown
					  write)))
(classpermissionset create_sctp_socket
		    (sctp_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_sctp_stream_socket
		    (sctp_socket (accept append bind connect create getattr
					 getopt ioctl listen read setattr setopt
					 shutdown write)))
(classpermissionset create_smc_socket
		    (smc_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_socket
		    (socket (append bind connect create getattr getopt ioctl read
				    setattr setopt shutdown write)))
(classpermissionset create_tcp_socket
		    (tcp_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_tcp_stream_socket
		    (tcp_socket (accept append bind connect create getattr getopt
					ioctl listen read setattr setopt shutdown
					write)))
(classpermissionset create_tipc_socket
		    (tipc_socket (append bind connect create getattr getopt ioctl
					 read setattr setopt shutdown write)))
(classpermissionset create_tun_socket
		    (tun_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_udp_socket
		    (udp_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_unix_dgram_socket
		    (unix_dgram_socket (append bind connect create getattr getopt
					       ioctl read setattr setopt shutdown
					       write)))
(classpermissionset create_unix_stream_socket
		    (unix_stream_socket (append bind connect create getattr
						getopt ioctl read setattr setopt
						shutdown write)))
(classpermissionset create_unix_stream_stream_socket
		    (unix_stream_socket (accept append bind connect create
						getattr getopt ioctl listen read
						setattr setopt shutdown write)))
(classpermissionset create_vsock_socket
		    (vsock_socket (append bind connect create getattr getopt
					  ioctl read setattr setopt shutdown
					  write)))
(classpermissionset create_x25_socket
		    (x25_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))
(classpermissionset create_xdp_socket
		    (xdp_socket (append bind connect create getattr getopt ioctl
					read setattr setopt shutdown write)))

(classpermissionset readwrite_alg_socket
		    (alg_socket (append bind connect getattr getopt ioctl read
					setopt shutdown write)))
(classpermissionset readwrite_bluetooth_socket
		    (bluetooth_socket (append bind connect getattr getopt ioctl
					      read setopt shutdown write)))
(classpermissionset readwrite_dccp_socket
		    (dccp_socket (append bind connect getattr getopt ioctl read
					 setopt shutdown write)))
(classpermissionset readwrite_netlink_audit_socket
		    (netlink_audit_socket (append bind connect getattr getopt
						  ioctl read setopt shutdown
						  write)))
(classpermissionset readwrite_sctp_socket
		    (sctp_socket (append bind connect getattr getopt ioctl read
					 setopt shutdown write)))
(classpermissionset readwrite_tcp_socket
		    (tcp_socket (append bind connect getattr getopt ioctl read
					setopt shutdown write)))
(classpermissionset readwrite_tun_socket
		    (tun_socket (append bind connect getattr getopt ioctl read
					setopt shutdown write)))
(classpermissionset readwrite_unix_dgram_socket
		    (unix_dgram_socket (append bind connect getattr getopt ioctl
					       read setopt shutdown write)))
(classpermissionset readwrite_unix_stream_socket
		    (unix_stream_socket (append bind connect getattr getopt ioctl
						read setopt shutdown write)))

(classpermissionset write_alg_socket
		    (alg_socket (append bind connect getattr getopt ioctl setopt
					shutdown write)))
(classpermissionset write_bluetooth_socket
		    (bluetooth_socket (append bind connect getattr getopt ioctl
					      setopt shutdown write)))
(classpermissionset write_dccp_socket
		    (dccp_socket (append bind connect getattr getopt ioctl setopt
					 shutdown write)))
(classpermissionset write_sctp_socket
		    (sctp_socket (append bind connect getattr getopt ioctl setopt
					 shutdown write)))
(classpermissionset write_tcp_socket
		    (tcp_socket (append bind connect getattr getopt ioctl setopt
					shutdown write)))
(classpermissionset write_tun_socket
		    (tun_socket (append bind connect getattr getopt ioctl setopt
					shutdown write)))
(classpermissionset write_unix_dgram_socket
		    (unix_dgram_socket (append bind connect getattr getopt ioctl
					       setopt shutdown write)))
(classpermissionset write_unix_stream_socket
		    (unix_stream_socket (append bind connect getattr getopt ioctl
						setopt shutdown write)))

(classmap constrainsocketobject (nameconnect nodebind))
(classmap constrainsocketsubject
	  (append association attachqueue create getattr read relabelto setattr
		  write))

(classmap sockets (common getattr))

(classmapping constrainsocketobject nameconnect (dccp_socket (name_connect)))
(classmapping constrainsocketobject nameconnect (sctp_socket (name_connect)))
(classmapping constrainsocketobject nameconnect (tcp_socket (name_connect)))

(classmapping constrainsocketobject nodebind (dccp_socket (node_bind)))
(classmapping constrainsocketobject nodebind (icmp_socket (node_bind)))
(classmapping constrainsocketobject nodebind (rawip_socket (node_bind)))
(classmapping constrainsocketobject nodebind (sctp_socket (node_bind)))
(classmapping constrainsocketobject nodebind (tcp_socket (node_bind)))
(classmapping constrainsocketobject nodebind (udp_socket (node_bind)))

(classmapping constrainsocketsubject append (alg_socket (append)))
(classmapping constrainsocketsubject append (appletalk_socket (append)))
(classmapping constrainsocketsubject append (atmpvc_socket (append)))
(classmapping constrainsocketsubject append (atmsvc_socket (append)))
(classmapping constrainsocketsubject append (ax25_socket (append)))
(classmapping constrainsocketsubject append (bluetooth_socket (append)))
(classmapping constrainsocketsubject append (caif_socket (append)))
(classmapping constrainsocketsubject append (can_socket (append)))
(classmapping constrainsocketsubject append (dccp_socket (append)))
(classmapping constrainsocketsubject append (decnet_socket (append)))
(classmapping constrainsocketsubject append (icmp_socket (append)))
(classmapping constrainsocketsubject append (ieee802154_socket (append)))
(classmapping constrainsocketsubject append (ipx_socket (append)))
(classmapping constrainsocketsubject append (irda_socket (append)))
(classmapping constrainsocketsubject append (isdn_socket (append)))
(classmapping constrainsocketsubject append (iucv_socket (append)))
(classmapping constrainsocketsubject append (kcm_socket (append)))
(classmapping constrainsocketsubject append (key_socket (append)))
(classmapping constrainsocketsubject append (llc_socket (append)))
(classmapping constrainsocketsubject append (netlink_audit_socket (append)))
(classmapping constrainsocketsubject append (netlink_connector_socket (append)))
(classmapping constrainsocketsubject append (netlink_crypto_socket (append)))
(classmapping constrainsocketsubject append (netlink_dnrt_socket (append)))
(classmapping constrainsocketsubject append (netlink_fib_lookup_socket (append)))
(classmapping constrainsocketsubject append (netlink_generic_socket (append)))
(classmapping constrainsocketsubject append (netlink_iscsi_socket (append)))
(classmapping constrainsocketsubject append
	      (netlink_kobject_uevent_socket (append)))
(classmapping constrainsocketsubject append (netlink_netfilter_socket (append)))
(classmapping constrainsocketsubject append (netlink_nflog_socket (append)))
(classmapping constrainsocketsubject append (netlink_rdma_socket (append)))
(classmapping constrainsocketsubject append (netlink_route_socket (append)))
(classmapping constrainsocketsubject append
	      (netlink_scsitransport_socket (append)))
(classmapping constrainsocketsubject append (netlink_selinux_socket (append)))
(classmapping constrainsocketsubject append (netlink_socket (append)))
(classmapping constrainsocketsubject append (netlink_tcpdiag_socket (append)))
(classmapping constrainsocketsubject append (netlink_xfrm_socket (append)))
(classmapping constrainsocketsubject append (netrom_socket (append)))
(classmapping constrainsocketsubject append (nfc_socket (append)))
(classmapping constrainsocketsubject append (packet_socket (append)))
(classmapping constrainsocketsubject append (phonet_socket (append)))
(classmapping constrainsocketsubject append (pppox_socket (append)))
(classmapping constrainsocketsubject append (qipcrtr_socket (append)))
(classmapping constrainsocketsubject append (rawip_socket (append)))
(classmapping constrainsocketsubject append (rds_socket (append)))
(classmapping constrainsocketsubject append (rose_socket (append)))
(classmapping constrainsocketsubject append (rxrpc_socket (append)))
(classmapping constrainsocketsubject append (sctp_socket (append)))
(classmapping constrainsocketsubject append (smc_socket (append)))
(classmapping constrainsocketsubject append (socket (append)))
(classmapping constrainsocketsubject append (tcp_socket (append)))
(classmapping constrainsocketsubject append (tipc_socket (append)))
(classmapping constrainsocketsubject append (tun_socket (append)))
(classmapping constrainsocketsubject append (udp_socket (append)))
(classmapping constrainsocketsubject append (unix_dgram_socket (append)))
(classmapping constrainsocketsubject append (unix_stream_socket (append)))
(classmapping constrainsocketsubject append (vsock_socket (append)))
(classmapping constrainsocketsubject append (x25_socket (append)))
(classmapping constrainsocketsubject append (xdp_socket (append)))

(classmapping constrainsocketsubject
	      association (sctp_socket (association)))

(classmapping constrainsocketsubject
	      attachqueue (tun_socket (attach_queue)))

(classmapping constrainsocketsubject create (alg_socket (create)))
(classmapping constrainsocketsubject create (appletalk_socket (create)))
(classmapping constrainsocketsubject create (atmpvc_socket (create)))
(classmapping constrainsocketsubject create (atmsvc_socket (create)))
(classmapping constrainsocketsubject create (ax25_socket (create)))
(classmapping constrainsocketsubject create (bluetooth_socket (create)))
(classmapping constrainsocketsubject create (caif_socket (create)))
(classmapping constrainsocketsubject create (can_socket (create)))
(classmapping constrainsocketsubject create (dccp_socket (create)))
(classmapping constrainsocketsubject create (decnet_socket (create)))
(classmapping constrainsocketsubject create (icmp_socket (create)))
(classmapping constrainsocketsubject create (ieee802154_socket (create)))
(classmapping constrainsocketsubject create (ipx_socket (create)))
(classmapping constrainsocketsubject create (irda_socket (create)))
(classmapping constrainsocketsubject create (isdn_socket (create)))
(classmapping constrainsocketsubject create (iucv_socket (create)))
(classmapping constrainsocketsubject create (kcm_socket (create)))
(classmapping constrainsocketsubject create (key_socket (create)))
(classmapping constrainsocketsubject create (llc_socket (create)))
(classmapping constrainsocketsubject create (netlink_audit_socket (create)))
(classmapping constrainsocketsubject create (netlink_connector_socket (create)))
(classmapping constrainsocketsubject create (netlink_crypto_socket (create)))
(classmapping constrainsocketsubject create (netlink_dnrt_socket (create)))
(classmapping constrainsocketsubject create (netlink_fib_lookup_socket (create)))
(classmapping constrainsocketsubject create (netlink_generic_socket (create)))
(classmapping constrainsocketsubject create (netlink_iscsi_socket (create)))
(classmapping constrainsocketsubject create
	      (netlink_kobject_uevent_socket (create)))
(classmapping constrainsocketsubject create (netlink_netfilter_socket (create)))
(classmapping constrainsocketsubject create (netlink_nflog_socket (create)))
(classmapping constrainsocketsubject create (netlink_rdma_socket (create)))
(classmapping constrainsocketsubject create (netlink_route_socket (create)))
(classmapping constrainsocketsubject create
	      (netlink_scsitransport_socket (create)))
(classmapping constrainsocketsubject create (netlink_selinux_socket (create)))
(classmapping constrainsocketsubject create (netlink_socket (create)))
(classmapping constrainsocketsubject create (netlink_tcpdiag_socket (create)))
(classmapping constrainsocketsubject create (netlink_xfrm_socket (create)))
(classmapping constrainsocketsubject create (netrom_socket (create)))
(classmapping constrainsocketsubject create (nfc_socket (create)))
(classmapping constrainsocketsubject create (packet_socket (create)))
(classmapping constrainsocketsubject create (phonet_socket (create)))
(classmapping constrainsocketsubject create (pppox_socket (create)))
(classmapping constrainsocketsubject create (qipcrtr_socket (create)))
(classmapping constrainsocketsubject create (rawip_socket (create)))
(classmapping constrainsocketsubject create (rds_socket (create)))
(classmapping constrainsocketsubject create (rose_socket (create)))
(classmapping constrainsocketsubject create (rxrpc_socket (create)))
(classmapping constrainsocketsubject create (sctp_socket (create)))
(classmapping constrainsocketsubject create (smc_socket (create)))
(classmapping constrainsocketsubject create (socket (create)))
(classmapping constrainsocketsubject create (tcp_socket (create)))
(classmapping constrainsocketsubject create (tipc_socket (create)))
(classmapping constrainsocketsubject create (tun_socket (create)))
(classmapping constrainsocketsubject create (udp_socket (create)))
(classmapping constrainsocketsubject create (unix_dgram_socket (create)))
(classmapping constrainsocketsubject create (unix_stream_socket (create)))
(classmapping constrainsocketsubject create (vsock_socket (create)))
(classmapping constrainsocketsubject create (x25_socket (create)))
(classmapping constrainsocketsubject create (xdp_socket (create)))

(classmapping constrainsocketsubject getattr (alg_socket (getattr)))
(classmapping constrainsocketsubject getattr (appletalk_socket (getattr)))
(classmapping constrainsocketsubject getattr (atmpvc_socket (getattr)))
(classmapping constrainsocketsubject getattr (atmsvc_socket (getattr)))
(classmapping constrainsocketsubject getattr (ax25_socket (getattr)))
(classmapping constrainsocketsubject getattr (bluetooth_socket (getattr)))
(classmapping constrainsocketsubject getattr (caif_socket (getattr)))
(classmapping constrainsocketsubject getattr (can_socket (getattr)))
(classmapping constrainsocketsubject getattr (dccp_socket (getattr)))
(classmapping constrainsocketsubject getattr (decnet_socket (getattr)))
(classmapping constrainsocketsubject getattr (icmp_socket (getattr)))
(classmapping constrainsocketsubject getattr (ieee802154_socket (getattr)))
(classmapping constrainsocketsubject getattr (ipx_socket (getattr)))
(classmapping constrainsocketsubject getattr (irda_socket (getattr)))
(classmapping constrainsocketsubject getattr (isdn_socket (getattr)))
(classmapping constrainsocketsubject getattr (iucv_socket (getattr)))
(classmapping constrainsocketsubject getattr (kcm_socket (getattr)))
(classmapping constrainsocketsubject getattr (key_socket (getattr)))
(classmapping constrainsocketsubject getattr (llc_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_audit_socket (getattr)))
(classmapping constrainsocketsubject getattr
	      (netlink_connector_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_crypto_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_dnrt_socket (getattr)))
(classmapping constrainsocketsubject getattr
	      (netlink_fib_lookup_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_generic_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_iscsi_socket (getattr)))
(classmapping constrainsocketsubject getattr
	      (netlink_kobject_uevent_socket (getattr)))
(classmapping constrainsocketsubject getattr
	      (netlink_netfilter_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_nflog_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_rdma_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_route_socket (getattr)))
(classmapping constrainsocketsubject getattr
	      (netlink_scsitransport_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_selinux_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_tcpdiag_socket (getattr)))
(classmapping constrainsocketsubject getattr (netlink_xfrm_socket (getattr)))
(classmapping constrainsocketsubject getattr (netrom_socket (getattr)))
(classmapping constrainsocketsubject getattr (nfc_socket (getattr)))
(classmapping constrainsocketsubject getattr (packet_socket (getattr)))
(classmapping constrainsocketsubject getattr (phonet_socket (getattr)))
(classmapping constrainsocketsubject getattr (pppox_socket (getattr)))
(classmapping constrainsocketsubject getattr (process (getattr)))
(classmapping constrainsocketsubject getattr (qipcrtr_socket (getattr)))
(classmapping constrainsocketsubject getattr (rawip_socket (getattr)))
(classmapping constrainsocketsubject getattr (rds_socket (getattr)))
(classmapping constrainsocketsubject getattr (rose_socket (getattr)))
(classmapping constrainsocketsubject getattr (rxrpc_socket (getattr)))
(classmapping constrainsocketsubject getattr (sctp_socket (getattr)))
(classmapping constrainsocketsubject getattr (smc_socket (getattr)))
(classmapping constrainsocketsubject getattr (socket (getattr)))
(classmapping constrainsocketsubject getattr (tcp_socket (getattr)))
(classmapping constrainsocketsubject getattr (tipc_socket (getattr)))
(classmapping constrainsocketsubject getattr (tun_socket (getattr)))
(classmapping constrainsocketsubject getattr (udp_socket (getattr)))
(classmapping constrainsocketsubject getattr (unix_dgram_socket (getattr)))
(classmapping constrainsocketsubject getattr (unix_stream_socket (getattr)))
(classmapping constrainsocketsubject getattr (vsock_socket (getattr)))
(classmapping constrainsocketsubject getattr (x25_socket (getattr)))
(classmapping constrainsocketsubject getattr (xdp_socket (getattr)))

(classmapping constrainsocketsubject read (alg_socket (read)))
(classmapping constrainsocketsubject read (appletalk_socket (read)))
(classmapping constrainsocketsubject read (atmpvc_socket (read)))
(classmapping constrainsocketsubject read (atmsvc_socket (read)))
(classmapping constrainsocketsubject read (ax25_socket (read)))
(classmapping constrainsocketsubject read (bluetooth_socket (read)))
(classmapping constrainsocketsubject read (caif_socket (read)))
(classmapping constrainsocketsubject read (can_socket (read)))
(classmapping constrainsocketsubject read (dccp_socket (read)))
(classmapping constrainsocketsubject read (decnet_socket (read)))
(classmapping constrainsocketsubject read (icmp_socket (read)))
(classmapping constrainsocketsubject read (ieee802154_socket (read)))
(classmapping constrainsocketsubject read (ipx_socket (read)))
(classmapping constrainsocketsubject read (irda_socket (read)))
(classmapping constrainsocketsubject read (isdn_socket (read)))
(classmapping constrainsocketsubject read (iucv_socket (read)))
(classmapping constrainsocketsubject read (kcm_socket (read)))
(classmapping constrainsocketsubject read (key_socket (read)))
(classmapping constrainsocketsubject read (llc_socket (read)))
(classmapping constrainsocketsubject read (netlink_audit_socket (read)))
(classmapping constrainsocketsubject read (netlink_connector_socket (read)))
(classmapping constrainsocketsubject read (netlink_crypto_socket (read)))
(classmapping constrainsocketsubject read (netlink_dnrt_socket (read)))
(classmapping constrainsocketsubject read (netlink_fib_lookup_socket (read)))
(classmapping constrainsocketsubject read (netlink_generic_socket (read)))
(classmapping constrainsocketsubject read (netlink_iscsi_socket (read)))
(classmapping constrainsocketsubject read
	      (netlink_kobject_uevent_socket (read)))
(classmapping constrainsocketsubject read (netlink_netfilter_socket (read)))
(classmapping constrainsocketsubject read (netlink_nflog_socket (read)))
(classmapping constrainsocketsubject read (netlink_rdma_socket (read)))
(classmapping constrainsocketsubject read (netlink_route_socket (read)))
(classmapping constrainsocketsubject read (netlink_scsitransport_socket (read)))
(classmapping constrainsocketsubject read (netlink_selinux_socket (read)))
(classmapping constrainsocketsubject read (netlink_socket (read)))
(classmapping constrainsocketsubject read (netlink_tcpdiag_socket (read)))
(classmapping constrainsocketsubject read (netlink_xfrm_socket (read)))
(classmapping constrainsocketsubject read (netrom_socket (read)))
(classmapping constrainsocketsubject read (nfc_socket (read)))
(classmapping constrainsocketsubject read (packet_socket (read)))
(classmapping constrainsocketsubject read (phonet_socket (read)))
(classmapping constrainsocketsubject read (pppox_socket (read)))
(classmapping constrainsocketsubject read (qipcrtr_socket (read)))
(classmapping constrainsocketsubject read (rawip_socket (read)))
(classmapping constrainsocketsubject read (rds_socket (read)))
(classmapping constrainsocketsubject read (rose_socket (read)))
(classmapping constrainsocketsubject read (rxrpc_socket (read)))
(classmapping constrainsocketsubject read (sctp_socket (read)))
(classmapping constrainsocketsubject read (smc_socket (read)))
(classmapping constrainsocketsubject read (socket (read)))
(classmapping constrainsocketsubject read (tcp_socket (read)))
(classmapping constrainsocketsubject read (tipc_socket (read)))
(classmapping constrainsocketsubject read (tun_socket (read)))
(classmapping constrainsocketsubject read (udp_socket (read)))
(classmapping constrainsocketsubject read (unix_dgram_socket (read)))
(classmapping constrainsocketsubject read (unix_stream_socket (read)))
(classmapping constrainsocketsubject read (vsock_socket (read)))
(classmapping constrainsocketsubject read (x25_socket (read)))
(classmapping constrainsocketsubject read (xdp_socket (read)))

(classmapping constrainsocketsubject relabelto (alg_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (appletalk_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (atmpvc_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (atmsvc_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (ax25_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (bluetooth_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (caif_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (can_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (dccp_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (decnet_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (icmp_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (ieee802154_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (ipx_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (irda_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (isdn_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (iucv_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (kcm_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (key_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (llc_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_audit_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_connector_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_crypto_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_dnrt_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_fib_lookup_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_generic_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_iscsi_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_kobject_uevent_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_netfilter_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_nflog_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_rdma_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_route_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_scsitransport_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_selinux_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (netlink_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_tcpdiag_socket (relabelto)))
(classmapping constrainsocketsubject relabelto
	      (netlink_xfrm_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (netrom_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (nfc_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (packet_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (phonet_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (pppox_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (qipcrtr_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (rawip_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (rds_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (rose_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (rxrpc_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (sctp_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (smc_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (socket (relabelto)))
(classmapping constrainsocketsubject relabelto (tcp_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (tipc_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (tun_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (udp_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (unix_dgram_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (unix_stream_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (vsock_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (x25_socket (relabelto)))
(classmapping constrainsocketsubject relabelto (xdp_socket (relabelto)))

(classmapping constrainsocketsubject setattr (alg_socket (setattr)))
(classmapping constrainsocketsubject setattr (appletalk_socket (setattr)))
(classmapping constrainsocketsubject setattr (atmpvc_socket (setattr)))
(classmapping constrainsocketsubject setattr (atmsvc_socket (setattr)))
(classmapping constrainsocketsubject setattr (ax25_socket (setattr)))
(classmapping constrainsocketsubject setattr (bluetooth_socket (setattr)))
(classmapping constrainsocketsubject setattr (caif_socket (setattr)))
(classmapping constrainsocketsubject setattr (can_socket (setattr)))
(classmapping constrainsocketsubject setattr (dccp_socket (setattr)))
(classmapping constrainsocketsubject setattr (decnet_socket (setattr)))
(classmapping constrainsocketsubject setattr (icmp_socket (setattr)))
(classmapping constrainsocketsubject setattr (ieee802154_socket (setattr)))
(classmapping constrainsocketsubject setattr (ipx_socket (setattr)))
(classmapping constrainsocketsubject setattr (irda_socket (setattr)))
(classmapping constrainsocketsubject setattr (isdn_socket (setattr)))
(classmapping constrainsocketsubject setattr (iucv_socket (setattr)))
(classmapping constrainsocketsubject setattr (kcm_socket (setattr)))
(classmapping constrainsocketsubject setattr (key_socket (setattr)))
(classmapping constrainsocketsubject setattr (llc_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_audit_socket (setattr)))
(classmapping constrainsocketsubject setattr
	      (netlink_connector_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_crypto_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_dnrt_socket (setattr)))
(classmapping constrainsocketsubject setattr
	      (netlink_fib_lookup_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_generic_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_iscsi_socket (setattr)))
(classmapping constrainsocketsubject setattr
	      (netlink_kobject_uevent_socket (setattr)))
(classmapping constrainsocketsubject setattr
	      (netlink_netfilter_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_nflog_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_rdma_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_route_socket (setattr)))
(classmapping constrainsocketsubject setattr
	      (netlink_scsitransport_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_selinux_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_tcpdiag_socket (setattr)))
(classmapping constrainsocketsubject setattr (netlink_xfrm_socket (setattr)))
(classmapping constrainsocketsubject setattr (netrom_socket (setattr)))
(classmapping constrainsocketsubject setattr (nfc_socket (setattr)))
(classmapping constrainsocketsubject setattr (packet_socket (setattr)))
(classmapping constrainsocketsubject setattr (phonet_socket (setattr)))
(classmapping constrainsocketsubject setattr (pppox_socket (setattr)))
(classmapping constrainsocketsubject setattr (qipcrtr_socket (setattr)))
(classmapping constrainsocketsubject setattr (rawip_socket (setattr)))
(classmapping constrainsocketsubject setattr (rds_socket (setattr)))
(classmapping constrainsocketsubject setattr (rose_socket (setattr)))
(classmapping constrainsocketsubject setattr (rxrpc_socket (setattr)))
(classmapping constrainsocketsubject setattr (sctp_socket (setattr)))
(classmapping constrainsocketsubject setattr (smc_socket (setattr)))
(classmapping constrainsocketsubject setattr (socket (setattr)))
(classmapping constrainsocketsubject setattr (tcp_socket (setattr)))
(classmapping constrainsocketsubject setattr (tipc_socket (setattr)))
(classmapping constrainsocketsubject setattr (tun_socket (setattr)))
(classmapping constrainsocketsubject setattr (udp_socket (setattr)))
(classmapping constrainsocketsubject setattr (unix_dgram_socket (setattr)))
(classmapping constrainsocketsubject setattr (unix_stream_socket (setattr)))
(classmapping constrainsocketsubject setattr (vsock_socket (setattr)))
(classmapping constrainsocketsubject setattr (x25_socket (setattr)))
(classmapping constrainsocketsubject setattr (xdp_socket (setattr)))

(classmapping constrainsocketsubject write (alg_socket (write)))
(classmapping constrainsocketsubject write (appletalk_socket (write)))
(classmapping constrainsocketsubject write (atmpvc_socket (write)))
(classmapping constrainsocketsubject write (atmsvc_socket (write)))
(classmapping constrainsocketsubject write (ax25_socket (write)))
(classmapping constrainsocketsubject write (bluetooth_socket (write)))
(classmapping constrainsocketsubject write (caif_socket (write)))
(classmapping constrainsocketsubject write (can_socket (write)))
(classmapping constrainsocketsubject write (dccp_socket (write)))
(classmapping constrainsocketsubject write (decnet_socket (write)))
(classmapping constrainsocketsubject write (icmp_socket (write)))
(classmapping constrainsocketsubject write (ieee802154_socket (write)))
(classmapping constrainsocketsubject write (ipx_socket (write)))
(classmapping constrainsocketsubject write (irda_socket (write)))
(classmapping constrainsocketsubject write (isdn_socket (write)))
(classmapping constrainsocketsubject write (iucv_socket (write)))
(classmapping constrainsocketsubject write (kcm_socket (write)))
(classmapping constrainsocketsubject write (key_socket (write)))
(classmapping constrainsocketsubject write (llc_socket (write)))
(classmapping constrainsocketsubject write (netlink_audit_socket (write)))
(classmapping constrainsocketsubject write (netlink_connector_socket (write)))
(classmapping constrainsocketsubject write (netlink_crypto_socket (write)))
(classmapping constrainsocketsubject write (netlink_dnrt_socket (write)))
(classmapping constrainsocketsubject write (netlink_fib_lookup_socket (write)))
(classmapping constrainsocketsubject write (netlink_generic_socket (write)))
(classmapping constrainsocketsubject write (netlink_iscsi_socket (write)))
(classmapping constrainsocketsubject write
	      (netlink_kobject_uevent_socket (write)))
(classmapping constrainsocketsubject write (netlink_netfilter_socket (write)))
(classmapping constrainsocketsubject write (netlink_nflog_socket (write)))
(classmapping constrainsocketsubject write (netlink_rdma_socket (write)))
(classmapping constrainsocketsubject write (netlink_route_socket (write)))
(classmapping constrainsocketsubject write
	      (netlink_scsitransport_socket (write)))
(classmapping constrainsocketsubject write (netlink_selinux_socket (write)))
(classmapping constrainsocketsubject write (netlink_socket (write)))
(classmapping constrainsocketsubject write (netlink_tcpdiag_socket (write)))
(classmapping constrainsocketsubject write (netlink_xfrm_socket (write)))
(classmapping constrainsocketsubject write (netrom_socket (write)))
(classmapping constrainsocketsubject write (nfc_socket (write)))
(classmapping constrainsocketsubject write (packet_socket (write)))
(classmapping constrainsocketsubject write (phonet_socket (write)))
(classmapping constrainsocketsubject write (pppox_socket (write)))
(classmapping constrainsocketsubject write (qipcrtr_socket (write)))
(classmapping constrainsocketsubject write (rawip_socket (write)))
(classmapping constrainsocketsubject write (rds_socket (write)))
(classmapping constrainsocketsubject write (rose_socket (write)))
(classmapping constrainsocketsubject write (rxrpc_socket (write)))
(classmapping constrainsocketsubject write (sctp_socket (write)))
(classmapping constrainsocketsubject write (smc_socket (write)))
(classmapping constrainsocketsubject write (socket (write)))
(classmapping constrainsocketsubject write (tcp_socket (write)))
(classmapping constrainsocketsubject write (tipc_socket (write)))
(classmapping constrainsocketsubject write (tun_socket (write)))
(classmapping constrainsocketsubject write (udp_socket (write)))
(classmapping constrainsocketsubject write (unix_dgram_socket (write)))
(classmapping constrainsocketsubject write (unix_stream_socket (write)))
(classmapping constrainsocketsubject write (vsock_socket (write)))
(classmapping constrainsocketsubject write (x25_socket (write)))
(classmapping constrainsocketsubject write (xdp_socket (write)))

(classmapping sockets common
	      (alg_socket (not (accept listen map name_bind relabelfrom relabelto
				       recvfrom sendto))))
(classmapping sockets common
	      (appletalk_socket (not (accept listen map name_bind relabelfrom
					     relabelto recvfrom sendto))))
(classmapping sockets common
	      (atmpvc_socket (not (accept listen map name_bind relabelfrom
					  relabelto recvfrom sendto))))
(classmapping sockets common
	      (atmsvc_socket (not (accept listen map name_bind relabelfrom
					  relabelto recvfrom sendto))))
(classmapping sockets common
	      (ax25_socket (not (accept listen map name_bind relabelfrom
					relabelto recvfrom sendto))))
(classmapping sockets common
	      (bluetooth_socket (not (accept listen map name_bind relabelfrom
					     relabelto recvfrom sendto))))
(classmapping sockets common
	      (caif_socket (not (accept listen map name_bind relabelfrom
					relabelto recvfrom sendto))))
(classmapping sockets common
	      (can_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))
(classmapping sockets common
	      (dccp_socket (not (accept listen map name_connect name_bind
					node_bind relabelfrom relabelto recvfrom
					sendto))))
(classmapping sockets common
	      (decnet_socket (not (accept listen map name_bind relabelfrom
					  relabelto recvfrom sendto))))
(classmapping sockets common
	      (icmp_socket (not (accept listen map name_bind node_bind
					relabelfrom relabelto recvfrom sendto))))
(classmapping sockets common
	      (ieee802154_socket (not (accept listen map name_bind relabelfrom
					      relabelto recvfrom sendto))))
(classmapping sockets common
	      (ipx_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))
(classmapping sockets common
	      (irda_socket (not (accept listen map name_bind relabelfrom
					relabelto recvfrom sendto))))
(classmapping sockets common
	      (isdn_socket (not (accept listen map name_bind relabelfrom
					relabelto recvfrom sendto))))
(classmapping sockets common
	      (iucv_socket (not (accept listen map name_bind relabelfrom
					relabelto recvfrom sendto))))
(classmapping sockets common
	      (kcm_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))
(classmapping sockets common
	      (key_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))
(classmapping sockets common
	      (llc_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))
(classmapping sockets common
	      (netlink_audit_socket (not (accept listen map name_bind nlmsg_read
						 nlmsg_readpriv nlmsg_relay
						 nlmsg_tty_audit nlmsg_write
						 relabelfrom relabelto recvfrom
						 sendto))))
(classmapping sockets common
	      (netlink_connector_socket (not (accept listen map name_bind
						     relabelfrom relabelto
						     recvfrom sendto))))
(classmapping sockets common
	      (netlink_crypto_socket (not (accept listen map name_bind
						  relabelfrom relabelto
						  recvfrom sendto))))
(classmapping sockets common
	      (netlink_dnrt_socket (not (accept listen map name_bind
						relabelfrom relabelto
						recvfrom sendto))))
(classmapping sockets common
	      (netlink_fib_lookup_socket (not (accept listen map name_bind
						      relabelfrom relabelto
						      recvfrom sendto))))
(classmapping sockets common
	      (netlink_generic_socket (not (accept listen map name_bind
						   relabelfrom relabelto
						   recvfrom sendto))))
(classmapping sockets common
	      (netlink_iscsi_socket (not (accept listen map name_bind
						 relabelfrom relabelto
						 recvfrom sendto))))
(classmapping sockets common
	      (netlink_kobject_uevent_socket (not (accept listen map name_bind
						    relabelfrom relabelto
						    recvfrom sendto))))
(classmapping sockets common
	      (netlink_netfilter_socket (not (accept listen map name_bind
						     relabelfrom relabelto
						     recvfrom sendto))))
(classmapping sockets common
	      (netlink_nflog_socket (not (accept listen map name_bind
						 relabelfrom relabelto
						 recvfrom sendto))))
(classmapping sockets common
	      (netlink_rdma_socket (not (accept listen map name_bind
						relabelfrom relabelto
						recvfrom sendto))))
(classmapping sockets common
	      (netlink_route_socket (not (accept listen map name_bind nlmsg_read
						 nlmsg_write relabelfrom
						 relabelto recvfrom sendto))))
(classmapping sockets common
	      (netlink_scsitransport_socket (not (accept listen map name_bind
							 relabelfrom relabelto
							 recvfrom sendto))))
(classmapping sockets common
	      (netlink_selinux_socket (not (accept listen map name_bind
						   relabelfrom relabelto
						   recvfrom sendto))))
(classmapping sockets common
	      (netlink_socket (not (accept listen map name_bind relabelfrom
					   relabelto recvfrom sendto))))
(classmapping sockets common
	      (netlink_tcpdiag_socket (not (accept listen map name_bind
						   nlmsg_read nlmsg_write
						   relabelfrom relabelto
						   recvfrom sendto))))
(classmapping sockets common
	      (netlink_xfrm_socket (not (accept listen map name_bind nlmsg_read
						nlmsg_write relabelfrom relabelto
						recvfrom sendto))))
(classmapping sockets common
	      (netrom_socket (not (accept listen map name_bind relabelfrom
					  relabelto recvfrom sendto))))
(classmapping sockets common
	      (nfc_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))
(classmapping sockets common
	      (packet_socket (not (accept listen map name_bind relabelfrom
					  relabelto recvfrom sendto))))
(classmapping sockets common
	      (phonet_socket (not (accept listen map name_bind relabelfrom
					  relabelto recvfrom sendto))))
(classmapping sockets common
	      (pppox_socket (not (accept listen map name_bind relabelfrom
					 relabelto recvfrom sendto))))
(classmapping sockets common
	      (qipcrtr_socket (not (accept listen map name_bind relabelfrom
					   relabelto recvfrom sendto))))
(classmapping sockets common
	      (rawip_socket (not (accept listen map name_bind node_bind
					 relabelfrom relabelto recvfrom
					 sendto))))
(classmapping sockets common
	      (rds_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))
(classmapping sockets common
	      (rose_socket (not (accept listen map name_bind relabelfrom
					relabelto recvfrom sendto))))
(classmapping sockets common
	      (rxrpc_socket (not (accept listen map name_bind relabelfrom
					 relabelto recvfrom sendto))))
(classmapping sockets common
	      (sctp_socket (not (accept association listen map name_connect
					name_bind node_bind relabelfrom
					relabelto recvfrom sendto))))
(classmapping sockets common
	      (smc_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))
(classmapping sockets common
	      (socket (not (accept listen map name_bind relabelfrom
				   relabelto recvfrom sendto))))
(classmapping sockets common
	      (tcp_socket (not (accept listen map name_connect name_bind
				       node_bind relabelfrom relabelto recvfrom
				       sendto))))
(classmapping sockets common
	      (tipc_socket (not (accept listen map name_bind relabelfrom
					relabelto recvfrom sendto))))
(classmapping sockets common
	      (tun_socket (not (accept attach_queue listen map name_bind
				       relabelfrom relabelto recvfrom sendto))))
(classmapping sockets common
	      (udp_socket (not (accept listen map name_bind node_bind
				       relabelfrom relabelto recvfrom sendto))))
(classmapping sockets common
	      (unix_dgram_socket (not (accept listen map name_bind relabelfrom
					      relabelto recvfrom sendto))))
(classmapping sockets common
	      (unix_stream_socket (not (accept connectto listen map name_bind
					       relabelfrom relabelto recvfrom
					       sendto))))
(classmapping sockets common
	      (vsock_socket (not (accept listen map name_bind relabelfrom
					 relabelto recvfrom sendto))))
(classmapping sockets common
	      (x25_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))
(classmapping sockets common
	      (xdp_socket (not (accept listen map name_bind relabelfrom
				       relabelto recvfrom sendto))))

(classmapping sockets getattr (ax25_socket (getattr)))
(classmapping sockets getattr (alg_socket (getattr)))
(classmapping sockets getattr (appletalk_socket (getattr)))
(classmapping sockets getattr (atmpvc_socket (getattr)))
(classmapping sockets getattr (atmsvc_socket (getattr)))
(classmapping sockets getattr (bluetooth_socket (getattr)))
(classmapping sockets getattr (caif_socket (getattr)))
(classmapping sockets getattr (can_socket (getattr)))
(classmapping sockets getattr (dccp_socket (getattr)))
(classmapping sockets getattr (decnet_socket (getattr)))
(classmapping sockets getattr (icmp_socket (getattr)))
(classmapping sockets getattr (ieee802154_socket (getattr)))
(classmapping sockets getattr (ipx_socket (getattr)))
(classmapping sockets getattr (irda_socket (getattr)))
(classmapping sockets getattr (isdn_socket (getattr)))
(classmapping sockets getattr (iucv_socket (getattr)))
(classmapping sockets getattr (kcm_socket (getattr)))
(classmapping sockets getattr (key_socket (getattr)))
(classmapping sockets getattr (llc_socket (getattr)))
(classmapping sockets getattr (netlink_audit_socket (getattr)))
(classmapping sockets getattr (netlink_connector_socket (getattr)))
(classmapping sockets getattr (netlink_crypto_socket (getattr)))
(classmapping sockets getattr (netlink_dnrt_socket (getattr)))
(classmapping sockets getattr (netlink_fib_lookup_socket (getattr)))
(classmapping sockets getattr (netlink_generic_socket (getattr)))
(classmapping sockets getattr (netlink_iscsi_socket (getattr)))
(classmapping sockets getattr (netlink_kobject_uevent_socket (getattr)))
(classmapping sockets getattr (netlink_netfilter_socket (getattr)))
(classmapping sockets getattr (netlink_nflog_socket (getattr)))
(classmapping sockets getattr (netlink_rdma_socket (getattr)))
(classmapping sockets getattr (netlink_route_socket (getattr)))
(classmapping sockets getattr (netlink_scsitransport_socket (getattr)))
(classmapping sockets getattr (netlink_selinux_socket (getattr)))
(classmapping sockets getattr (netlink_socket (getattr)))
(classmapping sockets getattr (netlink_tcpdiag_socket (getattr)))
(classmapping sockets getattr (netlink_xfrm_socket (getattr)))
(classmapping sockets getattr (netrom_socket (getattr)))
(classmapping sockets getattr (nfc_socket (getattr)))
(classmapping sockets getattr (packet_socket (getattr)))
(classmapping sockets getattr (phonet_socket (getattr)))
(classmapping sockets getattr (pppox_socket (getattr)))
(classmapping sockets getattr (qipcrtr_socket (getattr)))
(classmapping sockets getattr (rawip_socket (getattr)))
(classmapping sockets getattr (rds_socket (getattr)))
(classmapping sockets getattr (rose_socket (getattr)))
(classmapping sockets getattr (rxrpc_socket (getattr)))
(classmapping sockets getattr (sctp_socket (getattr)))
(classmapping sockets getattr (smc_socket (getattr)))
(classmapping sockets getattr (socket (getattr)))
(classmapping sockets getattr (tcp_socket (getattr)))
(classmapping sockets getattr (tipc_socket (getattr)))
(classmapping sockets getattr (tun_socket (getattr)))
(classmapping sockets getattr (udp_socket (getattr)))
(classmapping sockets getattr (unix_dgram_socket (getattr)))
(classmapping sockets getattr (unix_stream_socket (getattr)))
(classmapping sockets getattr (vsock_socket (getattr)))
(classmapping sockets getattr (x25_socket (getattr)))
(classmapping sockets getattr (xdp_socket (getattr)))

(macro association_invalid_sctp_sockets ((type ARG1))
       (allow ARG1 invalid (sctp_socket (association))))

(macro connectto_invalid_unix_stream_sockets ((type ARG1))
       (allow ARG1 invalid (unix_stream_socket (connectto))))

(macro getattr_invalid_sockets ((type ARG1))
       (allow ARG1 invalid (sockets (getattr))))

(macro namebind_invalid_dccp_sockets ((type ARG1))
       (allow ARG1 invalid (dccp_socket (name_bind))))

(macro namebind_invalid_icmp_sockets ((type ARG1))
       (allow ARG1 invalid (icmp_socket (name_bind))))

(macro namebind_invalid_rawip_sockets ((type ARG1))
       (allow ARG1 invalid (rawip_socket (name_bind))))

(macro namebind_invalid_sctp_sockets ((type ARG1))
       (allow ARG1 invalid (sctp_socket (name_bind))))

(macro namebind_invalid_tcp_sockets ((type ARG1))
       (allow ARG1 invalid (tcp_socket (name_bind))))

(macro namebind_invalid_udp_sockets ((type ARG1))
       (allow ARG1 invalid (udp_socket (name_bind))))

(macro nameconnect_invalid_dccp_sockets ((type ARG1))
       (allow ARG1 invalid (dccp_socket (name_connect))))

(macro nameconnect_invalid_sctp_sockets ((type ARG1))
       (allow ARG1 invalid (sctp_socket (name_connect))))

(macro nameconnect_invalid_tcp_sockets ((type ARG1))
       (allow ARG1 invalid (tcp_socket (name_connect))))

(macro nodebind_invalid_dccp_sockets ((type ARG1))
       (allow ARG1 invalid (dccp_socket (node_bind))))

(macro nodebind_invalid_icmp_sockets ((type ARG1))
       (allow ARG1 invalid (icmp_socket (node_bind))))

(macro nodebind_invalid_rawip_sockets ((type ARG1))
       (allow ARG1 invalid (rawip_socket (node_bind))))

(macro nodebind_invalid_sctp_sockets ((type ARG1))
       (allow ARG1 invalid (sctp_socket (node_bind))))

(macro nodebind_invalid_tcp_sockets ((type ARG1))
       (allow ARG1 invalid (tcp_socket (node_bind))))

(macro nodebind_invalid_udp_sockets ((type ARG1))
       (allow ARG1 invalid (udp_socket (node_bind))))

(macro readwrite_invalid_unix_dgram_sockets ((type ARG1))
       (allow ARG1 invalid readwrite_unix_dgram_socket))

(macro readwrite_invalid_unix_stream_sockets ((type ARG1))
       (allow ARG1 invalid readwrite_unix_stream_socket))

(macro sendto_invalid_unix_dgram_sockets ((type ARG1))
       (allow ARG1 invalid (unix_dgram_socket (sendto))))

(macro write_invalid_unix_dgram_sockets ((type ARG1))
       (allow ARG1 invalid write_unix_dgram_socket))

(macro write_invalid_unix_stream_sockets ((type ARG1))
       (allow ARG1 invalid write_unix_stream_socket))

(in ibac

    (constrain (constrainsocketsubject (create relabelto))
	       (or (or (or (eq u1 u2)
			   (and (eq t1 subjchangesys.typeattr) (eq u2 .sys.id)))
		       (eq t1 subjchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in invalid.unconfined

    (allow typeattr .invalid (sockets (common)))
    (allow typeattr .invalid (alg_socket (accept listen)))
    (allow typeattr .invalid (bluetooth_socket (accept listen)))
    (allow typeattr .invalid
	   (dccp_socket (accept listen name_bind name_connect node_bind)))
    (allow typeattr .invalid (icmp_socket (name_bind node_bind)))
    (allow typeattr .invalid (rawip_socket (name_bind node_bind)))
    (allow typeattr .invalid
	   (sctp_socket (association accept listen name_bind name_connect
				     node_bind)))
    (allow typeattr .invalid (udp_socket (name_bind node_bind)))
    (allow typeattr .invalid
	   (tcp_socket (accept listen name_bind name_connect node_bind)))
    (allow typeattr .invalid (tun_socket (attach_queue)))
    (allow typeattr .invalid (unix_dgram_socket (sendto)))
    (allow typeattr .invalid (unix_stream_socket (accept connectto listen))))

(in mcs

    (mlsconstrain (constrainsocketobject (nameconnect nodebind))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr)))

    (mlsconstrain
     (constrainsocketsubject (append association attachqueue create getattr read
				     relabelto setattr write))
     (or (dom h1 h2)
	 (neq t1 constrained.typeattr))))

(in rbac

    (constrain (constrainsocketsubject (create relabelto))
	       (or (or (or (eq r1 r2)
			   (and (eq t1 subjchangesys.typeattr)
				(eq r2 .sys.role)))
		       (eq t1 subjchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in rbacsep

    (constrain (constrainsocketsubject (append getattr read setattr write))
	       (or (or (or (eq r1 r2)
			   (and (eq r1 exempt.roleattr)
				(neq t1 constrained.typeattr)))
		       (eq t1 exempt.subj.typeattr))
		   (and (eq t1 exemptsource.typeattr)
			(eq t2 exempttarget.typeattr)))))

(in subj.all_macro_template

    (macro association_all_sctp_sockets ((type ARG1))
	   (allow ARG1 typeattr (sctp_socket (association))))

    (macro connectto_all_unix_stream_sockets ((type ARG1))
	   (allow ARG1 typeattr (unix_stream_socket (connectto))))

    (macro getattr_all_sockets ((type ARG1))
	   (allow ARG1 typeattr (sockets (getattr))))

    (macro readwrite_all_unix_dgram_sockets ((type ARG1))
	   (allow ARG1 typeattr readwrite_unix_dgram_socket))

    (macro readwrite_all_unix_stream_sockets ((type ARG1))
	   (allow ARG1 typeattr readwrite_unix_stream_socket))

    (macro sendto_all_unix_dgram_sockets ((type ARG1))
	   (allow ARG1 typeattr (unix_dgram_socket (sendto))))

    (macro write_all_unix_dgram_sockets ((type ARG1))
	   (allow ARG1 typeattr write_unix_dgram_socket))

    (macro write_all_unix_stream_sockets ((type ARG1))
	   (allow ARG1 typeattr write_unix_stream_socket)))

(in subj.macro_template

    (macro association_subj_sctp_sockets ((type ARG1))
	   (allow ARG1 subj (sctp_socket (association))))

    (macro connectto_subj_unix_stream_sockets ((type ARG1))
	   (allow ARG1 subj (unix_stream_socket (connectto))))

    (macro getattr_subj_sockets ((type ARG1))
	   (allow ARG1 subj (sockets (getattr))))

    (macro readwrite_subj_unix_dgram_sockets ((type ARG1))
	   (allow ARG1 subj readwrite_unix_dgram_socket))

    (macro readwrite_subj_unix_stream_sockets ((type ARG1))
	   (allow ARG1 subj readwrite_unix_stream_socket))

    (macro sendto_subj_unix_dgram_sockets ((type ARG1))
	   (allow ARG1 subj (unix_dgram_socket (sendto))))

    (macro write_subj_unix_dgram_sockets ((type ARG1))
	   (allow ARG1 subj write_unix_dgram_socket))

    (macro write_subj_unix_stream_sockets ((type ARG1))
	   (allow ARG1 subj write_unix_stream_socket)))

(in subj.unconfined

    (allow typeattr self
	   (netlink_audit_socket (nlmsg_read nlmsg_readpriv nlmsg_relay
					     nlmsg_tty_audit nlmsg_write)))
    (allow typeattr self (netlink_route_socket (nlmsg_read nlmsg_write)))
    (allow typeattr self (netlink_tcpdiag_socket (nlmsg_read nlmsg_write)))
    (allow typeattr self (netlink_xfrm_socket (nlmsg_read nlmsg_write)))
    (allow typeattr self (packet_socket (map)))
    (allow typeattr self (tun_socket (relabelto)))

    (allow typeattr subj.typeattr (alg_socket (accept listen)))
    (allow typeattr subj.typeattr (bluetooth_socket (accept listen)))
    (allow typeattr subj.typeattr (dccp_socket (accept listen)))
    (allow typeattr subj.typeattr (sctp_socket (association accept listen)))
    (allow typeattr subj.typeattr (sockets (common)))
    (allow typeattr subj.typeattr (tcp_socket (accept listen)))
    (allow typeattr subj.typeattr (tun_socket (attach_queue relabelfrom)))
    (allow typeattr subj.typeattr (unix_dgram_socket (sendto)))
    (allow typeattr subj.typeattr
	   (unix_stream_socket (accept connectto listen))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class binder (call impersonate set_context_mgr transfer))
(classorder (unordered binder))

(macro call_invalid_binders ((type ARG1))
       (allow ARG1 .invalid (binder (call))))

(macro transfer_invalid_binders ((type ARG1))
       (allow ARG1 .invalid (binder (transfer))))

(in invalid.unconfined

    (allow typeattr .invalid
	   (binder (not (impersonate set_context_mgr)))))

(in subj

    (macro call_all_binders ((type ARG1))
	   (allow ARG1 typeattr (binder (call))))

    (macro impersonate_all_binders ((type ARG1))
	   (allow ARG1 typeattr (binder (impersonate))))

    (macro transfer_all_binders ((type ARG1))
	   (allow ARG1 typeattr (binder (transfer)))))

(in subj.macro_template

    (macro call_subj_binders ((type ARG1))
	   (allow ARG1 subj (binder (call))))

    (macro impersonate_subj_binders ((type ARG1))
	   (allow ARG1 subj (binder (impersonate))))

    (macro transfer_subj_binders ((type ARG1))
	   (allow ARG1 subj (binder (transfer)))))

(in subj.unconfined

    (allow typeattr .subj.typeattr (binder (all))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class bpf (map_create map_read map_write prog_load prog_run))
(classorder (unordered bpf))

(in invalid.unconfined

    (allow typeattr .invalid (bpf (map_read map_write prog_run))))

(in mcs

    (mlsconstrain (bpf (map_read map_write prog_run))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in rbacsep

    (constrain (bpf (map_read map_write prog_run))
	       (or (or (or (eq r1 r2)
			   (and (eq r1 exempt.roleattr)
				(neq t1 constrained.typeattr)))
		       (eq t1 exempt.subj.typeattr))
		   (and (eq t1 exemptsource.typeattr)
			(eq t2 exempttarget.typeattr)))))

(in subj.unconfined

    (allow typeattr self (bpf (not (map_read map_write prog_run))))
    (allow typeattr subj.typeattr (bpf (map_read map_write prog_run))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class kernel_service (create_files_as use_as_override))
(classorder (unordered kernel_service))

(macro createfilesas_invalid_kernel_services ((type ARG1))
       (allow ARG1 invalid (kernel_service (create_files_as))))

(macro createfilesas_unlabeled_kernel_services ((type ARG1))
       (allow ARG1 unlabeled (kernel_service (create_files_as))))

(macro useasoverride_invalid_kernel_services ((type ARG1))
       (allow ARG1 invalid (kernel_service (use_as_override))))

(in file

    (blockinherit all_macro_template_kernel_services)

    (block all_macro_template_kernel_services

	   (blockabstract all_macro_template_kernel_services)

	   (macro createfileas_all_kernel_services ((type ARG1))
		  (allow ARG1 typeattr (kernel_service (create_files_as)))))

    (block macro_template_kernel_services

	   (blockabstract macro_template_kernel_services)

	   (macro createfileas_file_kernel_services ((type ARG1))
		  (allow ARG1 file (kernel_service (create_files_as))))))

(in file.unconfined

    (allow typeattr file.typeattr (kernel_service (create_files_as))))

(in invalid.unconfined

    (allow typeattr .invalid (kernel_service (all))))

(in subj.unconfined

    (allow typeattr subj.typeattr (kernel_service (use_as_override))))

(in unlabeled.unconfined

    (allow typeattr .unlabeled (kernel_service (create_files_as))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class perf_event (cpu kernel open read tracepoint write))
(classorder (unordered perf_event))

(in invalid.unconfined

    (allow typeattr .invalid (perf_event (read write))))

(in mcs

    (mlsconstrain (perf_event (read write))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in rbacsep

    (constrain (perf_event (read write))
	       (or (or (or (eq r1 r2)
			   (and (eq r1 exempt.roleattr)
				(neq t1 constrained.typeattr)))
		       (eq t1 exempt.subj.typeattr))
		   (and (eq t1 exemptsource.typeattr)
			(eq t2 exempttarget.typeattr)))))

(in subj.unconfined

    (allow typeattr self (perf_event (not (read write))))
    (allow typeattr subj.typeattr (perf_event (read write))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class key (create link read search setattr view write))
(classorder (unordered key))

(in ibac

    (constrain (key (create))
	       (or (or (or (eq u1 u2)
			   (and (eq t1 subjchangesys.typeattr) (eq u2 .sys.id)))
		       (eq t1 subjchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in invalid.unconfined

    (allow typeattr .invalid (key (all))))

(in mcs

    (mlsconstrain (key (create read setattr view write))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in rbac

    (constrain (key (create))
	       (or (or (or (eq r1 r2)
			   (and (eq t1 subjchangesys.typeattr)
				(eq r2 .sys.role)))
		       (eq t1 subjchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in rbacsep

    (constrain (key (read setattr view write))
	       (or (or (or (eq r1 r2)
			   (and (eq r1 exempt.roleattr)
				(neq t1 constrained.typeattr)))
		       (eq t1 exempt.subj.typeattr))
		   (and (eq t1 exemptsource.typeattr)
			(eq t2 exempttarget.typeattr)))))

(in subj.unconfined

    (allow typeattr subj.typeattr (key (all))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(handleunknown allow)
(mls true)

(policycap "always_check_network")
(policycap "cgroup_seclabel")
(policycap "extended_socket_class")
(policycap "genfs_seclabel_symlinks")
(policycap "network_peer_controls")
(policycap "nnp_nosuid_transition")
(policycap "open_perms")
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(defaultrole blk_file source)
(defaultrole chr_file source)
(defaultrole dir source)
(defaultrole fifo_file source)
(defaultrole file source)
(defaultrole lnk_file source)
(defaultrole sock_file source)
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block unconfined

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(category c0)
(category c1)
(category c2)
(category c3)
(category c4)
(category c5)
(category c6)
(category c7)
(category c8)
(category c9)
(category c10)
(category c11)
(category c12)
(category c13)
(category c14)
(category c15)
(category c16)
(category c17)
(category c18)
(category c19)
(category c20)
(category c21)
(category c22)
(category c23)
(category c24)
(category c25)
(category c26)
(category c27)
(category c28)
(category c29)
(category c30)
(category c31)
(category c32)
(category c33)
(category c34)
(category c35)
(category c36)
(category c37)
(category c38)
(category c39)
(category c40)
(category c41)
(category c42)
(category c43)
(category c44)
(category c45)
(category c46)
(category c47)
(category c48)
(category c49)
(category c50)
(category c51)
(category c52)
(category c53)
(category c54)
(category c55)
(category c56)
(category c57)
(category c58)
(category c59)
(category c60)
(category c61)
(category c62)
(category c63)
(category c64)
(category c65)
(category c66)
(category c67)
(category c68)
(category c69)
(category c70)
(category c71)
(category c72)
(category c73)
(category c74)
(category c75)
(category c76)
(category c77)
(category c78)
(category c79)
(category c80)
(category c81)
(category c82)
(category c83)
(category c84)
(category c85)
(category c86)
(category c87)
(category c88)
(category c89)
(category c90)
(category c91)
(category c92)
(category c93)
(category c94)
(category c95)
(category c96)
(category c97)
(category c98)
(category c99)
(category c100)
(category c101)
(category c102)
(category c103)
(category c104)
(category c105)
(category c106)
(category c107)
(category c108)
(category c109)
(category c110)
(category c111)
(category c112)
(category c113)
(category c114)
(category c115)
(category c116)
(category c117)
(category c118)
(category c119)
(category c120)
(category c121)
(category c122)
(category c123)
(category c124)
(category c125)
(category c126)
(category c127)
(category c128)
(category c129)
(category c130)
(category c131)
(category c132)
(category c133)
(category c134)
(category c135)
(category c136)
(category c137)
(category c138)
(category c139)
(category c140)
(category c141)
(category c142)
(category c143)
(category c144)
(category c145)
(category c146)
(category c147)
(category c148)
(category c149)
(category c150)
(category c151)
(category c152)
(category c153)
(category c154)
(category c155)
(category c156)
(category c157)
(category c158)
(category c159)
(category c160)
(category c161)
(category c162)
(category c163)
(category c164)
(category c165)
(category c166)
(category c167)
(category c168)
(category c169)
(category c170)
(category c171)
(category c172)
(category c173)
(category c174)
(category c175)
(category c176)
(category c177)
(category c178)
(category c179)
(category c180)
(category c181)
(category c182)
(category c183)
(category c184)
(category c185)
(category c186)
(category c187)
(category c188)
(category c189)
(category c190)
(category c191)
(category c192)
(category c193)
(category c194)
(category c195)
(category c196)
(category c197)
(category c198)
(category c199)
(category c200)
(category c201)
(category c202)
(category c203)
(category c204)
(category c205)
(category c206)
(category c207)
(category c208)
(category c209)
(category c210)
(category c211)
(category c212)
(category c213)
(category c214)
(category c215)
(category c216)
(category c217)
(category c218)
(category c219)
(category c220)
(category c221)
(category c222)
(category c223)
(category c224)
(category c225)
(category c226)
(category c227)
(category c228)
(category c229)
(category c230)
(category c231)
(category c232)
(category c233)
(category c234)
(category c235)
(category c236)
(category c237)
(category c238)
(category c239)
(category c240)
(category c241)
(category c242)
(category c243)
(category c244)
(category c245)
(category c246)
(category c247)
(category c248)
(category c249)
(category c250)
(category c251)
(category c252)
(category c253)
(category c254)
(category c255)
(category c256)
(category c257)
(category c258)
(category c259)
(category c260)
(category c261)
(category c262)
(category c263)
(category c264)
(category c265)
(category c266)
(category c267)
(category c268)
(category c269)
(category c270)
(category c271)
(category c272)
(category c273)
(category c274)
(category c275)
(category c276)
(category c277)
(category c278)
(category c279)
(category c280)
(category c281)
(category c282)
(category c283)
(category c284)
(category c285)
(category c286)
(category c287)
(category c288)
(category c289)
(category c290)
(category c291)
(category c292)
(category c293)
(category c294)
(category c295)
(category c296)
(category c297)
(category c298)
(category c299)
(category c300)
(category c301)
(category c302)
(category c303)
(category c304)
(category c305)
(category c306)
(category c307)
(category c308)
(category c309)
(category c310)
(category c311)
(category c312)
(category c313)
(category c314)
(category c315)
(category c316)
(category c317)
(category c318)
(category c319)
(category c320)
(category c321)
(category c322)
(category c323)
(category c324)
(category c325)
(category c326)
(category c327)
(category c328)
(category c329)
(category c330)
(category c331)
(category c332)
(category c333)
(category c334)
(category c335)
(category c336)
(category c337)
(category c338)
(category c339)
(category c340)
(category c341)
(category c342)
(category c343)
(category c344)
(category c345)
(category c346)
(category c347)
(category c348)
(category c349)
(category c350)
(category c351)
(category c352)
(category c353)
(category c354)
(category c355)
(category c356)
(category c357)
(category c358)
(category c359)
(category c360)
(category c361)
(category c362)
(category c363)
(category c364)
(category c365)
(category c366)
(category c367)
(category c368)
(category c369)
(category c370)
(category c371)
(category c372)
(category c373)
(category c374)
(category c375)
(category c376)
(category c377)
(category c378)
(category c379)
(category c380)
(category c381)
(category c382)
(category c383)
(category c384)
(category c385)
(category c386)
(category c387)
(category c388)
(category c389)
(category c390)
(category c391)
(category c392)
(category c393)
(category c394)
(category c395)
(category c396)
(category c397)
(category c398)
(category c399)
(category c400)
(category c401)
(category c402)
(category c403)
(category c404)
(category c405)
(category c406)
(category c407)
(category c408)
(category c409)
(category c410)
(category c411)
(category c412)
(category c413)
(category c414)
(category c415)
(category c416)
(category c417)
(category c418)
(category c419)
(category c420)
(category c421)
(category c422)
(category c423)
(category c424)
(category c425)
(category c426)
(category c427)
(category c428)
(category c429)
(category c430)
(category c431)
(category c432)
(category c433)
(category c434)
(category c435)
(category c436)
(category c437)
(category c438)
(category c439)
(category c440)
(category c441)
(category c442)
(category c443)
(category c444)
(category c445)
(category c446)
(category c447)
(category c448)
(category c449)
(category c450)
(category c451)
(category c452)
(category c453)
(category c454)
(category c455)
(category c456)
(category c457)
(category c458)
(category c459)
(category c460)
(category c461)
(category c462)
(category c463)
(category c464)
(category c465)
(category c466)
(category c467)
(category c468)
(category c469)
(category c470)
(category c471)
(category c472)
(category c473)
(category c474)
(category c475)
(category c476)
(category c477)
(category c478)
(category c479)
(category c480)
(category c481)
(category c482)
(category c483)
(category c484)
(category c485)
(category c486)
(category c487)
(category c488)
(category c489)
(category c490)
(category c491)
(category c492)
(category c493)
(category c494)
(category c495)
(category c496)
(category c497)
(category c498)
(category c499)
(category c500)
(category c501)
(category c502)
(category c503)
(category c504)
(category c505)
(category c506)
(category c507)
(category c508)
(category c509)
(category c510)
(category c511)
(category c512)
(category c513)
(category c514)
(category c515)
(category c516)
(category c517)
(category c518)
(category c519)
(category c520)
(category c521)
(category c522)
(category c523)
(category c524)
(category c525)
(category c526)
(category c527)
(category c528)
(category c529)
(category c530)
(category c531)
(category c532)
(category c533)
(category c534)
(category c535)
(category c536)
(category c537)
(category c538)
(category c539)
(category c540)
(category c541)
(category c542)
(category c543)
(category c544)
(category c545)
(category c546)
(category c547)
(category c548)
(category c549)
(category c550)
(category c551)
(category c552)
(category c553)
(category c554)
(category c555)
(category c556)
(category c557)
(category c558)
(category c559)
(category c560)
(category c561)
(category c562)
(category c563)
(category c564)
(category c565)
(category c566)
(category c567)
(category c568)
(category c569)
(category c570)
(category c571)
(category c572)
(category c573)
(category c574)
(category c575)
(category c576)
(category c577)
(category c578)
(category c579)
(category c580)
(category c581)
(category c582)
(category c583)
(category c584)
(category c585)
(category c586)
(category c587)
(category c588)
(category c589)
(category c590)
(category c591)
(category c592)
(category c593)
(category c594)
(category c595)
(category c596)
(category c597)
(category c598)
(category c599)
(category c600)
(category c601)
(category c602)
(category c603)
(category c604)
(category c605)
(category c606)
(category c607)
(category c608)
(category c609)
(category c610)
(category c611)
(category c612)
(category c613)
(category c614)
(category c615)
(category c616)
(category c617)
(category c618)
(category c619)
(category c620)
(category c621)
(category c622)
(category c623)
(category c624)
(category c625)
(category c626)
(category c627)
(category c628)
(category c629)
(category c630)
(category c631)
(category c632)
(category c633)
(category c634)
(category c635)
(category c636)
(category c637)
(category c638)
(category c639)
(category c640)
(category c641)
(category c642)
(category c643)
(category c644)
(category c645)
(category c646)
(category c647)
(category c648)
(category c649)
(category c650)
(category c651)
(category c652)
(category c653)
(category c654)
(category c655)
(category c656)
(category c657)
(category c658)
(category c659)
(category c660)
(category c661)
(category c662)
(category c663)
(category c664)
(category c665)
(category c666)
(category c667)
(category c668)
(category c669)
(category c670)
(category c671)
(category c672)
(category c673)
(category c674)
(category c675)
(category c676)
(category c677)
(category c678)
(category c679)
(category c680)
(category c681)
(category c682)
(category c683)
(category c684)
(category c685)
(category c686)
(category c687)
(category c688)
(category c689)
(category c690)
(category c691)
(category c692)
(category c693)
(category c694)
(category c695)
(category c696)
(category c697)
(category c698)
(category c699)
(category c700)
(category c701)
(category c702)
(category c703)
(category c704)
(category c705)
(category c706)
(category c707)
(category c708)
(category c709)
(category c710)
(category c711)
(category c712)
(category c713)
(category c714)
(category c715)
(category c716)
(category c717)
(category c718)
(category c719)
(category c720)
(category c721)
(category c722)
(category c723)
(category c724)
(category c725)
(category c726)
(category c727)
(category c728)
(category c729)
(category c730)
(category c731)
(category c732)
(category c733)
(category c734)
(category c735)
(category c736)
(category c737)
(category c738)
(category c739)
(category c740)
(category c741)
(category c742)
(category c743)
(category c744)
(category c745)
(category c746)
(category c747)
(category c748)
(category c749)
(category c750)
(category c751)
(category c752)
(category c753)
(category c754)
(category c755)
(category c756)
(category c757)
(category c758)
(category c759)
(category c760)
(category c761)
(category c762)
(category c763)
(category c764)
(category c765)
(category c766)
(category c767)
(category c768)
(category c769)
(category c770)
(category c771)
(category c772)
(category c773)
(category c774)
(category c775)
(category c776)
(category c777)
(category c778)
(category c779)
(category c780)
(category c781)
(category c782)
(category c783)
(category c784)
(category c785)
(category c786)
(category c787)
(category c788)
(category c789)
(category c790)
(category c791)
(category c792)
(category c793)
(category c794)
(category c795)
(category c796)
(category c797)
(category c798)
(category c799)
(category c800)
(category c801)
(category c802)
(category c803)
(category c804)
(category c805)
(category c806)
(category c807)
(category c808)
(category c809)
(category c810)
(category c811)
(category c812)
(category c813)
(category c814)
(category c815)
(category c816)
(category c817)
(category c818)
(category c819)
(category c820)
(category c821)
(category c822)
(category c823)
(category c824)
(category c825)
(category c826)
(category c827)
(category c828)
(category c829)
(category c830)
(category c831)
(category c832)
(category c833)
(category c834)
(category c835)
(category c836)
(category c837)
(category c838)
(category c839)
(category c840)
(category c841)
(category c842)
(category c843)
(category c844)
(category c845)
(category c846)
(category c847)
(category c848)
(category c849)
(category c850)
(category c851)
(category c852)
(category c853)
(category c854)
(category c855)
(category c856)
(category c857)
(category c858)
(category c859)
(category c860)
(category c861)
(category c862)
(category c863)
(category c864)
(category c865)
(category c866)
(category c867)
(category c868)
(category c869)
(category c870)
(category c871)
(category c872)
(category c873)
(category c874)
(category c875)
(category c876)
(category c877)
(category c878)
(category c879)
(category c880)
(category c881)
(category c882)
(category c883)
(category c884)
(category c885)
(category c886)
(category c887)
(category c888)
(category c889)
(category c890)
(category c891)
(category c892)
(category c893)
(category c894)
(category c895)
(category c896)
(category c897)
(category c898)
(category c899)
(category c900)
(category c901)
(category c902)
(category c903)
(category c904)
(category c905)
(category c906)
(category c907)
(category c908)
(category c909)
(category c910)
(category c911)
(category c912)
(category c913)
(category c914)
(category c915)
(category c916)
(category c917)
(category c918)
(category c919)
(category c920)
(category c921)
(category c922)
(category c923)
(category c924)
(category c925)
(category c926)
(category c927)
(category c928)
(category c929)
(category c930)
(category c931)
(category c932)
(category c933)
(category c934)
(category c935)
(category c936)
(category c937)
(category c938)
(category c939)
(category c940)
(category c941)
(category c942)
(category c943)
(category c944)
(category c945)
(category c946)
(category c947)
(category c948)
(category c949)
(category c950)
(category c951)
(category c952)
(category c953)
(category c954)
(category c955)
(category c956)
(category c957)
(category c958)
(category c959)
(category c960)
(category c961)
(category c962)
(category c963)
(category c964)
(category c965)
(category c966)
(category c967)
(category c968)
(category c969)
(category c970)
(category c971)
(category c972)
(category c973)
(category c974)
(category c975)
(category c976)
(category c977)
(category c978)
(category c979)
(category c980)
(category c981)
(category c982)
(category c983)
(category c984)
(category c985)
(category c986)
(category c987)
(category c988)
(category c989)
(category c990)
(category c991)
(category c992)
(category c993)
(category c994)
(category c995)
(category c996)
(category c997)
(category c998)
(category c999)
(category c1000)
(category c1001)
(category c1002)
(category c1003)
(category c1004)
(category c1005)
(category c1006)
(category c1007)
(category c1008)
(category c1009)
(category c1010)
(category c1011)
(category c1012)
(category c1013)
(category c1014)
(category c1015)
(category c1016)
(category c1017)
(category c1018)
(category c1019)
(category c1020)
(category c1021)
(category c1022)
(category c1023)

(categoryorder
 (c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21
     c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 c32 c33 c34 c35 c36 c37 c38 c39 c40
     c41 c42 c43 c44 c45 c46 c47 c48 c49 c50 c51 c52 c53 c54 c55 c56 c57 c58 c59
     c60 c61 c62 c63 c64 c65 c66 c67 c68 c69 c70 c71 c72 c73 c74 c75 c76 c77 c78
     c79 c80 c81 c82 c83 c84 c85 c86 c87 c88 c89 c90 c91 c92 c93 c94 c95 c96 c97
     c98 c99 c100 c101 c102 c103 c104 c105 c106 c107 c108 c109 c110 c111 c112
     c113 c114 c115 c116 c117 c118 c119 c120 c121 c122 c123 c124 c125 c126 c127
     c128 c129 c130 c131 c132 c133 c134 c135 c136 c137 c138 c139 c140 c141 c142
     c143 c144 c145 c146 c147 c148 c149 c150 c151 c152 c153 c154 c155 c156 c157
     c158 c159 c160 c161 c162 c163 c164 c165 c166 c167 c168 c169 c170 c171 c172
     c173 c174 c175 c176 c177 c178 c179 c180 c181 c182 c183 c184 c185 c186 c187
     c188 c189 c190 c191 c192 c193 c194 c195 c196 c197 c198 c199 c200 c201 c202
     c203 c204 c205 c206 c207 c208 c209 c210 c211 c212 c213 c214 c215 c216 c217
     c218 c219 c220 c221 c222 c223 c224 c225 c226 c227 c228 c229 c230 c231 c232
     c233 c234 c235 c236 c237 c238 c239 c240 c241 c242 c243 c244 c245 c246 c247
     c248 c249 c250 c251 c252 c253 c254 c255 c256 c257 c258 c259 c260 c261 c262
     c263 c264 c265 c266 c267 c268 c269 c270 c271 c272 c273 c274 c275 c276 c277
     c278 c279 c280 c281 c282 c283 c284 c285 c286 c287 c288 c289 c290 c291 c292
     c293 c294 c295 c296 c297 c298 c299 c300 c301 c302 c303 c304 c305 c306 c307
     c308 c309 c310 c311 c312 c313 c314 c315 c316 c317 c318 c319 c320 c321 c322
     c323 c324 c325 c326 c327 c328 c329 c330 c331 c332 c333 c334 c335 c336 c337
     c338 c339 c340 c341 c342 c343 c344 c345 c346 c347 c348 c349 c350 c351 c352
     c353 c354 c355 c356 c357 c358 c359 c360 c361 c362 c363 c364 c365 c366 c367
     c368 c369 c370 c371 c372 c373 c374 c375 c376 c377 c378 c379 c380 c381 c382
     c383 c384 c385 c386 c387 c388 c389 c390 c391 c392 c393 c394 c395 c396 c397
     c398 c399 c400 c401 c402 c403 c404 c405 c406 c407 c408 c409 c410 c411 c412
     c413 c414 c415 c416 c417 c418 c419 c420 c421 c422 c423 c424 c425 c426 c427
     c428 c429 c430 c431 c432 c433 c434 c435 c436 c437 c438 c439 c440 c441 c442
     c443 c444 c445 c446 c447 c448 c449 c450 c451 c452 c453 c454 c455 c456 c457
     c458 c459 c460 c461 c462 c463 c464 c465 c466 c467 c468 c469 c470 c471 c472
     c473 c474 c475 c476 c477 c478 c479 c480 c481 c482 c483 c484 c485 c486 c487
     c488 c489 c490 c491 c492 c493 c494 c495 c496 c497 c498 c499 c500 c501 c502
     c503 c504 c505 c506 c507 c508 c509 c510 c511 c512 c513 c514 c515 c516 c517
     c518 c519 c520 c521 c522 c523 c524 c525 c526 c527 c528 c529 c530 c531 c532
     c533 c534 c535 c536 c537 c538 c539 c540 c541 c542 c543 c544 c545 c546 c547
     c548 c549 c550 c551 c552 c553 c554 c555 c556 c557 c558 c559 c560 c561 c562
     c563 c564 c565 c566 c567 c568 c569 c570 c571 c572 c573 c574 c575 c576 c577
     c578 c579 c580 c581 c582 c583 c584 c585 c586 c587 c588 c589 c590 c591 c592
     c593 c594 c595 c596 c597 c598 c599 c600 c601 c602 c603 c604 c605 c606 c607
     c608 c609 c610 c611 c612 c613 c614 c615 c616 c617 c618 c619 c620 c621 c622
     c623 c624 c625 c626 c627 c628 c629 c630 c631 c632 c633 c634 c635 c636 c637
     c638 c639 c640 c641 c642 c643 c644 c645 c646 c647 c648 c649 c650 c651 c652
     c653 c654 c655 c656 c657 c658 c659 c660 c661 c662 c663 c664 c665 c666 c667
     c668 c669 c670 c671 c672 c673 c674 c675 c676 c677 c678 c679 c680 c681 c682
     c683 c684 c685 c686 c687 c688 c689 c690 c691 c692 c693 c694 c695 c696 c697
     c698 c699 c700 c701 c702 c703 c704 c705 c706 c707 c708 c709 c710 c711 c712
     c713 c714 c715 c716 c717 c718 c719 c720 c721 c722 c723 c724 c725 c726 c727
     c728 c729 c730 c731 c732 c733 c734 c735 c736 c737 c738 c739 c740 c741 c742
     c743 c744 c745 c746 c747 c748 c749 c750 c751 c752 c753 c754 c755 c756 c757
     c758 c759 c760 c761 c762 c763 c764 c765 c766 c767 c768 c769 c770 c771 c772
     c773 c774 c775 c776 c777 c778 c779 c780 c781 c782 c783 c784 c785 c786 c787
     c788 c789 c790 c791 c792 c793 c794 c795 c796 c797 c798 c799 c800 c801 c802
     c803 c804 c805 c806 c807 c808 c809 c810 c811 c812 c813 c814 c815 c816 c817
     c818 c819 c820 c821 c822 c823 c824 c825 c826 c827 c828 c829 c830 c831 c832
     c833 c834 c835 c836 c837 c838 c839 c840 c841 c842 c843 c844 c845 c846 c847
     c848 c849 c850 c851 c852 c853 c854 c855 c856 c857 c858 c859 c860 c861 c862
     c863 c864 c865 c866 c867 c868 c869 c870 c871 c872 c873 c874 c875 c876 c877
     c878 c879 c880 c881 c882 c883 c884 c885 c886 c887 c888 c889 c890 c891 c892
     c893 c894 c895 c896 c897 c898 c899 c900 c901 c902 c903 c904 c905 c906 c907
     c908 c909 c910 c911 c912 c913 c914 c915 c916 c917 c918 c919 c920 c921 c922
     c923 c924 c925 c926 c927 c928 c929 c930 c931 c932 c933 c934 c935 c936 c937
     c938 c939 c940 c941 c942 c943 c944 c945 c946 c947 c948 c949 c950 c951 c952
     c953 c954 c955 c956 c957 c958 c959 c960 c961 c962 c963 c964 c965 c966 c967
     c968 c969 c970 c971 c972 c973 c974 c975 c976 c977 c978 c979 c980 c981 c982
     c983 c984 c985 c986 c987 c988 c989 c990 c991 c992 c993 c994 c995 c996 c997
     c998 c999 c1000 c1001 c1002 c1003 c1004 c1005 c1006 c1007 c1008 c1009 c1010
     c1011 c1012 c1013 c1014 c1015 c1016 c1017 c1018 c1019 c1020 c1021 c1022
     c1023))

(sensitivity s0)
(sensitivityorder (s0))

(sensitivitycategory s0 (range c0 c1023))

(level systemlow (s0))
(level systemhigh (s0 (range c0 c1023)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(classpermission addname_dir)
(classpermission append_blk_file)
(classpermission append_chr_file)
(classpermission append_fifo_file)
(classpermission append_file)

(classpermission appendinherited_blk_file)
(classpermission appendinherited_chr_file)
(classpermission appendinherited_fifo_file)
(classpermission appendinherited_file)

(classpermission create_blk_file)
(classpermission create_chr_file)
(classpermission create_dir)
(classpermission create_fifo_file)
(classpermission create_file)
(classpermission create_lnk_file)
(classpermission create_sock_file)

(classpermission delete_blk_file)
(classpermission delete_chr_file)
(classpermission delete_dir)
(classpermission delete_fifo_file)
(classpermission delete_file)
(classpermission delete_lnk_file)
(classpermission delete_sock_file)

(classpermission deletename_dir)

(classpermission execute_file)

(classpermission list_dir)

(classpermission listinherited_dir)

(classpermission manage_blk_file)
(classpermission manage_chr_file)
(classpermission manage_dir)
(classpermission manage_fifo_file)
(classpermission manage_file)
(classpermission manage_lnk_file)
(classpermission manage_sock_file)

(classpermission mapexecute_chr_file)
(classpermission mapexecute_file)

(classpermission mounton_chr_file)
(classpermission mounton_dir)
(classpermission mounton_file)

(classpermission read_blk_file)
(classpermission read_chr_file)
(classpermission read_fifo_file)
(classpermission read_file)
(classpermission read_lnk_file)
(classpermission read_sock_file)

(classpermission readinherited_blk_file)
(classpermission readinherited_chr_file)
(classpermission readinherited_fifo_file)
(classpermission readinherited_file)
(classpermission readinherited_sock_file)

(classpermission readwrite_blk_file)
(classpermission readwrite_chr_file)
(classpermission readwrite_dir)
(classpermission readwrite_fifo_file)
(classpermission readwrite_file)
(classpermission readwrite_lnk_file)
(classpermission readwrite_sock_file)

(classpermission readwriteinherited_blk_file)
(classpermission readwriteinherited_chr_file)
(classpermission readwriteinherited_dir)
(classpermission readwriteinherited_fifo_file)
(classpermission readwriteinherited_file)
(classpermission readwriteinherited_sock_file)

(classpermission relabel_blk_file)
(classpermission relabel_chr_file)
(classpermission relabel_dir)
(classpermission relabel_fifo_file)
(classpermission relabel_file)
(classpermission relabel_lnk_file)
(classpermission relabel_sock_file)

(classpermission relabelfrom_blk_file)
(classpermission relabelfrom_chr_file)
(classpermission relabelfrom_dir)
(classpermission relabelfrom_fifo_file)
(classpermission relabelfrom_file)
(classpermission relabelfrom_lnk_file)
(classpermission relabelfrom_sock_file)

(classpermission relabelto_blk_file)
(classpermission relabelto_chr_file)
(classpermission relabelto_dir)
(classpermission relabelto_fifo_file)
(classpermission relabelto_file)
(classpermission relabelto_lnk_file)
(classpermission relabelto_sock_file)

(classpermission rename_blk_file)
(classpermission rename_chr_file)
(classpermission rename_dir)
(classpermission rename_fifo_file)
(classpermission rename_file)
(classpermission rename_lnk_file)
(classpermission rename_sock_file)

(classpermission search_dir)

(classpermission write_blk_file)
(classpermission write_chr_file)
(classpermission write_dir)
(classpermission write_fifo_file)
(classpermission write_file)
(classpermission write_lnk_file)
(classpermission write_sock_file)

(classpermission writeinherited_blk_file)
(classpermission writeinherited_chr_file)
(classpermission writeinherited_dir)
(classpermission writeinherited_fifo_file)
(classpermission writeinherited_file)
(classpermission writeinherited_sock_file)

(classpermissionset addname_dir
		    (dir (add_name getattr ioctl lock open read search write)))

(classpermissionset append_blk_file (blk_file (append getattr ioctl lock open)))
(classpermissionset append_chr_file (chr_file (append getattr ioctl lock open)))
(classpermissionset append_fifo_file
		    (fifo_file (append getattr ioctl lock open)))
(classpermissionset append_file (file (append getattr ioctl lock open)))

(classpermissionset appendinherited_blk_file
		    (blk_file (append getattr ioctl lock)))
(classpermissionset appendinherited_chr_file
		    (chr_file (append getattr ioctl lock)))
(classpermissionset appendinherited_fifo_file
		    (fifo_file (append getattr ioctl lock)))
(classpermissionset appendinherited_file
		    (file (append getattr ioctl lock)))

(classpermissionset create_blk_file (blk_file (create getattr)))
(classpermissionset create_chr_file (chr_file (create getattr)))
(classpermissionset create_dir (dir (create getattr)))
(classpermissionset create_fifo_file (fifo_file (create getattr)))
(classpermissionset create_file (file (create getattr)))
(classpermissionset create_lnk_file (lnk_file (create getattr)))
(classpermissionset create_sock_file (sock_file (create getattr)))

(classpermissionset delete_blk_file (blk_file (getattr unlink)))
(classpermissionset delete_chr_file (chr_file (getattr unlink)))
(classpermissionset delete_dir (dir (getattr rmdir)))
(classpermissionset delete_fifo_file (fifo_file (getattr unlink)))
(classpermissionset delete_file (file (getattr unlink)))
(classpermissionset delete_lnk_file (lnk_file (getattr unlink)))
(classpermissionset delete_sock_file (sock_file (getattr unlink)))

(classpermissionset deletename_dir
		    (dir (getattr ioctl lock open read remove_name search
				  write)))

(classpermissionset execute_file
		    (file (execute execute_no_trans getattr ioctl map open
				   read)))

(classpermissionset list_dir
		    (dir (getattr ioctl lock open read search)))

(classpermissionset listinherited_dir
		    (dir (getattr ioctl lock read search)))

(classpermissionset manage_blk_file
		    (blk_file (append create getattr ioctl link lock open read
				      rename setattr unlink write)))
(classpermissionset manage_chr_file
		    (chr_file (append create getattr ioctl link lock open read
				      rename setattr unlink write)))
(classpermissionset manage_dir
		    (dir (add_name create getattr ioctl link lock open read
				   setattr remove_name rename reparent rmdir
				   search write)))
(classpermissionset manage_fifo_file
		    (fifo_file (append create getattr ioctl link lock open read
				       rename setattr unlink write)))
(classpermissionset manage_file
		    (file (append create getattr ioctl link lock open read rename
				  setattr unlink write)))
(classpermissionset manage_lnk_file
		    (lnk_file (append create getattr link lock read rename
				      setattr unlink write)))
(classpermissionset manage_sock_file
		    (sock_file (append create getattr ioctl link lock open read
				       rename setattr unlink write)))

(classpermissionset mapexecute_chr_file (chr_file (execute map)))
(classpermissionset mapexecute_file (file (execute map)))

(classpermissionset mounton_chr_file (chr_file (getattr mounton)))
(classpermissionset mounton_dir (dir (getattr mounton)))
(classpermissionset mounton_file (file (getattr mounton)))

(classpermissionset read_blk_file (blk_file (getattr ioctl lock open read)))
(classpermissionset read_chr_file (chr_file (getattr ioctl lock open read)))
(classpermissionset read_fifo_file (fifo_file (getattr ioctl lock open read)))
(classpermissionset read_file (file (getattr ioctl lock open read)))
(classpermissionset read_lnk_file (lnk_file (getattr lock read)))
(classpermissionset read_sock_file (sock_file (getattr ioctl lock open read)))

(classpermissionset readinherited_blk_file (blk_file (getattr ioctl lock read)))
(classpermissionset readinherited_chr_file (chr_file (getattr ioctl lock read)))
(classpermissionset readinherited_fifo_file
		    (fifo_file (getattr ioctl lock read)))
(classpermissionset readinherited_file (file (getattr ioctl lock read)))
(classpermissionset readinherited_sock_file
		    (sock_file (getattr ioctl lock read)))

(classpermissionset readwrite_blk_file
		    (blk_file (append getattr ioctl lock open read write)))
(classpermissionset readwrite_chr_file
		    (chr_file (append getattr ioctl lock open read write)))
(classpermissionset readwrite_dir
		    (dir (add_name getattr ioctl lock open read remove_name
				   search write)))
(classpermissionset readwrite_fifo_file
		    (fifo_file (append getattr ioctl lock open read write)))
(classpermissionset readwrite_file
		    (file (append getattr ioctl lock open read write)))
(classpermissionset readwrite_lnk_file
		    (lnk_file (append getattr lock read write)))
(classpermissionset readwrite_sock_file
		    (sock_file (append getattr ioctl lock open read write)))

(classpermissionset readwriteinherited_blk_file
		    (blk_file (append getattr ioctl lock read write)))
(classpermissionset readwriteinherited_chr_file
		    (chr_file (append getattr ioctl lock read write)))
(classpermissionset readwriteinherited_dir
		    (dir (add_name getattr ioctl lock read remove_name search
				   write)))
(classpermissionset readwriteinherited_fifo_file
		    (fifo_file (append getattr ioctl lock read write)))
(classpermissionset readwriteinherited_file
		    (file (append getattr ioctl lock read write)))
(classpermissionset readwriteinherited_sock_file
		    (sock_file (append getattr ioctl lock read write)))

(classpermissionset relabel_blk_file (blk_file (getattr relabelfrom relabelto)))
(classpermissionset relabel_chr_file (chr_file (getattr relabelfrom relabelto)))
(classpermissionset relabel_dir (dir (getattr relabelfrom relabelto)))
(classpermissionset relabel_fifo_file
		    (fifo_file (getattr relabelfrom relabelto)))
(classpermissionset relabel_file (file (getattr relabelfrom relabelto)))
(classpermissionset relabel_lnk_file (lnk_file (getattr relabelfrom relabelto)))
(classpermissionset relabel_sock_file
		    (sock_file (getattr relabelfrom relabelto)))

(classpermissionset relabelfrom_blk_file (blk_file (getattr relabelfrom)))
(classpermissionset relabelfrom_chr_file (chr_file (getattr relabelfrom)))
(classpermissionset relabelfrom_dir (dir (getattr relabelfrom)))
(classpermissionset relabelfrom_fifo_file (fifo_file (getattr relabelfrom)))
(classpermissionset relabelfrom_file (file (getattr relabelfrom)))
(classpermissionset relabelfrom_lnk_file (lnk_file (getattr relabelfrom)))
(classpermissionset relabelfrom_sock_file (sock_file (getattr relabelfrom)))

(classpermissionset relabelto_blk_file (blk_file (getattr relabelto)))
(classpermissionset relabelto_chr_file (chr_file (getattr relabelto)))
(classpermissionset relabelto_dir (dir (getattr relabelto)))
(classpermissionset relabelto_fifo_file (fifo_file (getattr relabelto)))
(classpermissionset relabelto_file (file (getattr relabelto)))
(classpermissionset relabelto_lnk_file (lnk_file (getattr relabelto)))
(classpermissionset relabelto_sock_file (sock_file (getattr relabelto)))

(classpermissionset rename_blk_file (blk_file (getattr rename)))
(classpermissionset rename_chr_file (chr_file (getattr rename)))
(classpermissionset rename_dir (dir (getattr rename)))
(classpermissionset rename_fifo_file (fifo_file (getattr rename)))
(classpermissionset rename_file (file (getattr rename)))
(classpermissionset rename_lnk_file (lnk_file (getattr rename)))
(classpermissionset rename_sock_file (sock_file (getattr rename)))

(classpermissionset search_dir (dir (getattr search)))

(classpermissionset write_blk_file
		    (blk_file (append getattr ioctl lock open write)))
(classpermissionset write_chr_file
		    (chr_file (append getattr ioctl lock open write)))
(classpermissionset write_dir
		    (dir (add_name getattr ioctl lock open remove_name search
				   write)))
(classpermissionset write_fifo_file
		    (fifo_file (append getattr ioctl lock open write)))
(classpermissionset write_file
		    (file (append getattr ioctl lock open write)))
(classpermissionset write_lnk_file (lnk_file (append getattr lock write)))
(classpermissionset write_sock_file
		    (sock_file (append getattr ioctl lock open write)))

(classpermissionset writeinherited_blk_file
		    (blk_file (append getattr ioctl lock write)))
(classpermissionset writeinherited_chr_file
		    (chr_file (append getattr ioctl lock write)))
(classpermissionset writeinherited_dir
		    (dir (add_name getattr ioctl lock remove_name search
				   write)))
(classpermissionset writeinherited_fifo_file
		    (fifo_file (append getattr ioctl lock write)))
(classpermissionset writeinherited_file (file (append getattr ioctl lock write)))
(classpermissionset writeinherited_sock_file
		    (sock_file (append getattr ioctl lock write)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sid devnull)
(sid file)
(sid kernel)
(sid netif)
(sid netmsg)
(sid node)
(sid port)
(sid security)
(sid unlabeled)

(sid any_socket)
(sid file_labels)
(sid fs)
(sid icmp_socket)
(sid igmp_packet)
(sid init)
(sid kmod)
(sid policy)
(sid scmp_packet)
(sid sysctl)
(sid sysctl_dev)
(sid sysctl_fs)
(sid sysctl_kernel)
(sid sysctl_modprobe)
(sid sysctl_net)
(sid sysctl_net_unix)
(sid sysctl_vm)
(sid tcp_socket)

(sidorder
 (kernel security unlabeled fs file file_labels init any_socket port netif netmsg
	 node igmp_packet icmp_socket tcp_socket sysctl_modprobe sysctl sysctl_fs
	 sysctl_kernel sysctl_net sysctl_net_unix sysctl_vm sysctl_dev kmod
	 policy scmp_packet devnull))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(selinuxuserdefault sys.id (systemlow systemlow))
(userprefix sys.id sys.role)
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block obj

       (macro role ((role ARG1))
	      (roleattributeset roleattr ARG1))

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (roleattribute roleattr)

       (typeattribute typeattr)

       (roletype roleattr typeattr))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class blk_file ())
(classorder (unordered blk_file))

(class chr_file ())
(classorder (unordered chr_file))

(class dir (add_name remove_name reparent rmdir search))
(classorder (unordered dir))

(class fifo_file ())
(classorder (unordered fifo_file))

(class file (entrypoint execute_no_trans))
(classorder (unordered file))

(class lnk_file ())
(classorder (unordered lnk_file))

(class process
       (dyntransition execheap execmem execstack fork getattr getcap getpgid
		      getrlimit getsched getsession noatsecure ptrace rlimitinh
		      setexec setcap setcurrent setfscreate setkeycreate setpgid
		      setrlimit setsched setsockcreate share sigchld siginh
		      sigkill signal signull sigstop transition))
(classorder (unordered process))

(class process2 (nnp_transition nosuid_transition))
(classorder (unordered process2))

(class sock_file ())
(classorder (unordered sock_file))

(classcommon blk_file common_file)
(classcommon chr_file common_file)
(classcommon dir common_file)
(classcommon fifo_file common_file)
(classcommon file common_file)
(classcommon lnk_file common_file)
(classcommon sock_file common_file)

(common common_file
	(append audit_access create execmod execute getattr ioctl lock link map
		mounton open quotaon read relabelfrom relabelto rename setattr
		unlink watch watch_mount watch_reads watch_sb watch_with_perm
		write))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mod

       (blockinherit .file.macro_template_dirs)
       (blockinherit .file.macro_template_lnk_files)
       (blockinherit .file.mod.template))

(in file

    (block mod

	   (macro load_all_files ((type ARG1))
		  (allow ARG1 typeattr (system (module_load))))

	   (macro map_all_files ((type ARG1))
		  (allow ARG1 typeattr (file (map))))

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_files)

	   (typeattribute typeattr)

	   (call data.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.mod.type (file)))

	   (block template

		  (blockabstract template)

		  (macro load_file_files ((type ARG1))
			 (allow ARG1 file (system (module_load))))

		  (macro map_file_files ((type ARG1))
			 (allow ARG1 file (file (map))))

		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.mod.base_template))))

(in sys

    (call .file.mod.load_all_files (unconfined.typeattr)))

(in sys.moduleload

    (neverallow not_typeattr .file.mod.typeattr (system (module_load)))
	)
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block lib

       (blockinherit .file.lib.template)
       (blockinherit .file.macro_template_dirs)
       (blockinherit .file.macro_template_lnk_files))

(block textrel

       (macro execmod_file_files ((type ARG1))
	      (allow ARG1 file (file (execmod))))

       (blockinherit .file.lib.template))

(in file

    (block lib

	   (macro map_all_files ((type ARG1))
		  (allow ARG1 typeattr (file (map))))

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_files)

	   (typeattribute typeattr)

	   (call data.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.data.type (file)))

	   (block template

		  (blockabstract template)

		  (macro map_file_files ((type ARG1))
			 (allow ARG1 file (file (map))))

		  (blockinherit .file.lib.base_template)
		  (blockinherit .file.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block src

       (blockinherit .file.data.template)

       (call .xattr.associate_fs (file)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block exec

       (blockinherit .file.exec.template)
       (blockinherit .file.macro_template_dirs)
       (blockinherit .file.macro_template_lnk_files))

(in file

    (block exec

	   (macro entrypoint_all_files ((type ARG1))
		  (allow ARG1 typeattr (file (entrypoint))))

	   (macro getattr_all_files ((type ARG1))
		  (allow ARG1 typeattr (file (getattr))))

	   (macro map_all_files ((type ARG1))
		  (allow ARG1 typeattr (file (map))))

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_files)

	   (typeattribute typeattr)

	   (call data.type (typeattr))

	   (call .subj.entry.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.exec.type (file)))

	   (block template

		  (blockabstract template)

		  (macro entrypoint_file_files ((type ARG1))
			 (allow ARG1 file (file (entrypoint))))

		  (macro getattr_file_files ((type ARG1))
			 (allow ARG1 file (file (getattr))))

		  (macro map_file_files ((type ARG1))
			 (allow ARG1 file (file (map))))

		  (macro subj_type_transition ((type ARG1)(type ARG2))
			 (typetransition ARG1 file process "*" ARG2))

		  (blockinherit .file.exec.base_template)
		  (blockinherit .file.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block lostfound

       (blockinherit .file.base_template)
       (blockinherit .file.macro_template_dirs)
       (blockinherit .file.macro_template_files)

       (call .xattr.associate_fs (file)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block unknown

       (filecon "/.*" any file_context)

       (macro root_file_type_transition_file ((type ARG1)(class ARG2)(name ARG3))
	      (call .root.file_type_transition
		    (ARG1 file ARG2 ARG3)))

       (blockinherit .file.base_template)
       (blockinherit .file.macro_template_blk_files)
       (blockinherit .file.macro_template_chr_files)
       (blockinherit .file.macro_template_dirs)
       (blockinherit .file.macro_template_fifo_files)
       (blockinherit .file.macro_template_files)
       (blockinherit .file.macro_template_lnk_files)
       (blockinherit .file.macro_template_sock_files)

       (call .xattr.associate_fs (file)))

(in file.unconfined

    (call .unknown.root_file_type_transition_file (typeattr blk_file "*"))
    (call .unknown.root_file_type_transition_file (typeattr chr_file "*"))
    (call .unknown.root_file_type_transition_file (typeattr dir "*"))
    (call .unknown.root_file_type_transition_file (typeattr fifo_file "*"))
    (call .unknown.root_file_type_transition_file (typeattr file "*"))
    (call .unknown.root_file_type_transition_file (typeattr sock_file "*")))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block media

       (blockinherit .file.base_template)
       (blockinherit .file.macro_template_dirs)
       (blockinherit .file.macro_template_lnk_files)

       (call .xattr.associate_fs (file)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block root

       (filecon "/" dir file_context)
       (filecon "/[^/]+" symlink file_context)

       (blockinherit .file.base_template)
       (blockinherit .file.macro_template_dirs)
       (blockinherit .file.macro_template_lnk_files)

       (call .xattr.associate_fs (file)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cert

       (blockinherit .file.cert.template))

(in file

    (block cert

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .xattr.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.cert.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.cert.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block home

       (blockinherit .file.home.template)
       (blockinherit .file.macro_template_all_files)
       (blockinherit .file.macro_template_blk_files)
       (blockinherit .file.macro_template_chr_files))

(in file

    (block home

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .xattr.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.home.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.home.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in file

    (call auth.relabelto.type (unconfined.typeattr))
    (call auth.write.type (unconfined.typeattr))

    (block auth

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call exception.type (typeattr))

	   (call .xattr.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.auth.type (file)))

	   (block relabelto

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute not_typeattr)
		  (typeattribute typeattr)

		  (typeattributeset not_typeattr (not typeattr))

		  (neverallow not_typeattr typeattr
			      (file (relabelto))))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.auth.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files))

	   (block write

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute not_typeattr)
		  (typeattribute typeattr)

		  (typeattributeset not_typeattr (not typeattr))

		  (neverallow not_typeattr typeattr (file (append write)))
		)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in dev

    (blockinherit .file.dev.template)
    (blockinherit .file.macro_template_all_files)
    (blockinherit .file.macro_template_blk_files)
    (blockinherit .file.macro_template_chr_files))

(in file

    (block dev

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_all_files)
	   (blockinherit file.all_macro_template_blk_files)
	   (blockinherit file.all_macro_template_chr_files)
	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .devtmp.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.dev.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.dev.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in sys

    (block mqueuefs

	   (blockinherit .file.mqueuefs.template)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in sys

    (block tmpfs

	   (blockinherit .file.tmpfs.template)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block var

       (blockinherit .file.var.template))

(in file

    (block var

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .xattr.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.var.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files)
		  (blockinherit .file.var.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in file

    (call sec.relabelto.type (unconfined.typeattr))
    (call sec.write.type (unconfined.typeattr))

    (block sec

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call exception.type (typeattr))

	   (call .xattr.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.sec.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files)
		  (blockinherit .file.sec.base_template))

	   (block relabelto

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute not_typeattr)
		  (typeattribute typeattr)

		  (typeattributeset not_typeattr (not typeattr))

		  (neverallow not_typeattr typeattr (file (relabelto))))

	   (block write

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute not_typeattr)
		  (typeattribute typeattr)

		  (typeattributeset not_typeattr (not typeattr))

		  (neverallow not_typeattr typeattr (file (append write)))
		)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mail

       (blockinherit .file.mail.template))

(in file

    (block mail

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)

	   (typeattribute typeattr)

	   (call .file.spool.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.spool.base_template)

		  (call .file.mail.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.mail.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cache

       (blockinherit .file.cache.template))

(in file

    (block cache

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)

	   (typeattribute typeattr)

	   (call var.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.var.base_template)

		  (call .file.cache.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.cache.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block spool

       (blockinherit .file.spool.template))

(in file

    (block spool

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)

	   (typeattribute typeattr)

	   (call var.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.var.base_template)

		  (call .file.spool.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.spool.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block db

       (blockinherit .file.db.template))

(in file

    (block db

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)

	   (typeattribute typeattr)

	   (call var.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.var.base_template)

		  (call .file.db.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.db.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block state

       (blockinherit .file.state.template))

(in file

    (block state

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call var.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.var.base_template)

		  (call .file.state.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files)
		  (blockinherit .file.state.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block log

       (blockinherit .file.log.template))

(in file

    (block log

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)

	   (typeattribute typeattr)

	   (call var.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.var.base_template)

		  (call .file.log.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.log.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block run

       (blockinherit .file.run.template))

(in file

    (block run

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_all_files)
	   (blockinherit file.all_macro_template_blk_files)
	   (blockinherit file.all_macro_template_chr_files)
	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .tmp.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.run.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files)
		  (blockinherit .file.run.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in sys

    (block hugetlbfs

	   (blockinherit .file.hugetlbfs.template)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in file

    (block tmpfs

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .tmp.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.tmpfs.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files)
		  (blockinherit .file.tmpfs.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in sys

    (block home

	   (blockinherit .file.home.template)
	   (blockinherit .file.macro_template_all_files)
	   (blockinherit .file.macro_template_blk_files)
	   (blockinherit .file.macro_template_chr_files)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in file

    (block mqueuefs

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .mqueue.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.mqueuefs.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.mqueuefs.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in tmp

    (blockinherit .file.tmp.template))

(in file

    (block tmp

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_all_files)
	   (blockinherit file.all_macro_template_blk_files)
	   (blockinherit file.all_macro_template_chr_files)
	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .tmp.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.tmp.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files)
		  (blockinherit .file.tmp.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in file

    (block bootflag

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .xattr.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.bootflag.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.bootflag.base_template)
		  (blockinherit .file.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block conf

       (blockinherit .file.conf.template))

(in file

    (block conf

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .xattr.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.conf.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.conf.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block data

       (blockinherit .file.data.template))

(in file

    (block data

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .xattr.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.data.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.data.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block boot

       (blockinherit .file.boot.template))

(in file

    (block boot

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .xattr.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.boot.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.boot.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block runlock

       (blockinherit .file.runlock.template))

(in file

    (block runlock

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)

	   (typeattribute typeattr)

	   (call run.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.run.base_template)

		  (call .file.runlock.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.runlock.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block runuser

       (blockinherit .file.macro_template_dirs)
       (blockinherit .file.macro_template_lnk_files)
       (blockinherit .file.runuser.base_template))

(in file

    (block runuser

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_all_files)
	   (blockinherit file.all_macro_template_blk_files)
	   (blockinherit file.all_macro_template_chr_files)
	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_fifo_files)
	   (blockinherit file.all_macro_template_files)
	   (blockinherit file.all_macro_template_lnk_files)
	   (blockinherit file.all_macro_template_sock_files)

	   (typeattribute typeattr)

	   (call run.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.run.base_template)

		  (call .file.runuser.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_fifo_files)
		  (blockinherit .file.macro_template_files)
		  (blockinherit .file.macro_template_lnk_files)
		  (blockinherit .file.macro_template_sock_files)
		  (blockinherit .file.runuser.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in sys

    (block tmp

	   (blockinherit .file.tmp.template)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in file

    (block hugetlbfs

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit file.all_macro_template_dirs)
	   (blockinherit file.all_macro_template_files)

	   (typeattribute typeattr)

	   (call file.type (typeattr))

	   (call .hugetlb.associate_fs (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .file.base_template)

		  (call .file.hugetlbfs.type (file)))

	   (block template

		  (blockabstract template)

		  (blockinherit .file.hugetlbfs.base_template)
		  (blockinherit .file.macro_template_dirs)
		  (blockinherit .file.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(classmap state (ps read))
(classmapping state read read_file)
(classmapping state read read_lnk_file)
(classmapping state read list_dir)
(classmapping state ps (process (getattr)))
(classmapping state ps (state (read)))

(block subj

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (blockinherit all_macro_template)

       (typeattribute not_typeattr)
       (typeattribute typeattr)

       (typeattributeset not_typeattr (not typeattr))

       (neverallow typeattr not_typeattr (process (dyntransition transition)))
       (neverallow typeattr not_typeattr
		   (process2 (nnp_transition nosuid_transition)))

       (dontaudit typeattr typeattr (process (noatsecure rlimitinh siginh)))

       (block all_macro_template

	      (blockabstract all_macro_template)

	      (macro getrlimit_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (getrlimit))))

	      (macro getsched_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (getsched))))

	      (macro nnptransition_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process2 (nnp_transition))))

	      (macro noatsecure_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (noatsecure))))

	      (macro nosuidtransition_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process2 (nosuid_transition))))

	      (macro ps_all_states ((type ARG1))
		     (allow ARG1 typeattr (state (ps))))

	      (macro ptrace_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (ptrace))))

	      (macro read_all_states ((type ARG1))
		     (allow ARG1 typeattr (state (read))))

	      (macro readinherited_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr readinherited_fifo_file))

	      (macro readwriteinherited_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr readwriteinherited_fifo_file))

	      (macro rlimitinh_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (rlimitinh))))

	      (macro setrlimit_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (setrlimit))))

	      (macro setsched_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (setsched))))

	      (macro sigchld_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (sigchld))))

	      (macro sigkill_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (sigkill))))

	      (macro signal_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (signal))))

	      (macro signull_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (signull))))

	      (macro sigstop_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (sigstop))))

	      (macro transition_all_processes ((type ARG1))
		     (allow ARG1 typeattr (process (transition))))

	      (macro writeinherited_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr writeinherited_fifo_file)))

       (block base_template

	      (blockabstract base_template)

	      (type subj)
	      (call .subj.type (subj)))

       (block entry

	      (macro entrypoint_all_files ((type ARG1))
		     (allow ARG1 typeattr (file (entrypoint))))

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (blockinherit .file.all_macro_template_files)

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow typeattr not_typeattr (file (entrypoint))))

       (block execheap

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr self (process (execheap))))

       (block execstack

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr self (process (execstack))))

       (block macro_template

	      (blockabstract macro_template)

	      (macro getrlimit_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (getrlimit))))

	      (macro getsched_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (getsched))))

	      (macro nnptransition_subj_processes ((type ARG1))
		     (allow ARG1 subj (process2 (nnp_transition))))

	      (macro noatsecure_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (noatsecure))))

	      (macro nosuidtransition_subj_processes ((type ARG1))
		     (allow ARG1 subj (process2 (nosuid_transition))))

	      (macro ps_subj_states ((type ARG1))
		     (allow ARG1 subj (state (ps))))

	      (macro ptrace_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (ptrace))))

	      (macro read_subj_states ((type ARG1))
		     (allow ARG1 subj (state (read))))

	      (macro readinherited_subj_fifo_files ((type ARG1))
		     (allow ARG1 subj readinherited_fifo_file))

	      (macro readwriteinherited_subj_fifo_files ((type ARG1))
		     (allow ARG1 subj readwriteinherited_fifo_file))

	      (macro rlimitinh_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (rlimitinh))))

	      (macro setrlimit_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (setrlimit))))

	      (macro setsched_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (setsched))))

	      (macro sigchld_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (sigchld))))

	      (macro sigkill_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (sigkill))))

	      (macro signal_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (signal))))

	      (macro signull_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (signull))))

	      (macro sigstop_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (sigstop))))

	      (macro transition_subj_processes ((type ARG1))
		     (allow ARG1 subj (process (transition))))

	      (macro writeinherited_subj_fifo_files ((type ARG1))
		     (allow ARG1 subj writeinherited_fifo_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .subj.base_template)
	      (blockinherit .subj.macro_template))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr subj.entry.typeattr (file (entrypoint)))

	      (allow typeattr subj.typeattr (process (all)))
	      ;; nosuid_transition should not be needed and indicates
	      ;; misconfiguration. when used properly it is worth blocking this
	      ;; access to prevent domain transitions on untrusted removeable
	      ;; storage. just be sure to alway's mount untrusted remote storage
	      ;; with nosuid, because otherwise this does not work.
	      (allow typeattr subj.typeattr (process2 (not nosuid_transition)))

	      (allow typeattr subj.typeattr
		     (fifo_file (not (execmod map mounton))))
	      (allow typeattr subj.typeattr list_dir)
	      (allow typeattr subj.typeattr read_lnk_file)
	      (allow typeattr subj.typeattr readwrite_file)

	      (call execheap.type (typeattr))
	      (call execstack.type (typeattr))))

(in unconfined

    (call .subj.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sidcontext netif (sys.id sys.role net.netif (systemlow systemlow)))

(class netif (egress ingress))
(classorder (unordered netif))

(macro egress_invalid_netifs ((type ARG1))
       (allow ARG1 invalid (netif (egress))))

(macro egressingress_invalid_netifs ((type ARG1))
       (allow ARG1 invalid (netif (egress ingress))))

(macro ingress_invalid_netifs ((type ARG1))
       (allow ARG1 invalid (netif (ingress))))

(tunableif (or invalid_associations invalid_peers)
	   (true

	    (call net.netif.egressingress_all_netifs (invalid))))

(in invalid.unconfined

    (allow typeattr .invalid (netif (all))))

(in mcs

    (mlsconstrain (netif (egress))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in net

    (blockinherit netif.template)

    (block netif

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit all_macro_template)

	   (call .obj.type (typeattr))

	   (block all_macro_template

		  (blockabstract all_macro_template)

		  (macro egress_all_netifs ((type ARG1))
			 (allow ARG1 typeattr (netif (egress))))

		  (macro egressingress_all_netifs ((type ARG1))
			 (allow ARG1 typeattr (netif (egress ingress))))

		  (macro ingress_all_netifs ((type ARG1))
			 (allow ARG1 typeattr (netif (ingress)))))

	   (block base_template

		  (blockabstract base_template)

		  (context netif_context
			   (.sys.id .sys.role netif (systemlow systemlow)))

		  (type netif)
		  (call .net.netif.type (netif)))

	   (block macro_template

		  (blockabstract macro_template)

		  (macro egress_netifs ((type ARG1))
			 (allow ARG1 netif (netif (egress))))

		  (macro egressingress_netifs ((type ARG1))
			 (allow ARG1 netif (netif (egress ingress))))

		  (macro ingress_netifs ((type ARG1))
			 (allow ARG1 netif (netif (ingress)))))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.netif.base_template)
		  (blockinherit .net.netif.macro_template))

	   (block unconfined

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute typeattr)

		  (allow typeattr netif.typeattr (netif (all))))))

(in net.unconfined

    (call .net.netif.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class association (polmatch recvfrom sendto setcontext))
(classorder (unordered association))

(macro polmatch_invalid_associations ((type ARG1))
       (allow ARG1 invalid (association (polmatch))))

(macro polmatchsetcontext_invalid_associations ((type ARG1))
       (allow ARG1 invalid (association (polmatch setcontext))))

(macro recvfrom_invalid_associations ((type ARG1))
       (allow ARG1 invalid (association (recvfrom))))

(macro recvfromsendto_invalid_associations ((type ARG1))
       (allow ARG1 invalid (association (recvfrom sendto))))

(macro sendto_invalid_associations ((type ARG1))
       (allow ARG1 invalid (association (sendto))))

(macro setcontext_invalid_associations ((type ARG1))
       (allow ARG1 invalid (association (setcontext))))

(tunableif invalid_associations
	   (true

	    (call association_invalid_sctp_sockets
		  (invalidassociations.except.typeattr))
	    (call recvfromsendto_invalid_associations
		  (invalidassociations.except.typeattr))))

(in invalid.unconfined

    (allow typeattr .invalid (association (not (setcontext)))))

(in mcs

    (mlsconstrain (association (sendto))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in net

    (blockinherit spd.template)

    (block spd

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit all_macro_template)

	   (call .obj.type (typeattr))

	   (block all_macro_template

		  (blockabstract all_macro_template)

		  (macro polmatch_all_associations ((type ARG1))
			 (allow ARG1 typeattr (association (polmatch))))

		  (macro polmatchsetcontext_all_associations ((type ARG1))
			 (allow ARG1 typeattr
				(association (polmatch setcontext))))

		  (macro setcontext_all_associations ((type ARG1))
			 (allow ARG1 typeattr (association (setcontext)))))

	   (block base_template

		  (blockabstract base_template)

		  (context spd_context
			   (.sys.id .sys.role spd (systemlow systemlow)))

		  (type spd)
		  (call .net.spd.type (spd)))

	   (block macro_template

		  (blockabstract macro_template)

		  (macro polmatch_spd_associations ((type ARG1))
			 (allow ARG1 spd (association (polmatch))))

		  (macro polmatchsetcontext_spd_associations ((type ARG1))
			 (allow ARG1 spd (association (polmatch setcontext))))

		  (macro setcontext_spd_associations ((type ARG1))
			 (allow ARG1 spd (association (setcontext)))))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.spd.base_template)
		  (blockinherit .net.spd.macro_template))

	   (block unconfined

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute typeattr)

		  (allow typeattr spd.typeattr
			 (association (polmatch setcontext))))))

(in net.unconfined

    (call .net.spd.unconfined.type (typeattr)))

(in subj

    (macro recvfrom_all_associations ((type ARG1))
	   (allow ARG1 typeattr (association (recvfrom))))

    (macro recvfromsendto_all_associations ((type ARG1))
	   (allow ARG1 typeattr (association (recvfrom sendto))))

    (macro sendto_all_associations ((type ARG1))
	   (allow ARG1 typeattr (association (sendto)))))

(in subj.macro_template

    (macro recvfrom_subj_associations ((type ARG1))
	   (allow ARG1 subj (association (recvfrom))))

    (macro recvfromsendto_subj_associations ((type ARG1))
	   (allow ARG1 subj (association (recvfrom sendto))))

    (macro sendto_subj_associations ((type ARG1))
	   (allow ARG1 subj (association (sendto)))))

(in subj.unconfined

    (allow typeattr .subj.typeattr (association (recvfrom sendto))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sidcontext node (sys.id sys.role net.netnode (systemlow systemlow)))

(class node (recvfrom sendto))
(classorder (unordered node))

(macro recvfrom_invalid_nodes ((type ARG1))
       (allow ARG1 invalid (node (recvfrom))))

(macro recvfromsendto_invalid_nodes ((type ARG1))
       (allow ARG1 invalid (node (recvfrom sendto))))

(macro sendto_invalid_nodes ((type ARG1))
       (allow ARG1 invalid (node (sendto))))

(tunableif (or invalid_associations invalid_peers)
	   (true

	    (call net.netnode.recvfromsendto_all_nodes (invalid))))

(in invalid.unconfined

    (allow typeattr .invalid (node (all))))

(in mcs

    (mlsconstrain (node (sendto))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in net

    (blockinherit netnode.template)

    (block netnode

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit all_macro_template)

	   (call .obj.type (typeattr))

	   (block all_macro_template

		  (blockabstract all_macro_template)

		  (macro nodebind_all_dccp_sockets ((type ARG1))
			 (allow ARG1 typeattr (dccp_socket (node_bind))))

		  (macro nodebind_all_icmp_sockets ((type ARG1))
			 (allow ARG1 typeattr (icmp_socket (node_bind))))

		  (macro nodebind_all_rawip_sockets ((type ARG1))
			 (allow ARG1 typeattr (rawip_socket (node_bind))))

		  (macro nodebind_all_sctp_sockets ((type ARG1))
			 (allow ARG1 typeattr (sctp_socket (node_bind))))

		  (macro nodebind_all_tcp_sockets ((type ARG1))
			 (allow ARG1 typeattr (tcp_socket (node_bind))))

		  (macro nodebind_all_udp_sockets ((type ARG1))
			 (allow ARG1 typeattr (udp_socket (node_bind))))

		  (macro recvfrom_all_nodes ((type ARG1))
			 (allow ARG1 typeattr (node (recvfrom))))

		  (macro recvfromsendto_all_nodes ((type ARG1))
			 (allow ARG1 typeattr (node (recvfrom sendto))))

		  (macro sendto_all_nodes ((type ARG1))
			 (allow ARG1 obj_typeattr (node (sendto)))))

	   (block base_template

		  (blockabstract base_template)

		  (context netnode_context
			   (.sys.id .sys.role netnode (systemlow systemlow)))

		  (type netnode)
		  (call .net.netnode.type (netnode)))

	   (block macro_template

		  (blockabstract macro_template)

		  (macro nodebind_netnode_dccp_sockets ((type ARG1))
			 (allow ARG1 netnode (dccp_socket (node_bind))))

		  (macro nodebind_netnode_icmp_sockets ((type ARG1))
			 (allow ARG1 netnode (icmp_socket (node_bind))))

		  (macro nodebind_netnode_rawip_sockets ((type ARG1))
			 (allow ARG1 netnode (rawip_socket (node_bind))))

		  (macro nodebind_netnode_sctp_sockets ((type ARG1))
			 (allow ARG1 netnode (sctp_socket (node_bind))))

		  (macro nodebind_netnode_tcp_sockets ((type ARG1))
			 (allow ARG1 netnode (tcp_socket (node_bind))))

		  (macro nodebind_netnode_udp_sockets ((type ARG1))
			 (allow ARG1 netnode (udp_socket (node_bind))))

		  (macro recvfrom_nodes ((type ARG1))
			 (allow ARG1 netnode (node (recvfrom))))

		  (macro recvfromsendto_nodes ((type ARG1))
			 (allow ARG1 netnode (node (recvfrom sendto))))

		  (macro sendto_nodes ((type ARG1))
			 (allow ARG1 netnode (node (sendto)))))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.netnode.base_template)
		  (blockinherit .net.netnode.macro_template))

	   (block unconfined

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute typeattr)

		  (allow typeattr netnode.typeattr (dccp_socket (node_bind)))
		  (allow typeattr netnode.typeattr (icmp_socket (node_bind)))
		  (allow typeattr netnode.typeattr (node (all)))
		  (allow typeattr netnode.typeattr (rawip_socket (node_bind)))
		  (allow typeattr netnode.typeattr (sctp_socket (node_bind)))
		  (allow typeattr netnode.typeattr (tcp_socket (node_bind)))
		  (allow typeattr netnode.typeattr (udp_socket (node_bind))))))

(in net.unconfined

    (call .net.netnode.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in net

    (call ib.unconfined.type (unconfined.typeattr))

    (block ib

	   (block unconfined

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute typeattr))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sidcontext port (sys.id sys.role net.port (systemlow systemlow)))

(in net

    (blockinherit port.template)

    (block port

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit all_macro_template)

	   (call .obj.type (typeattr))

	   (block all_macro_template

		  (blockabstract all_macro_template)

		  (macro namebind_all_dccp_sockets ((type ARG1))
			 (allow ARG1 typeattr (dccp_socket (name_bind))))

		  (macro namebind_all_icmp_sockets ((type ARG1))
			 (allow ARG1 typeattr (icmp_socket (name_bind))))

		  (macro namebind_all_rawip_sockets ((type ARG1))
			 (allow ARG1 typeattr (rawip_socket (name_bind))))

		  (macro namebind_all_sctp_sockets ((type ARG1))
			 (allow ARG1 typeattr (sctp_socket (name_bind))))

		  (macro namebind_all_tcp_sockets ((type ARG1))
			 (allow ARG1 typeattr (tcp_socket (name_bind))))

		  (macro namebind_all_udp_sockets ((type ARG1))
			 (allow ARG1 typeattr (udp_socket (name_bind))))

		  (macro nameconnect_all_dccp_sockets ((type ARG1))
			 (allow ARG1 typeattr (dccp_socket (name_connect))))

		  (macro nameconnect_all_sctp_sockets ((type ARG1))
			 (allow ARG1 typeattr (sctp_socket (name_connect))))

		  (macro nameconnect_all_tcp_sockets ((type ARG1))
			 (allow ARG1 typeattr (tcp_socket (name_connect)))))

	   (block base_template

		  (blockabstract base_template)

		  (context port_context
			   (.sys.id .sys.role port (systemlow systemlow)))

		  (type port)
		  (call .net.port.type (port)))

	   (block macro_template

		  (blockabstract macro_template)

		  (macro namebind_port_dccp_sockets ((type ARG1))
			 (allow ARG1 port (dccp_socket (name_bind))))

		  (macro namebind_port_icmp_sockets ((type ARG1))
			 (allow ARG1 port (icmp_socket (name_bind))))

		  (macro namebind_port_rawip_sockets ((type ARG1))
			 (allow ARG1 port (rawip_socket (name_bind))))

		  (macro namebind_port_sctp_sockets ((type ARG1))
			 (allow ARG1 port (sctp_socket (name_bind))))

		  (macro namebind_port_tcp_sockets ((type ARG1))
			 (allow ARG1 port (tcp_socket (name_bind))))

		  (macro namebind_port_udp_sockets ((type ARG1))
			 (allow ARG1 port (udp_socket (name_bind))))

		  (macro nameconnect_port_dccp_sockets ((type ARG1))
			 (allow ARG1 port (dccp_socket (name_connect))))

		  (macro nameconnect_port_sctp_sockets ((type ARG1))
			 (allow ARG1 port (sctp_socket (name_connect))))

		  (macro nameconnect_port_tcp_sockets ((type ARG1))
			 (allow ARG1 port (tcp_socket (name_connect)))))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.port.base_template)
		  (blockinherit .net.port.macro_template))

	   (block unconfined

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute typeattr)

		  (allow typeattr port.typeattr
			 (dccp_socket (name_bind name_connect)))
		  (allow typeattr port.typeattr (icmp_socket (name_bind)))
		  (allow typeattr port.typeattr (rawip_socket (name_bind)))
		  (allow typeattr port.typeattr
			 (sctp_socket (name_bind name_connect)))
		  (allow typeattr port.typeattr
			 (tcp_socket (name_bind name_connect)))
		  (allow typeattr port.typeattr (udp_socket (name_bind))))))

(in net.unconfined

    (call .net.port.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ephemeral

       (portcon "dccp" (32768 60999) port_context)
       (portcon "sctp" (32768 60999) port_context)
       (portcon "tcp" (32768 60999) port_context)
       (portcon "udp" (32768 60999) port_context)

       (blockinherit .net.port.ephemeral.template))

(in net.port

    (block ephemeral

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit .net.port.all_macro_template)

	   (typeattribute typeattr)

	   (call .net.port.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .net.port.base_template)

		  (call .net.port.ephemeral.type (port)))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.port.ephemeral.base_template)
		  (blockinherit .net.port.macro_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block reserved

       (portcon "dccp" (1 1023) port_context)
       (portcon "sctp" (1 1023) port_context)
       (portcon "tcp" (1 1023) port_context)
       (portcon "udp" (1 1023) port_context)

       (blockinherit .net.port.reserved.template))

(in net.port

    (block reserved

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit .net.port.all_macro_template)

	   (typeattribute typeattr)

	   (call .net.port.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .net.port.base_template)

		  (call .net.port.reserved.type (port)))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.port.macro_template)
		  (blockinherit .net.port.reserved.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block unreserved

       (portcon "dccp" (1024 32767) port_context)
       (portcon "dccp" (61000 65535) port_context)
       (portcon "sctp" (1024 32767) port_context)
       (portcon "sctp" (61000 65535) port_context)
       (portcon "tcp" (1024 32767) port_context)
       (portcon "tcp" (61000 65535) port_context)
       (portcon "udp" (1024 32767) port_context)
       (portcon "udp" (61000 65535) port_context)

       (blockinherit .net.port.unreserved.template))

(in net.port

    (block unreserved

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (blockinherit .net.port.all_macro_template)

	   (typeattribute typeattr)

	   (call .net.port.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .net.port.base_template)

		  (call .net.port.unreserved.type (port)))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.port.macro_template)
		  (blockinherit .net.port.unreserved.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class packet (forward_in forward_out recv relabelto send))
(classorder (unordered packet))

(macro forward_invalid_packets ((type ARG1))
       (allow ARG1 invalid (packet (forward_in forward_out))))

(macro forwardin_invalid_packets ((type ARG1))
       (allow ARG1 invalid (packet (forward_in))))

(macro forwardout_invalid_packets ((type ARG1))
       (allow ARG1 invalid (packet (forward_out))))

(macro recv_invalid_packets ((type ARG1))
       (allow ARG1 invalid (packet (recv))))

(macro recvsend_invalid_packets ((type ARG1))
       (allow ARG1 invalid (packet (recv send))))

(macro relabelto_invalid_packets ((type ARG1))
       (allow ARG1 invalid (packet (relabelto))))

(macro send_invalid_packets ((type ARG1))
       (allow ARG1 invalid (packet (send))))

(tunableif invalid_packets
	   (true

	    (call forward_invalid_packets (invalidpackets.except.typeattr))
	    (call recvsend_invalid_packets (invalidpackets.except.typeattr))))

(tunableif (or invalid_associations invalid_peers)
	   (true

	    (call forward_invalid_packets (invalid))

	    (call net.packet.forward_all_packets (invalid))))

(in ibac

    (constrain (packet (relabelto))
	       (or (or (or (eq u1 u2)
			   (and (eq t1 objchangesys.typeattr) (eq u2 .sys.id)))
		       (eq t1 objchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in invalid.unconfined

    (allow typeattr .invalid (packet (not (relabelto)))))

(in mcs

    (mlsconstrain (packet (relabelto))
		  (or (neq t1 constrained.typeattr)
		      (and (dom h1 h2) (eq l2 h2))))

    (mlsconstrain (packet (forward_out send))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in rbac

    (constrain (packet (relabelto))
	       (or (or (or (eq r1 r2)
			   (and (eq t1 objchangesys.typeattr)
				(eq r2 .sys.role)))
		       (eq t1 objchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in net

    (blockinherit packet.template)

    (block packet

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit all_macro_template)

	   (call .obj.type (typeattr))

	   (block all_macro_template

		  (blockabstract all_macro_template)

		  (macro forward_all_packets ((type ARG1))
			 (allow ARG1 typeattr
				(packet (forward_in forward_out))))

		  (macro forwardin_all_packets ((type ARG1))
			 (allow ARG1 typeattr (packet (forward_in))))

		  (macro forwardout_all_packets ((type ARG1))
			 (allow ARG1 typeattr (packet (forward_out))))

		  (macro recv_all_packets ((type ARG1))
			 (allow ARG1 typeattr (packet (recv))))

		  (macro recvsend_all_packets ((type ARG1))
			 (allow ARG1 typeattr (packet (recv send))))

		  (macro relabelto_all_packets ((type ARG1))
			 (allow ARG1 typeattr (packet (relabelto))))

		  (macro send_all_packets ((type ARG1))
			 (allow ARG1 typeattr (packet (send)))))

	   (block base_template

		  (blockabstract base_template)

		  (context packet_context
			   (.sys.id .sys.role packet (systemlow systemlow)))

		  (type packet)
		  (call .net.packet.type (packet)))

	   (block macro_template

		  (blockabstract macro_template)

		  (macro forward_packets ((type ARG1))
			 (allow ARG1 packet (packet (forward_in forward_out))))

		  (macro forwardin_packets ((type ARG1))
			 (allow ARG1 packet (packet (forward_in))))

		  (macro forwardout_packets ((type ARG1))
			 (allow ARG1 packet (packet (forward_out))))

		  (macro recv_packets ((type ARG1))
			 (allow ARG1 packet (packet (recv))))

		  (macro recvsend_packets ((type ARG1))
			 (allow ARG1 packet (packet (recv send))))

		  (macro relabelto_packets ((type ARG1))
			 (allow ARG1 packet (packet (relabelto))))

		  (macro send_packets ((type ARG1))
			 (allow ARG1 packet (packet (send)))))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.packet.base_template)
		  (blockinherit .net.packet.macro_template))

	   (block unconfined

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute typeattr)

		  (allow typeattr packet.typeattr (packet (all))))))

(in net.unconfined

    (call .net.packet.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sidcontext netmsg (sys.id sys.role net.peer (systemlow systemlow)))

(class peer (recv))
(classorder (unordered peer))

(macro recv_invalid_peers ((type ARG1))
       (allow ARG1 invalid (peer (recv))))

(tunableif invalid_peers
	   (true

	    (call association_invalid_sctp_sockets
		  (invalidpeers.except.typeattr))
	    (call recv_invalid_peers (invalidpeers.except.typeattr))))

(in invalid.unconfined

    (allow typeattr .invalid (peer (all))))

(in mcs

    (mlsconstrain (peer (recv))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in net

    (blockinherit peer.template)

    (block peer

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit all_macro_template)

	   (call .obj.type (typeattr))

	   (block all_macro_template

		  (blockabstract all_macro_template)

		  (macro recv_all_peers ((type ARG1))
			 (allow ARG1 typeattr (peer (recv))))

		  (macro association_all_sctp_sockets ((type ARG1))
			 (allow ARG1 typeattr (sctp_socket (association)))))

	   (block base_template

		  (blockabstract base_template)

		  (context peer_context
			   (.sys.id .sys.role peer (systemlow systemlow)))

		  (type peer)
		  (call .net.peer.type (peer)))

	   (block macro_template

		  (blockabstract macro_template)

		  (macro recv_peers ((type ARG1))
			 (allow ARG1 peer (peer (recv))))

		  (macro association_peer_sctp_sockets ((type ARG1))
			 (allow ARG1 peer (sctp_socket (association)))))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.peer.base_template)
		  (blockinherit .net.peer.macro_template))

	   (block unconfined

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute typeattr)

		  (allow typeattr peer.typeattr (peer (all)))
		  (allow typeattr peer.typeattr (sctp_socket (association))))))

(in net.unconfined

    (call .net.peer.unconfined.type (typeattr)))

(in subj

    (macro recv_all_peers ((type ARG1))
	   (allow ARG1 typeattr (peer (recv)))))

(in subj.macro_template

    (macro recv_subj_peers ((type ARG1))
	   (allow ARG1 subj (peer (recv)))))

(in subj.unconfined

    (allow typeattr .subj.typeattr (peer (recv))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class infiniband_endport (manage_subnet))
(classorder (unordered infiniband_endport))

(macro managesubnet_invalid_endports ((type ARG1))
       (allow ARG1 invalid (infiniband_endport (manage_subnet))))

(in invalid.unconfined

    (allow typeattr .invalid (infiniband_endport (all))))

(in mcs

    (mlsconstrain (infiniband_endport (manage_subnet))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in net.ib

    (blockinherit endport.template)

    (block endport

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit all_macro_template)

	   (call .obj.type (typeattr))

	   (block all_macro_template

		  (blockabstract all_macro_template)

		  (macro managesubnet_all_endports ((type ARG1))
			 (allow ARG1 typeattr
				(infiniband_endport (manage_subnet)))))

	   (block base_template

		  (blockabstract base_template)

		  (context endport_context
			   (.sys.id .sys.role endport (systemlow systemlow)))

		  (type endport)
		  (call .net.ib.endport.type (endport)))

	   (block macro_template

		  (blockabstract macro_template)

		  (macro managesubnet_endports ((type ARG1))
			 (allow ARG1 endport
				(infiniband_endport (manage_subnet)))))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.ib.endport.base_template)
		  (blockinherit .net.ib.endport.macro_template))

	   (block unconfined

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute typeattr)

		  (allow typeattr endport.typeattr
			 (infiniband_endport (all))))))

(in net.ib.unconfined

    (call .net.ib.endport.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class infiniband_pkey (access))
(classorder (unordered infiniband_pkey))

(macro access_invalid_pkeys ((type ARG1))
       (allow ARG1 invalid (infiniband_pkey (access))))

(in invalid.unconfined

    (allow typeattr .invalid (infiniband_pkey (all))))

(in mcs

    (mlsconstrain (infiniband_pkey (access))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in net.ib

    (blockinherit pkey.template)

    (block pkey

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit all_macro_template)

	   (call .obj.type (typeattr))

	   (block all_macro_template

		  (blockabstract all_macro_template)

		  (macro access_all_pkeys ((type ARG1))
			 (allow ARG1 typeattr (infiniband_pkey (access)))))

	   (block base_template

		  (blockabstract base_template)

		  (context pkey_context
			   (.sys.id .sys.role pkey (systemlow systemlow)))

		  (type pkey)
		  (call .net.ib.pkey.type (pkey)))

	   (block macro_template

		  (blockabstract macro_template)

		  (macro access_pkeys ((type ARG1))
			 (allow ARG1 pkey (infiniband_pkey (access)))))

	   (block template

		  (blockabstract template)

		  (blockinherit .net.ib.pkey.base_template)
		  (blockinherit .net.ib.pkey.macro_template))

	   (block unconfined

		  (macro type ((type ARG1))
			 (typeattributeset typeattr ARG1))

		  (typeattribute typeattr)

		  (allow typeattr pkey.typeattr (infiniband_pkey (all))))))

(in net.ib.unconfined

    (call .net.ib.pkey.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sidcontext security (sys.id sys.role selinux (systemlow systemlow)))

(class security
       (check_context compute_av compute_create compute_member compute_relabel
		      compute_user load_policy read_policy setbool
		      setcheckreqprot setenforce setsecparam validate_trans))
(classorder (unordered security))

(macro checkcontext_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (check_context))))

(macro computeav_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (compute_av))))

(macro computecreate_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (compute_create))))

(macro computemember_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (compute_member))))

(macro computerelabel_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (compute_relabel))))

(macro computeuser_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (compute_user))))

(macro loadpolicy_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (load_policy))))

(macro readpolicy_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (read_policy))))

(macro setbool_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (setbool))))

(macro setcheckreqprot_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (setcheckreqprot))))

(macro setenforce_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (setenforce))))

(macro setsecparam_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (setsecparam))))

(macro validatetrans_selinux_security ((type ARG1))
       (allow ARG1 selinux (security (validate_trans))))

(type selinux)
(roletype sys.role selinux)

(block selinux

       (block loadpolicy

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr .selinux (security (load_policy)))
		  (typeattributeset Harmless (not (not_typeattr)))
		  (typeattributeset TCB .selinux)
		)

       (block setenforce

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr .selinux (security (setenforce)))
		)

       (block setsecparam

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr .selinux (security (setsecparam)))
		)

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr .selinux (security (all)))

	      (call loadpolicy.type (typeattr))
	      (call setenforce.type (typeattr))
	      (call setsecparam.type (typeattr))))

(in unconfined

    (call .selinux.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block debugfile

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_dirs)
       (blockinherit .file.all_macro_template_files)

       (call .obj.type (typeattr))

       (call .debug.associate_fs (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context debugfile_context
		       (.sys.id .sys.role debugfile (systemlow systemlow)))

	      (type debugfile)
	      (call .debugfile.type (debugfile)))

       (block macro_template_dirs

	      (blockabstract macro_template_dirs)

	      (macro addname_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile addname_dir))

	      (macro create_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile create_dir))

	      (macro delete_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile delete_dir))

	      (macro deletename_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile deletename_dir))

	      (macro list_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile list_dir))

	      (macro listinherited_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile listinherited_dir))

	      (macro manage_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile manage_dir))

	      (macro mounton_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile mounton_dir))

	      (macro readwrite_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile readwrite_dir))

	      (macro readwriteinherited_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile readwriteinherited_dir))

	      (macro rename_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile rename_dir))

	      (macro search_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile search_dir))

	      (macro write_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile write_dir))

	      (macro writeinherited_debugfile_dirs ((type ARG1))
		     (allow ARG1 debugfile writeinherited_dir)))

       (block macro_template_files

	      (blockabstract macro_template_files)

	      (macro append_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile append_file))

	      (macro appendinherited_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile appendinherited_file))

	      (macro create_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile create_file))

	      (macro delete_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile delete_file))

	      (macro execute_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile execute_file))

	      (macro manage_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile manage_file))

	      (macro mapexecute_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile mapexecute_file))

	      (macro mounton_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile mounton_file))

	      (macro read_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile read_file))

	      (macro readinherited_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile readinherited_file))

	      (macro readwrite_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile readwrite_file))

	      (macro readwriteinherited_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile readwriteinherited_file))

	      (macro rename_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile rename_file))

	      (macro write_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile write_file))

	      (macro writeinherited_debugfile_files ((type ARG1))
		     (allow ARG1 debugfile writeinherited_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .debugfile.base_template)
	      (blockinherit .debugfile.macro_template_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr debugfile.typeattr (dir (not execmod)))
	      (allow typeattr debugfile.typeattr
		     (file (not (entrypoint execmod))))))

(in sys.unconfined

    (call .debugfile.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block sysfile

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_dirs)
       (blockinherit .file.all_macro_template_files)
       (blockinherit .file.all_macro_template_lnk_files)

       (call .obj.type (typeattr))

       (call .sys.associate_fs (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context sysfile_context
		       (.sys.id .sys.role sysfile (systemlow systemlow)))

	      (type sysfile)
	      (call .sysfile.type (sysfile)))

       (block macro_template_dirs

	      (blockabstract macro_template_dirs)

	      (macro addname_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile addname_dir))

	      (macro create_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile create_dir))

	      (macro delete_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile delete_dir))

	      (macro deletename_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile deletename_dir))

	      (macro list_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile list_dir))

	      (macro listinherited_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile listinherited_dir))

	      (macro manage_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile manage_dir))

	      (macro mounton_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile mounton_dir))

	      (macro readwrite_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile readwrite_dir))

	      (macro readwriteinherited_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile readwriteinherited_dir))

	      (macro rename_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile rename_dir))

	      (macro search_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile search_dir))

	      (macro write_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile write_dir))

	      (macro writeinherited_sysfile_dirs ((type ARG1))
		     (allow ARG1 sysfile writeinherited_dir)))

       (block macro_template_files

	      (blockabstract macro_template_files)

	      (macro append_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile append_file))

	      (macro appendinherited_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile appendinherited_file))

	      (macro create_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile create_file))

	      (macro delete_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile delete_file))

	      (macro execute_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile execute_file))

	      (macro manage_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile manage_file))

	      (macro mapexecute_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile mapexecute_file))

	      (macro mounton_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile mounton_file))

	      (macro read_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile read_file))

	      (macro readinherited_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile readinherited_file))

	      (macro readwrite_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile readwrite_file))

	      (macro readwriteinherited_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile readwriteinherited_file))

	      (macro rename_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile rename_file))

	      (macro write_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile write_file))

	      (macro writeinherited_sysfile_files ((type ARG1))
		     (allow ARG1 sysfile writeinherited_file)))

       (block macro_template_lnk_files

	      (blockabstract macro_template_lnk_files)

	      (macro create_sysfile_lnk_files ((type ARG1))
		     (allow ARG1 sysfile create_lnk_file))

	      (macro delete_sysfile_lnk_files ((type ARG1))
		     (allow ARG1 sysfile delete_lnk_file))

	      (macro manage_sysfile_lnk_files ((type ARG1))
		     (allow ARG1 sysfile manage_lnk_file))

	      (macro read_sysfile_lnk_files ((type ARG1))
		     (allow ARG1 sysfile read_lnk_file))

	      (macro readwrite_sysfile_lnk_files ((type ARG1))
		     (allow ARG1 sysfile readwrite_lnk_file))

	      (macro rename_sysfile_lnk_files ((type ARG1))
		     (allow ARG1 sysfile rename_lnk_file))

	      (macro write_sysfile_lnk_files ((type ARG1))
		     (allow ARG1 sysfile write_lnk_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .sysfile.base_template)
	      (blockinherit .sysfile.macro_template_dirs)
	      (blockinherit .sysfile.macro_template_files)
	      (blockinherit .sysfile.macro_template_lnk_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr sysfile.typeattr (dir (not (execmod))))
	      (allow typeattr sysfile.typeattr (file (not (entrypoint execmod))))
	      (allow typeattr sysfile.typeattr
		     (lnk_file (not (execmod map mounton))))))

(in sys.unconfined

    (call .sysfile.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block class

       (genfscon "sysfs" "/class" sysfile_context)

       (blockinherit .sysfile.class.template)
       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files))

(in sysfile

    (block class

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.class.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.class.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in fuse

    (genfscon "sysfs" "/fs/fuse" sysfile_context)

    (blockinherit .sysfile.fs.template)
    (blockinherit .sysfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block btrfs

       (genfscon "sysfs" "/fs/btrfs" sysfile_context)

       (blockinherit .sysfile.fs.template)
       (blockinherit .sysfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block f2fs

       (genfscon "sysfs" "/fs/f2fs" sysfile_context)

       (blockinherit .sysfile.fs.template)
       (blockinherit .sysfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ext4

       (genfscon "sysfs" "/fs/ext4" sysfile_context)

       (blockinherit .sysfile.fs.template)
       (blockinherit .sysfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in ksm

    (genfscon "sysfs" "/kernel/mm/ksm" sysfile_context)

    (blockinherit .sysfile.kernel.template)
    (blockinherit .sysfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in kernel

    (genfscon "sysfs" "/kernel" sysfile_context)

    (blockinherit .sysfile.kernel.template)
    (blockinherit .sysfile.macro_template_dirs)
    (blockinherit .sysfile.macro_template_lnk_files))

(in sysfile

    (block kernel

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.kernel.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.kernel.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in dev

    (genfscon "sysfs" "/dev" sysfile_context)

    (blockinherit .sysfile.dev.template)
    (blockinherit .sysfile.macro_template_dirs)
    (blockinherit .sysfile.macro_template_lnk_files))

(in sysfile

    (block dev

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.dev.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.dev.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block power

       (genfscon "sysfs" "/power" sysfile_context)

       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files)
       (blockinherit .sysfile.power.template))

(in sysfile

    (block power

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.power.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.power.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block zramcontrol

       (genfscon "sysfs" "/class/zram-control" sysfile_context)

       (blockinherit .sysfile.class.template)
       (blockinherit .sysfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block node

       (genfscon "sysfs" "/devices/system/node" sysfile_context)

       (blockinherit .sysfile.devices.template)
       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block memory

       (genfscon "sysfs" "/devices/system/memory" sysfile_context)

       (blockinherit .sysfile.devices.template)
       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in cpu

    (genfscon "sysfs" "/devices/system/cpu" sysfile_context)

    (blockinherit .sysfile.devices.template)
    (blockinherit .sysfile.macro_template_dirs)
    (blockinherit .sysfile.macro_template_lnk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in zram

    (genfscon "sysfs" "/devices/virtual/block/zram" sysfile_context)

    (blockinherit .sysfile.devices.template)
    (blockinherit .sysfile.macro_template_dirs)
    (blockinherit .sysfile.macro_template_lnk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block hypervisor

       (genfscon "sysfs" "/hypervisor" sysfile_context)

       (blockinherit .sysfile.hypervisor.template)
       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files))

(in sysfile

    (block hypervisor

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.hypervisor.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.hypervisor.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block module

       (genfscon "sysfs" "/module" sysfile_context)

       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files)
       (blockinherit .sysfile.module.template))

(in sysfile

    (block module

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.module.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.module.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block devices

       (genfscon "sysfs" "/devices" sysfile_context)

       (blockinherit .sysfile.devices.template)
       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files))

(in sysfile

    (block devices

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.devices.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.devices.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block bus

       (genfscon "sysfs" "/bus" sysfile_context)

       (blockinherit .sysfile.bus.template)
       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files))

(in sysfile

    (block bus

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.bus.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.bus.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in fs

    (genfscon "sysfs" "/fs" sysfile_context)

    (blockinherit .sysfile.fs.template)
    (blockinherit .sysfile.macro_template_dirs)
    (blockinherit .sysfile.macro_template_lnk_files))

(in sysfile

    (block fs

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.fs.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.fs.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block block

       (genfscon "sysfs" "/block" sysfile_context)

       (blockinherit .sysfile.block.template)
       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files))

(in sysfile

    (block block

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.block.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.block.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block firmware

       (genfscon "sysfs" "/firmware" sysfile_context)

       (blockinherit .sysfile.firmware.template)
       (blockinherit .sysfile.macro_template_dirs)
       (blockinherit .sysfile.macro_template_lnk_files))

(in sysfile

    (block firmware

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)
	   (blockinherit .file.all_macro_template_lnk_files)

	   (call .sysfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysfile.base_template)

		  (call .sysfile.firmware.type (sysfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysfile.firmware.base_template)
		  (blockinherit .sysfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block procfile

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_dirs)
       (blockinherit .file.all_macro_template_files)
       (blockinherit .file.all_macro_template_lnk_files)

       (call .obj.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context procfile_context
		       (.sys.id .sys.role procfile (systemlow systemlow)))

	      (type procfile)
	      (call .procfile.type (procfile)))

       (block except

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (blockinherit file.all_macro_template_dirs)
	      (blockinherit file.all_macro_template_files)
	      (blockinherit file.all_macro_template_lnk_files)

	      (typeattribute typeattr)

	      (typeattributeset typeattr
				(and procfile.typeattr
				     (not (exception.typeattr)))))

       (block exception

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call procfile.type (typeattr)))

       (block macro_template_dirs

	      (blockabstract macro_template_dirs)

	      (macro addname_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile addname_dir))

	      (macro create_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile create_dir))

	      (macro delete_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile delete_dir))

	      (macro deletename_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile deletename_dir))

	      (macro list_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile list_dir))

	      (macro listinherited_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile listinherited_dir))

	      (macro manage_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile manage_dir))

	      (macro mounton_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile mounton_dir))

	      (macro readwrite_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile readwrite_dir))

	      (macro readwriteinherited_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile readwriteinherited_dir))

	      (macro rename_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile rename_dir))

	      (macro search_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile search_dir))

	      (macro write_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile write_dir))

	      (macro writeinherited_procfile_dirs ((type ARG1))
		     (allow ARG1 procfile writeinherited_dir)))

       (block macro_template_files

	      (blockabstract macro_template_files)

	      (macro append_procfile_files ((type ARG1))
		     (allow ARG1 procfile append_file))

	      (macro appendinherited_procfile_files ((type ARG1))
		     (allow ARG1 procfile appendinherited_file))

	      (macro create_procfile_files ((type ARG1))
		     (allow ARG1 procfile create_file))

	      (macro delete_procfile_files ((type ARG1))
		     (allow ARG1 procfile delete_file))

	      (macro execute_procfile_files ((type ARG1))
		     (allow ARG1 procfile execute_file))

	      (macro manage_procfile_files ((type ARG1))
		     (allow ARG1 procfile manage_file))

	      (macro mapexecute_procfile_files ((type ARG1))
		     (allow ARG1 procfile mapexecute_file))

	      (macro mounton_procfile_files ((type ARG1))
		     (allow ARG1 procfile mounton_file))

	      (macro read_procfile_files ((type ARG1))
		     (allow ARG1 procfile read_file))

	      (macro readinherited_procfile_files ((type ARG1))
		     (allow ARG1 procfile readinherited_file))

	      (macro readwrite_procfile_files ((type ARG1))
		     (allow ARG1 procfile readwrite_file))

	      (macro readwriteinherited_procfile_files ((type ARG1))
		     (allow ARG1 procfile readwriteinherited_file))

	      (macro rename_procfile_files ((type ARG1))
		     (allow ARG1 procfile rename_file))

	      (macro write_procfile_files ((type ARG1))
		     (allow ARG1 procfile write_file))

	      (macro writeinherited_procfile_files ((type ARG1))
		     (allow ARG1 procfile writeinherited_file)))

       (block macro_template_lnk_files

	      (blockabstract macro_template_lnk_files)

	      (macro create_procfile_lnk_files ((type ARG1))
		     (allow ARG1 procfile create_lnk_file))

	      (macro delete_procfile_lnk_files ((type ARG1))
		     (allow ARG1 procfile delete_lnk_file))

	      (macro manage_procfile_lnk_files ((type ARG1))
		     (allow ARG1 procfile manage_lnk_file))

	      (macro read_procfile_lnk_files ((type ARG1))
		     (allow ARG1 procfile read_lnk_file))

	      (macro readwrite_procfile_lnk_files ((type ARG1))
		     (allow ARG1 procfile readwrite_lnk_file))

	      (macro rename_procfile_lnk_files ((type ARG1))
		     (allow ARG1 procfile rename_lnk_file))

	      (macro write_procfile_lnk_files ((type ARG1))
		     (allow ARG1 procfile write_lnk_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .procfile.base_template)
	      (blockinherit .procfile.macro_template_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr procfile.typeattr
		     (dir (not (execmod relabelfrom relabelto))))
	      (allow typeattr procfile.typeattr
		     (file (not (entrypoint execmod relabelfrom relabelto))))
	      (allow typeattr procfile.typeattr
		     (lnk_file (not (execmod map mounton relabelfrom
					     relabelto))))))

(in sys.unconfined

    (call .procfile.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cgroupfile

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_dirs)
       (blockinherit .file.all_macro_template_files)

       (call .obj.type (typeattr))

       (call .cgroup.associate_fs (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context cgroupfile_context
		       (.sys.id .sys.role cgroupfile (systemlow systemlow)))

	      (type cgroupfile)
	      (call .cgroupfile.type (cgroupfile)))

       (block macro_template_dirs

	      (blockabstract macro_template_dirs)

	      (macro addname_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile addname_dir))

	      (macro create_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile create_dir))

	      (macro delete_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile delete_dir))

	      (macro deletename_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile deletename_dir))

	      (macro list_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile list_dir))

	      (macro listinherited_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile listinherited_dir))

	      (macro manage_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile manage_dir))

	      (macro mounton_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile mounton_dir))

	      (macro readwrite_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile readwrite_dir))

	      (macro readwriteinherited_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile readwriteinherited_dir))

	      (macro rename_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile rename_dir))

	      (macro search_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile search_dir))

	      (macro write_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile write_dir))

	      (macro writeinherited_cgroupfile_dirs ((type ARG1))
		     (allow ARG1 cgroupfile writeinherited_dir)))

       (block macro_template_files

	      (blockabstract macro_template_files)

	      (macro append_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile append_file))

	      (macro appendinherited_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile appendinherited_file))

	      (macro create_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile create_file))

	      (macro delete_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile delete_file))

	      (macro execute_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile execute_file))

	      (macro manage_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile manage_file))

	      (macro mapexecute_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile mapexecute_file))

	      (macro mounton_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile mounton_file))

	      (macro read_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile read_file))

	      (macro readinherited_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile readinherited_file))

	      (macro readwrite_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile readwrite_file))

	      (macro readwriteinherited_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile readwriteinherited_file))

	      (macro rename_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile rename_file))

	      (macro write_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile write_file))

	      (macro writeinherited_cgroupfile_files ((type ARG1))
		     (allow ARG1 cgroupfile writeinherited_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .cgroupfile.base_template)
	      (blockinherit .cgroupfile.macro_template_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr cgroupfile.typeattr (dir (not execmod)))
	      (allow typeattr cgroupfile.typeattr
		     (file (not (entrypoint execmod))))))

(in sys.unconfined

    (call .cgroupfile.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block irq

       (genfscon "proc" "/irq" procfile_context)

       (blockinherit .procfile.macro_template_dirs)
       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mtrr

       (genfscon "proc" "/mtrr" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block lockdepchains

       (genfscon "proc" "/lockdep_chains" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in tty

    (genfscon "proc" "/tty" procfile_context)

    (blockinherit .procfile.macro_template_dirs)
    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block iomem

       (genfscon "proc" "/iomem" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block uptime

       (genfscon "proc" "/uptime" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block driver

       (genfscon "proc" "/driver" procfile_context)

       (blockinherit .procfile.macro_template_dirs)
       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block stat

       (genfscon "proc" "/stat" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ioports

       (genfscon "proc" "/ioports" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block swaps

       (genfscon "proc" "/swaps" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block misc

       (genfscon "proc" "/misc" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block softirqs

       (genfscon "proc" "/softirqs" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block meminfo

       (genfscon "proc" "/meminfo" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mdstat

       (genfscon "proc" "/mdstat" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block keys

       (genfscon "proc" "/keys" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block sysctlfile

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_dirs)
       (blockinherit .file.all_macro_template_files)

       (call .procfile.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context sysctlfile_context
		       (.sys.id .sys.role sysctlfile (systemlow systemlow)))

	      (type sysctlfile)
	      (call .sysctlfile.type (sysctlfile)))

       (block macro_template_dirs

	      (blockabstract macro_template_dirs)

	      (macro addname_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile addname_dir))

	      (macro create_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile create_dir))

	      (macro delete_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile delete_dir))

	      (macro deletename_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile deletename_dir))

	      (macro list_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile list_dir))

	      (macro listinherited_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile listinherited_dir))

	      (macro manage_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile manage_dir))

	      (macro mounton_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile mounton_dir))

	      (macro readwrite_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile readwrite_dir))

	      (macro readwriteinherited_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile readwriteinherited_dir))

	      (macro rename_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile rename_dir))

	      (macro search_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile search_dir))

	      (macro write_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile write_dir))

	      (macro writeinherited_sysctlfile_dirs ((type ARG1))
		     (allow ARG1 sysctlfile writeinherited_dir)))

       (block macro_template_files

	      (blockabstract macro_template_files)

	      (macro append_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile append_file))

	      (macro appendinherited_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile appendinherited_file))

	      (macro create_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile create_file))

	      (macro delete_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile delete_file))

	      (macro execute_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile execute_file))

	      (macro manage_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile manage_file))

	      (macro mapexecute_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile mapexecute_file))

	      (macro mounton_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile mounton_file))

	      (macro read_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile read_file))

	      (macro readinherited_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile readinherited_file))

	      (macro readwrite_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile readwrite_file))

	      (macro readwriteinherited_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile readwriteinherited_file))

	      (macro rename_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile rename_file))

	      (macro write_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile write_file))

	      (macro writeinherited_sysctlfile_files ((type ARG1))
		     (allow ARG1 sysctlfile writeinherited_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .sysctlfile.base_template)
	      (blockinherit .sysctlfile.macro_template_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr sysctlfile.typeattr
		     (dir (not (execmod relabelfrom relabelto))))
	      (allow typeattr sysctlfile.typeattr
		     (file (not (entrypoint execmod relabelfrom relabelto))))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block latencystats

       (genfscon "proc" "/latency_stats" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block lockstat

       (genfscon "proc" "/lock_stat" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block scheddebug

       (genfscon "proc" "/sched_debug" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block jffs2bbc

       (genfscon "proc" "/jffs2_bbc" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block kcore

       (genfscon "proc" "/kcore" procfile_context)

       (blockinherit .procfile.template)

       (call .procfile.exception.type (procfile))

       (block read

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr procfile (file (read)))
		)

       (block readwrite

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call read.type (typeattr))
	      (call write.type (typeattr)))

       (block write

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr procfile
			  (file (append write)))
		  (typeattributeset TCB procfile)
		))

(in procfile.unconfined

    (call .kcore.readwrite.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block sysvipc

       (genfscon "proc" "/sysvipc" procfile_context)

       (blockinherit .procfile.macro_template_dirs)
       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block acpi

       (genfscon "proc" "/acpi" procfile_context)

       (blockinherit .procfile.macro_template_dirs)
       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in kmsg

    (genfscon "proc" "/kmsg" procfile_context)

    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in mtd

    (genfscon "proc" "/mtd" procfile_context)

    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block scsi

       (genfscon "proc" "/scsi" procfile_context)

       (blockinherit .procfile.macro_template_dirs)
       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vmstat

       (genfscon "proc" "/vmstat" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block buddyinfo

       (genfscon "proc" "/buddyinfo" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block locks

       (genfscon "proc" "/locks" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block asound

       (genfscon "proc" "/asound" procfile_context)

       (blockinherit .procfile.macro_template_dirs)
       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block dynamicdebug

       (genfscon "proc" "/dynamic_debug" procfile_context)

       (blockinherit .procfile.macro_template_dirs)
       (blockinherit .procfile.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block partitions

       (genfscon "proc" "/partitions" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in devices

    (genfscon "proc" "/devices" procfile_context)

    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block loadavg

       (genfscon "proc" "/loadavg" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in fs

    (genfscon "proc" "/fs" procfile_context)

    (blockinherit .procfile.macro_template_dirs)
    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block bootconfig

       (genfscon "proc" "/bootconfig" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block modules

       (genfscon "proc" "/modules" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mpt

       (genfscon "proc" "/mpt" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block kpagecount

       (genfscon "proc" "/kpagecount" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in fb

    (genfscon "proc" "/fb" procfile_context)

    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block filesystems

       (genfscon "proc" "/filesystems" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block lockdepstats

       (genfscon "proc" "/lockdep_stats" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block consoles

       (genfscon "proc" "/consoles" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block hostname

       (genfscon "proc" "/sys/kernel/hostname" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block pidmax

       (genfscon "proc" "/sys/kernel/pid_max" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block seccomp

       (genfscon "proc" "/sys/kernel/seccomp" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template)
       (blockinherit .sysctlfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block modprobe

       (genfscon "proc" "/sys/kernel/modprobe" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block nslastpid

       (genfscon "proc" "/sys/kernel/ns_last_pid" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block poweroffcmd

       (genfscon "proc" "/sys/kernel/poweroff_cmd" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block caplastcap

       (genfscon "proc" "/sys/kernel/cap_last_cap" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block corepattern

       (genfscon "proc" "/sys/kernel/core_pattern" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block yama

       (genfscon "proc" "/sys/kernel/yama" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template)
       (blockinherit .sysctlfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in random

    (genfscon "proc" "/sys/kernel/random" sysctlfile_context)

    (blockinherit .sysctlfile.kernel.template)
    (blockinherit .sysctlfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block corepipelimit

       (genfscon "proc" "/sys/kernel/core_pipe_limit" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block threadsmax

       (genfscon "proc" "/sys/kernel/threads-max" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in keys

    (genfscon "proc" "/sys/kernel/keys" sysctlfile_context)

    (blockinherit .sysctlfile.kernel.template)
    (blockinherit .sysctlfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block firmwareconfig

       (genfscon "proc" "/sys/kernel/firmware_config" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template)
       (blockinherit .sysctlfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block usermodehelper

       (genfscon "proc" "/sys/kernel/usermodehelper" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template)
       (blockinherit .sysctlfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block osrelease

       (genfscon "proc" "/sys/kernel/osrelease" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block pty

       (genfscon "proc" "/sys/kernel/pty" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template)
       (blockinherit .sysctlfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block overflowuid

       (genfscon "proc" "/sys/kernel/overflowuid" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block user

       (genfscon "proc" "/sys/user" sysctlfile_context)

       (blockinherit .sysctlfile.macro_template_dirs)
       (blockinherit .sysctlfile.user.template))

(in sysctlfile

    (block user

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.user.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.user.base_template)
		  (blockinherit .sysctlfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in dev

    (genfscon "proc" "/sys/dev" sysctlfile_context)

    (blockinherit .sysctlfile.dev.template)
    (blockinherit .sysctlfile.macro_template_dirs))

(in sysctlfile

    (block dev

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.dev.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.dev.base_template)
		  (blockinherit .sysctlfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block kernel

       (genfscon "proc" "/sys/kernel" sysctlfile_context)

       (blockinherit .sysctlfile.kernel.template)
       (blockinherit .sysctlfile.macro_template_dirs))

(in sysctlfile

    (block kernel

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.kernel.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.kernel.base_template)
		  (blockinherit .sysctlfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block abi

       (genfscon "proc" "/sys/abi" sysctlfile_context)

       (blockinherit .sysctlfile.abi.template)
       (blockinherit .sysctlfile.macro_template_dirs))

(in sysctlfile

    (block abi

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.abi.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.abi.base_template)
		  (blockinherit .sysctlfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block crypto

       (genfscon "proc" "/sys/crypto" sysctlfile_context)

       (blockinherit .sysctlfile.crypto.template)
       (blockinherit .sysctlfile.macro_template_dirs))

(in sysctlfile

    (block crypto

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.crypto.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.crypto.base_template)
		  (blockinherit .sysctlfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in net

    (genfscon "proc" "/sys/net" sysctlfile_context)

    (blockinherit .sysctlfile.macro_template_dirs)
    (blockinherit .sysctlfile.net.template))

(in sysctlfile

    (block net

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.net.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.net.base_template)
		  (blockinherit .sysctlfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mptcp

       (genfscon "proc" "/sys/net/mptcp" sysctlfile_context)

       (blockinherit .sysctlfile.macro_template_dirs)
       (blockinherit .sysctlfile.net.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ipv4

       (genfscon "proc" "/sys/net/ipv4" sysctlfile_context)

       (blockinherit .sysctlfile.macro_template_dirs)
       (blockinherit .sysctlfile.net.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block core

       (genfscon "proc" "/sys/net/core" sysctlfile_context)

       (blockinherit .sysctlfile.macro_template_dirs)
       (blockinherit .sysctlfile.net.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ipv6

       (genfscon "proc" "/sys/net/ipv6" sysctlfile_context)

       (blockinherit .sysctlfile.macro_template_dirs)
       (blockinherit .sysctlfile.net.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block unix

       (genfscon "proc" "/sys/net/unix" sysctlfile_context)

       (blockinherit .sysctlfile.macro_template_dirs)
       (blockinherit .sysctlfile.net.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block netfilter

       (genfscon "proc" "/sys/net/netfilter" sysctlfile_context)

       (blockinherit .sysctlfile.macro_template_dirs)
       (blockinherit .sysctlfile.net.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block debug

       (genfscon "proc" "/sys/debug" sysctlfile_context)

       (blockinherit .sysctlfile.debug.template)
       (blockinherit .sysctlfile.macro_template_dirs))

(in sysctlfile

    (block debug

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.debug.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.debug.base_template)
		  (blockinherit .sysctlfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in fs

    (genfscon "proc" "/sys/fs" sysctlfile_context)

    (blockinherit .sysctlfile.fs.template)
    (blockinherit .sysctlfile.macro_template_dirs))

(in sysctlfile

    (block fs

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.fs.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.fs.base_template)
		  (blockinherit .sysctlfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vm

       (genfscon "proc" "/sys/vm" sysctlfile_context)

       (blockinherit .sysctlfile.macro_template_dirs)
       (blockinherit .sysctlfile.vm.template))

(in sysctlfile

    (block vm

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.vm.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.vm.base_template)
		  (blockinherit .sysctlfile.macro_template_files))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block sunrpc

       (genfscon "proc" "/sys/sunrpc" sysctlfile_context)

       (blockinherit .sysctlfile.macro_template_dirs)
       (blockinherit .sysctlfile.sunrpc.template))

(in sysctlfile

    (block sunrpc

	   (macro type ((type ARG1))
		  (typeattributeset typeattr ARG1))

	   (typeattribute typeattr)

	   (blockinherit .file.all_macro_template_dirs)
	   (blockinherit .file.all_macro_template_files)

	   (call .sysctlfile.type (typeattr))

	   (block base_template

		  (blockabstract base_template)

		  (blockinherit .sysctlfile.base_template)

		  (call .sysctlfile.sunrpc.type (sysctlfile)))

	   (block template

		  (blockabstract template)

		  (blockinherit .sysctlfile.macro_template_files)
		  (blockinherit .sysctlfile.sunrpc.base_template))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block overcommitmemory

       (genfscon "proc" "/sys/vm/overcommit_memory"
		 sysctlfile_context)

       (blockinherit .sysctlfile.vm.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block version

       (genfscon "proc" "/version" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in net

    (genfscon "proc" "/net" procfile_context)

    (blockinherit .procfile.macro_template_dirs)
    (blockinherit .procfile.macro_template_lnk_files)
    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block kpagecgroup

       (genfscon "proc" "/kpagecgroup" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vmallocinfo

       (genfscon "proc" "/vmallocinfo" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block sysrqtrigger

       (genfscon "proc" "/sysrq-trigger" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block diskstats

       (genfscon "proc" "/diskstats" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in bus

    (genfscon "proc" "/bus" procfile_context)

    (blockinherit .procfile.macro_template_dirs)
    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block zoneinfo

       (genfscon "proc" "/zoneinfo" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in cpu

    (genfscon "proc" "/cpu" procfile_context)

    (blockinherit .procfile.macro_template_dirs)
    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block pressure

       (genfscon "proc" "/pressure" procfile_context)

       (blockinherit .procfile.macro_template_dirs)
       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block sysctl

       (genfscon "proc" "/sys" procfile_context)

       (blockinherit .procfile.base_template)
       (blockinherit .procfile.macro_template_dirs))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block kallsyms

       (genfscon "proc" "/kallsyms" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cgroups

       (genfscon "proc" "/cgroups" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block lockdep

       (genfscon "proc" "/lockdep" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block execdomains

       (genfscon "proc" "/execdomains" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block schedstat

       (genfscon "proc" "/schedstat" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cpuinfo

       (genfscon "proc" "/cpuinfo" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cmdline

       (genfscon "proc" "/cmdline" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block keyusers

       (genfscon "proc" "/key-users" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block interrupts

       (genfscon "proc" "/interrupts" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block dma

       (genfscon "proc" "/dma" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block timerlist

       (genfscon "proc" "/timer_list" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block pagetypeinfo

       (genfscon "proc" "/pagetypeinfo" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block slabinfo

       (genfscon "proc" "/slabinfo" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in crypto

    (genfscon "proc" "/crypto" procfile_context)

    (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block kpageflags

       (genfscon "proc" "/kpageflags" procfile_context)

       (blockinherit .procfile.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block tracefile

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_dirs)
       (blockinherit .file.all_macro_template_files)

       (call .obj.type (typeattr))

       (call .trace.associate_fs (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context tracefile_context
		       (.sys.id .sys.role tracefile (systemlow systemlow)))

	      (type tracefile)
	      (call .tracefile.type (tracefile)))

       (block macro_template_dirs

	      (blockabstract macro_template_dirs)

	      (macro addname_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile addname_dir))

	      (macro create_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile create_dir))

	      (macro delete_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile delete_dir))

	      (macro deletename_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile deletename_dir))

	      (macro list_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile list_dir))

	      (macro listinherited_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile listinherited_dir))

	      (macro manage_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile manage_dir))

	      (macro mounton_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile mounton_dir))

	      (macro readwrite_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile readwrite_dir))

	      (macro readwriteinherited_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile readwriteinherited_dir))

	      (macro rename_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile rename_dir))

	      (macro search_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile search_dir))

	      (macro write_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile write_dir))

	      (macro writeinherited_tracefile_dirs ((type ARG1))
		     (allow ARG1 tracefile writeinherited_dir)))

       (block macro_template_files

	      (blockabstract macro_template_files)

	      (macro append_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile append_file))

	      (macro appendinherited_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile appendinherited_file))

	      (macro create_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile create_file))

	      (macro delete_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile delete_file))

	      (macro execute_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile execute_file))

	      (macro manage_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile manage_file))

	      (macro mapexecute_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile mapexecute_file))

	      (macro mounton_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile mounton_file))

	      (macro read_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile read_file))

	      (macro readinherited_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile readinherited_file))

	      (macro readwrite_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile readwrite_file))

	      (macro readwriteinherited_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile readwriteinherited_file))

	      (macro rename_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile rename_file))

	      (macro write_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile write_file))

	      (macro writeinherited_tracefile_files ((type ARG1))
		     (allow ARG1 tracefile writeinherited_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .tracefile.base_template)
	      (blockinherit .tracefile.macro_template_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr tracefile.typeattr (dir (not execmod)))
	      (allow typeattr tracefile.typeattr
		     (file (not (entrypoint execmod))))))

(in sys.unconfined

    (call .tracefile.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in boot

    (filecon "/boot" dir file_context)
    (filecon "/boot/.*" any file_context)

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "boot"))))

(in bpf

    (filecon "/sys/fs/bpf" dir ())
    (filecon "/sys/fs/bpf/.*" any ()))

(in cache

    (filecon "/var/cache" dir file_context)
    (filecon "/var/cache/.*" any file_context)

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "cache")))

    (call .root.associate_fs (file)))

(in cert

    (filecon "/etc/pki" dir file_context)
    (filecon "/etc/pki/.*" any file_context)

    (filecon "/etc/ssl" dir file_context)
    (filecon "/etc/ssl/.*" any file_context)

    (filecon "/usr/share/pki" dir file_context)
    (filecon "/usr/share/pki/.*" any file_context)

    (macro conf_file_type_transition_file ((type ARG1))
	   (call .conf.file_type_transition
		 (ARG1 file dir "pki"))
	   (call .conf.file_type_transition
		 (ARG1 file dir "ssl")))

    (macro data_file_type_transition_file ((type ARG1))
	   (call .data.file_type_transition
		 (ARG1 file dir "pki"))))

(in cgroup

    (filecon "/sys/fs/cgroup" dir ())
    (filecon "/sys/fs/cgroup/.*" any ())

    (allow fs self (filesystem (associate)))

    (call .rbacsep.exempt.obj.type (fs)))

(in conf

    (filecon "/etc" dir file_context)
    (filecon "/etc/.*" any file_context)

    (macro data_file_type_transition_file ((type ARG1))
	   (call .data.file_type_transition
		 (ARG1 file dir "etc")))

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "etc"))))

(in config

    (filecon "/sys/kernel/config" dir ())
    (filecon "/sys/kernel/config/.*" any ()))

(in data

    (filecon "/opt" dir file_context)
    (filecon "/opt/.*" any file_context)

    (filecon "/usr" dir file_context)
    (filecon "/usr/.*" any file_context)

    (filecon "/tmp" symlink file_context)

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "opt"))
	   (call .root.file_type_transition
		 (ARG1 file dir "usr"))))

(in db

    (filecon "/var/db" dir file_context)
    (filecon "/var/db/.*" any file_context)

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "db"))))

(in debug

    (filecon "/sys/kernel/debug" dir ())
    (filecon "/sys/kernel/debug/.*" any ()))

(in dev

    (filecon "/dev" dir file_context)
    (filecon "/dev/.*" block file_context)
    (filecon "/dev/.*" char file_context)
    (filecon "/dev/.*" dir file_context)
    (filecon "/dev/.*" file file_context)
    (filecon "/dev/.*" pipe file_context)
    (filecon "/dev/.*" socket file_context)
    (filecon "/dev/.*" symlink file_context)

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "dev")))

    (call .tmp.associate_fs (typeattr))

    (call .tmp.associate_fs (file))

    (call .xattr.associate_fs (file)))

(in dev.unconfined

    (call .kmsg.mounton_nodedev_chr_files (typeattr)))

(in devpts

    (filecon "/dev/pts" dir ())
    (filecon "/dev/pts/.*" any ()))

(in devtmp

    (allow fs self (filesystem (associate))))

(in dos

    (filecon "/boot/efi" dir fs_context)
    (filecon "/boot/efi/.*" any ())

    (macro boot_file_type_transition_fs ((type ARG1))
	   (call .boot.file_type_transition
		 (ARG1 fs dir "efi")))

    (call .xattr.associate_fs (fs)))

(in efivar

    (filecon "/sys/firmware/efi/efivars" dir ())
    (filecon "/sys/firmware/efi/efivars/.*" any ()))

(in exec

    (filecon "/usr/bin" dir file_context)
    (filecon "/usr/bin/.*" any file_context)

    (macro data_file_type_transition_file ((type ARG1))
	   (call .data.file_type_transition
		 (ARG1 file dir "bin"))
	   (call .data.file_type_transition
		 (ARG1 file dir "libexec"))
	   (call .data.file_type_transition
		 (ARG1 file dir "sbin")))

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "bin"))
	   (call .root.file_type_transition
		 (ARG1 file dir "sbin"))))

(in file.run

    (call .xattr.associate_fs (typeattr)))

(in file.tmp

    (call .xattr.associate_fs (typeattr)))

(in file.unconfined

    (call .boot.root_file_type_transition_file (typeattr))
    (call .cache.var_file_type_transition_file (typeattr))
    (call .cert.conf_file_type_transition_file (typeattr))
    (call .cert.data_file_type_transition_file (typeattr))
    (call .conf.data_file_type_transition_file (typeattr))
    (call .conf.root_file_type_transition_file (typeattr))
    (call .data.root_file_type_transition_file (typeattr))
    (call .db.var_file_type_transition_file (typeattr))
    (call .dev.root_file_type_transition_file (typeattr))
    (call .exec.data_file_type_transition_file (typeattr))
    (call .exec.root_file_type_transition_file (typeattr))
    (call .home.root_file_type_transition_file (typeattr))
    (call .lib.data_file_type_transition_file (typeattr))
    (call .lib.root_file_type_transition_file (typeattr))
    (call .log.var_file_type_transition_file (typeattr))
    (call .lostfound.boot_file_type_transition_file (typeattr))
    (call .lostfound.cache_file_type_transition_file (typeattr))
    (call .lostfound.conf_file_type_transition_file (typeattr))
    (call .lostfound.data_file_type_transition_file (typeattr))
    (call .lostfound.db_file_type_transition_file (typeattr))
    (call .lostfound.home_file_type_transition_file (typeattr))
    (call .lostfound.log_file_type_transition_file (typeattr))
    (call .lostfound.root_file_type_transition_file (typeattr))
    (call .lostfound.run_file_type_transition_file (typeattr))
    (call .lostfound.spool_file_type_transition_file (typeattr))
    (call .lostfound.state_file_type_transition_file (typeattr))
    (call .lostfound.tmp_file_type_transition_file (typeattr))
    (call .lostfound.var_file_type_transition_file (typeattr))
    (call .mail.spool_file_type_transition_file (typeattr))
    (call .mail.var_file_type_transition_file (typeattr))
    (call .media.root_file_type_transition_file (typeattr))
    (call .media.run_file_type_transition_file (typeattr))
    (call .mod.lib_file_type_transition_file (typeattr))
    (call .run.root_file_type_transition_file (typeattr))
    (call .run.var_file_type_transition_file (typeattr))
    (call .runlock.run_file_type_transition_file (typeattr))
    (call .runlock.var_file_type_transition_file (typeattr))
    (call .runuser.run_file_type_transition_file (typeattr))
    (call .spool.var_file_type_transition_file (typeattr))
    (call .src.data_file_type_transition_file (typeattr))
    (call .state.var_file_type_transition_file (typeattr))
    (call .sys.home.root_file_type_transition_file (typeattr))
    (call .tmp.data_file_type_transition_file (typeattr))
    (call .tmp.root_file_type_transition_file (typeattr))
    (call .tmp.var_file_type_transition_file (typeattr))
    (call .var.root_file_type_transition_file (typeattr)))

(in fs.unconfined

    (call .dos.boot_file_type_transition_fs (typeattr)))

(in fuse

    (filecon "/sys/fs/fuse/connections" dir ())
    (filecon "/sys/fs/fuse/connections/.*" any ()))

(in home

    (filecon "/home" dir file_context)
    (filecon "/home/.*" any file_context)

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		    (ARG1 file dir "home"))))

(in hugetlb

    (filecon "/dev/hugepages" dir ())
    (filecon "/dev/hugepages/.*" any ())

    (allow fs self (filesystem (associate))))

(in lib

    (filecon "/usr/lib" dir file_context)
    (filecon "/usr/lib/.*" any file_context)

    (macro data_file_type_transition_file ((type ARG1))
	   (call .data.file_type_transition
		 (ARG1 file dir "lib"))
	   (call .data.file_type_transition
		 (ARG1 file dir "lib64")))

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "lib"))
	   (call .root.file_type_transition
		 (ARG1 file dir "lib64"))))

(in log

    (filecon "/var/log" dir file_context)
    (filecon "/var/log/.*" any file_context)

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "log")))

    (call .tmp.associate_fs (file)))

(in lostfound

    (filecon "/\.journal" file ())
    (filecon "/lost\+found" dir file_context)

    (filecon "/boot/\.journal" file ())
    (filecon "/boot/lost\+found" dir file_context)

    (filecon "/etc/\.journal" file ())
    (filecon "/etc/lost\+found" dir file_context)

    (filecon "/home/\.journal" file ())
    (filecon "/home/lost\+found" dir file_context)

    (filecon "/opt/\.journal" file ())
    (filecon "/opt/lost\+found" dir file_context)

    (filecon "/run/\.journal" file ())
    (filecon "/run/lost\+found" dir file_context)

    (filecon "/srv/\.journal" file ())
    (filecon "/srv/lost\+found" dir file_context)

    (filecon "/tmp/\.journal" file ())
    (filecon "/tmp/lost\+found" dir file_context)

    (filecon "/usr/\.journal" file ())
    (filecon "/usr/lost\+found" dir file_context)

    (filecon "/usr/tmp/\.journal" file ())
    (filecon "/usr/tmp/lost\+found" dir file_context)

    (filecon "/var/\.journal" file ())
    (filecon "/var/lost\+found" dir file_context)

    (filecon "/var/cache/\.journal" file ())
    (filecon "/var/cache/lost\+found" dir file_context)

    (filecon "/var/db/\.journal" file ())
    (filecon "/var/db/lost\+found" dir file_context)

    (filecon "/var/lib/\.journal" file ())
    (filecon "/var/lib/lost\+found" dir file_context)

    (filecon "/var/log/\.journal" file ())
    (filecon "/var/log/lost\+found" dir file_context)

    (filecon "/var/run/\.journal" file ())
    (filecon "/var/run/lost\+found" dir file_context)

    (filecon "/var/spool/\.journal" file ())
    (filecon "/var/spool/lost\+found" dir file_context)

    (filecon "/var/tmp/\.journal" file ())
    (filecon "/var/tmp/lost\+found" dir file_context)

    (macro boot_file_type_transition_file ((type ARG1))
	   (call .boot.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro cache_file_type_transition_file ((type ARG1))
	   (call .cache.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro conf_file_type_transition_file ((type ARG1))
	   (call .conf.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro data_file_type_transition_file ((type ARG1))
	   (call .data.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro db_file_type_transition_file ((type ARG1))
	   (call .db.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro home_file_type_transition_file ((type ARG1))
	   (call .home.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro log_file_type_transition_file ((type ARG1))
	   (call .log.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro run_file_type_transition_file ((type ARG1))
	   (call .run.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro spool_file_type_transition_file ((type ARG1))
	   (call .spool.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro state_file_type_transition_file ((type ARG1))
	   (call .state.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro tmp_file_type_transition_file ((type ARG1))
	   (call .tmp.file_type_transition
		 (ARG1 file dir "lost+found")))

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "lost+found"))))

(in mail

    (filecon "/var/spool/mail" dir file_context)
    (filecon "/var/spool/mail/.*" any file_context)

    (macro spool_file_type_transition_file ((type ARG1))
	   (call .spool.file_type_transition
		 (ARG1 file dir "mail")))

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "mail"))))

(in media

    (filecon "/media" dir file_context)
    (filecon "/media/.*" any ())

    (filecon "/mnt" dir file_context)
    (filecon "/mnt/.*" any ())

    (filecon "/run/media" dir file_context)
    (filecon "/run/media/.*" any ())

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "media"))
	   (call .root.file_type_transition
		 (ARG1 file dir "mnt")))

    (macro run_file_type_transition_file ((type ARG1))
	   (call .run.file_type_transition
		 (ARG1 file dir "media")))

    (call .tmp.associate_fs (file)))

(in mod

    (filecon "/usr/lib/modules" dir file_context)
    (filecon "/usr/lib/modules/.*" any file_context)

    (macro lib_file_type_transition_file ((type ARG1))
	   (call .lib.file_type_transition
		 (ARG1 file dir "modules"))))

(in mqueue

    (filecon "/dev/mqueue" dir ())
    (filecon "/dev/mqueue/.*" any ())

    (allow fs self (filesystem (associate))))

(in nodedev.unconfined

    (call .kmsg.mounton_nodedev_chr_files (typeattr)))

(in proc

    (filecon "/proc" dir fs_context)
    (filecon "/proc/.*" any ())

    (call .xattr.associate_fs (fs)))

(in pstore

    (filecon "/sys/fs/pstore" dir ())
    (filecon "/sys/fs/pstore/.*" any ()))

(in root

    (filecon "/usr/bin" symlink file_context)
    (filecon "/usr/lib" symlink file_context)

    (allow fs self (filesystem (associate))))

(in rpcpipe

    (filecon "/run/rpc_pipefs" dir ())
    (filecon "/run/rpc_pipefs/.*" any ()))

(in run

    (filecon "/run" dir file_context)
    (filecon "/run/.*" any file_context)

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "run")))

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "run")))

    (call .root.associate_fs (file)))

(in runlock

    (filecon "/run/lock" dir file_context)
    (filecon "/run/lock/.*" any file_context)

    (macro run_file_type_transition_file ((type ARG1))
	   (call .run.file_type_transition
		 (ARG1 file dir "lock")))

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "lock"))))

(in runuser

    (filecon "/run/user" dir file_context)
    (filecon "/run/user/.*" any file_context)

    (macro run_file_type_transition_file ((type ARG1))
	   (call .run.file_type_transition
		 (ARG1 file dir "user"))))

(in security

    (filecon "/sys/kernel/security" dir ())
    (filecon "/sys/kernel/security/.*" any ()))

(in selinux

    (filecon "/sys/fs/selinux" dir ())
    (filecon "/sys/fs/selinux/.*" any ()))

(in spool

    (filecon "/var/spool" dir file_context)
    (filecon "/var/spool/.*" any file_context)

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "spool"))))

(in src

    (filecon "/usr/src" dir file_context)
    (filecon "/usr/src/.*" any file_context)

    (macro data_file_type_transition_file ((type ARG1))
	   (call .data.file_type_transition
		 (ARG1 file dir "src"))))

(in state

    (filecon "/var/lib" dir file_context)
    (filecon "/var/lib/.*" any file_context)

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "lib")))

    (call .root.associate_fs (file)))

(in sys

    (filecon "/sys" dir fs_context)
    (filecon "/sys/.*" any ())

    (allow fs self (filesystem (associate)))

    (call hugetlbfs.hugetlb_fs_type_transition_file (subj "*"))

    (call mqueuefs.mqueue_fs_type_transition_file (subj "*"))

    (call tmp.tmp_file_type_transition_file (subj dir "*"))
    (call tmp.tmp_file_type_transition_file (subj fifo_file "*"))
    (call tmp.tmp_file_type_transition_file (subj file "*"))
    (call tmp.tmp_file_type_transition_file (subj lnk_file "*"))
    (call tmp.tmp_file_type_transition_file (subj sock_file "*"))

    (call tmpfs.tmp_fs_type_transition_file (subj dir "*"))
    (call tmpfs.tmp_fs_type_transition_file (subj fifo_file "*"))
    (call tmpfs.tmp_fs_type_transition_file (subj file "*"))
    (call tmpfs.tmp_fs_type_transition_file (subj lnk_file "*"))
    (call tmpfs.tmp_fs_type_transition_file (subj sock_file "*"))

    (call .tmp.sys_tmp_file_type_transition_file (subj))

    (call .xattr.associate_fs (fs)))

(in sys.home

    (filecon "/root" dir file_context)
    (filecon "/root/.*" any file_context)

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.fs_type_transition
		 (ARG1 file dir "root"))))

(in sys.hugetlbfs

    (macro hugetlb_fs_type_transition_file ((type ARG1)(name ARG2))
	   (call .hugetlb.fs_type_transition
		 (ARG1 file file ARG2))))

(in sys.mqueuefs

    (macro mqueue_fs_type_transition_file ((type ARG1)(name ARG2))
	   (call .mqueue.fs_type_transition
		 (ARG1 file file ARG2))))

(in sys.tmp

    (macro tmp_file_type_transition_file ((type ARG1)(class ARG2)(name ARG3))
	   (call .tmp.file_type_transition
		 (ARG1 file ARG2 ARG3))))

(in sys.tmpfs

    (macro tmp_fs_type_transition_file ((type ARG1)(class ARG2)(name ARG3))
	   (call .tmp.fs_type_transition
		 (ARG1 file ARG2 ARG3))))

(in sys.unconfined

    (allow typeattr subj (system (reboot reload start status stop))))

(in tmp

    (filecon "/dev/shm" dir fs_context)
    (filecon "/dev/shm/.*" any ())

    (filecon "/run/initramfs/.*" any ())

    (filecon "/tmp" dir file_context)
    (filecon "/tmp/.*" any ())

    (filecon "/tmp/\.font-unix" dir file_context)
    (filecon "/tmp/\.font-unix/.*" any ())
    (filecon "/tmp/\.ICE-unix" dir file_context)
    (filecon "/tmp/\.ICE-unix/.*" any ())
    (filecon "/tmp/\.Test-unix" dir file_context)
    (filecon "/tmp/\.Test-unix/.*" any ())
    (filecon "/tmp/\.X11-unix" dir file_context)
    (filecon "/tmp/\.X11-unix/.*" any ())
    (filecon "/tmp/\.XIM-unix" dir file_context)
    (filecon "/tmp/\.XIM-unix/.*" any ())

    (macro data_file_type_transition_file ((type ARG1))
	   (call .data.file_type_transition
		 (ARG1 file dir "tmp")))

    (macro root_file_type_transition_file ((type ARG1))
	   (call .root.file_type_transition
		 (ARG1 file dir "tmp")))

    (macro sys_tmp_file_type_transition_file ((type ARG1))
	   (call .sys.tmp.file_type_transition
		 (ARG1 file dir "tmp")))

    (macro var_file_type_transition_file ((type ARG1))
	   (call .var.file_type_transition
		 (ARG1 file dir "tmp")))

    (allow fs self (filesystem (associate)))

    (call .devtmp.associate_fs (fs)))

(in trace

    (filecon "/sys/kernel/tracing" dir ())
    (filecon "/sys/kernel/tracing/.*" any ()))

(in var

    (filecon "/run" symlink file_context)
    (filecon "/run/lock" symlink file_context)

    (filecon "/srv" dir file_context)
    (filecon "/srv/.*" any file_context)

    (filecon "/var" dir file_context)
    (filecon "/var/.*" any file_context)

    (filecon "/var/spool/mail" symlink file_context)

    (macro root_file_type_transition_file ((type ARG1))
	      (call .root.file_type_transition
		    (ARG1 file dir "srv"))
	      (call .root.file_type_transition
		    (ARG1 file dir "var"))))

(typealias dpkg_script_t)
(typealiasactual dpkg_script_t sys.subj)

(typealias rpm_script_t)
(typealiasactual rpm_script_t sys.subj)

(tunable xserver_object_manager false)
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block booleanfile

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_files)

       (call .obj.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context booleanfile_context
		       (.sys.id .sys.role booleanfile (systemlow systemlow)))

	      (type booleanfile)
	      (call .booleanfile.type (booleanfile)))

       (block macro_template_files

	      (blockabstract macro_template_files)

	      (macro append_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile append_file))

	      (macro appendinherited_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile appendinherited_file))

	      (macro create_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile create_file))

	      (macro delete_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile delete_file))

	      (macro execute_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile execute_file))

	      (macro manage_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile manage_file))

	      (macro mapexecute_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile mapexecute_file))

	      (macro mounton_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile mounton_file))

	      (macro read_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile read_file))

	      (macro readinherited_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile readinherited_file))

	      (macro readwrite_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile readwrite_file))

	      (macro readwriteinherited_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile readwriteinherited_file))

	      (macro rename_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile rename_file))

	      (macro write_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile write_file))

	      (macro writeinherited_booleanfile_files ((type ARG1))
		     (allow ARG1 booleanfile writeinherited_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .booleanfile.base_template)
	      (blockinherit .booleanfile.macro_template_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr booleanfile.typeattr
		     (file (not (entrypoint execmod))))))

(in selinux.unconfined

    (call .booleanfile.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(tunable invalid_packets true)

(block invalid_packets

       (genfscon "selinuxfs" "/booleans/invalid_packets" booleanfile_context)

       (blockinherit .booleanfile.template))

(block invalidpackets

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (block except

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (typeattributeset typeattr
				(and invalidpackets.typeattr
				     (not (exception.typeattr)))))

       (block exception

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(tunable invalid_peers true)

(block invalid_peers

       (genfscon "selinuxfs" "/booleans/invalid_peers" booleanfile_context)

       (blockinherit .booleanfile.template))

(block invalidpeers

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (block except

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (typeattributeset typeattr
				(and invalidpeers.typeattr
				     (not (exception.typeattr)))))

       (block exception

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(tunable invalid_associations true)

(block invalid_associations

       (genfscon "selinuxfs" "/booleans/invalid_associations"
		 booleanfile_context)

       (blockinherit .booleanfile.template))

(block invalidassociations

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (block except

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (typeattributeset typeattr
				(and invalidassociations.typeattr
				     (not (exception.typeattr)))))

       (block exception

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(class filesystem
       (associate getattr mount quotaget quotamod relabelfrom relabelto remount
		  unmount watch))
(classorder (unordered filesystem))

(in ibac

    (constrain (filesystem (relabelto))
	       (or (or (or (eq u1 u2)
			   (and (eq t1 objchangesys.typeattr) (eq u2 .sys.id)))
		       (eq t1 objchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in mcs

    (mlsconstrain (filesystem (relabelto))
		  (or (neq t1 constrained.typeattr)
		      (and (dom h1 h2) (eq l2 h2))))

    (mlsconstrain (filesystem (associate getattr mount remount))
		  (or (dom h1 h2)
		      (neq t1 constrained.typeattr))))

(in rbac

    (constrain (filesystem (relabelto))
	       (or (or (or (eq r1 r2)
			   (and (eq t1 objchangesys.typeattr)
				(eq r2 .sys.role)))
		       (eq t1 objchange.typeattr))
		   (eq t1 exempt.typeattr))))

(in rbacsep

    (constrain (filesystem (getattr))
	       (or (or (or (or (or (eq r1 r2)
				   (and (eq r1 exempt.roleattr)
					(neq t1 constrained.typeattr)))
			       (eq t1 exempt.subj.typeattr))
			   (eq t2 exempt.obj.typeattr))
		       (and (eq r2 exempt.roleattr) (eq t2 typeattr)))
		   (and (eq t1 readstatesource.typeattr)
			(eq t2 readstatetarget.typeattr)))))

(macro associate_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (associate))))

(macro getattr_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (getattr))))

(macro mount_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (mount))))

(macro quotaget_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (quotaget))))

(macro quotamod_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (quotamod))))

(macro relabel_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (relabelfrom relabelto))))

(macro relabelfrom_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (relabelfrom))))

(macro relabelto_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (relabelto))))

(macro remount_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (remount))))

(macro unmount_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (unmount))))

(macro watch_invalid_fs ((type ARG1))
       (allow ARG1 invalid (filesystem (watch))))

(allow invalid self (filesystem (associate)))

(block fs

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit all_macro_template_fs)

       (blockinherit .file.all_macro_template_all_files)
       (blockinherit .file.all_macro_template_blk_files)
       (blockinherit .file.all_macro_template_chr_files)
       (blockinherit .file.all_macro_template_dirs)
       (blockinherit .file.all_macro_template_fifo_files)
       (blockinherit .file.all_macro_template_files)
       (blockinherit .file.all_macro_template_lnk_files)
       (blockinherit .file.all_macro_template_sock_files)

       (call .obj.type (typeattr))

       (block all_macro_template_fs

	      (blockabstract all_macro_template_fs)

	      (macro associate_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (associate))))

	      (macro getattr_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (getattr))))

	      (macro mount_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (mount))))

	      (macro quotaget_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (quotaget))))

	      (macro quotamod_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (quotamod))))

	      (macro relabel_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (relabelfrom relabelto))))

	      (macro relabelfrom_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (relabelfrom))))

	      (macro relabelto_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (relabelto))))

	      (macro remount_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (remount))))

	      (macro unmount_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (unmount))))

	      (macro watch_all_fs ((type ARG1))
		     (allow ARG1 typeattr (filesystem (watch)))))

       (block base_template

	      (blockabstract base_template)

	      (context fs_context (.sys.id .sys.role fs (systemlow systemlow)))

	      (type fs)
	      (call .fs.type (fs)))

       (block macro_template_all_files

	      (blockabstract macro_template_all_files)

	      (macro create_fs_file ((type ARG1))
		     (allow ARG1 fs (files (create))))

	      (macro delete_fs_file ((type ARG1))
		     (allow ARG1 fs (files (delete))))

	      (macro manage_fs_file ((type ARG1))
		     (allow ARG1 fs (files (manage))))

	      (macro read_fs_file ((type ARG1))
		     (allow ARG1 fs (files (read))))

	      (macro readwrite_fs_file ((type ARG1))
		     (allow ARG1 fs (files (readwrite))))

	      (macro relabel_fs_file ((type ARG1))
		     (allow ARG1 fs (files (relabel))))

	      (macro relabelfrom_fs_file ((type ARG1))
		     (allow ARG1 fs (files (relabelfrom))))

	      (macro relabelto_fs_file ((type ARG1))
		     (allow ARG1 fs (files (relabelto))))

	      (macro rename_fs_file ((type ARG1))
		     (allow ARG1 fs (files (rename))))

	      (macro write_fs_file ((type ARG1))
		     (allow ARG1 fs (files (write)))))

       (block macro_template_blk_files

	      (blockabstract macro_template_blk_files)

	      (macro append_blk_fs_files ((type ARG1))
		     (allow ARG1 fs append_blk_file))

	      (macro appendinherited_fs_blk_files ((type ARG1))
		     (allow ARG1 fs appendinherited_blk_file))

	      (macro create_fs_blk_files ((type ARG1))
		     (allow ARG1 fs create_blk_file))

	      (macro delete_fs_blk_files ((type ARG1))
		     (allow ARG1 fs delete_blk_file))

	      (macro manage_fs_blk_files ((type ARG1))
		     (allow ARG1 fs manage_blk_file))

	      (macro read_fs_blk_files ((type ARG1))
		     (allow ARG1 fs read_blk_file))

	      (macro readinherited_fs_blk_files ((type ARG1))
		     (allow ARG1 fs readinherited_blk_file))

	      (macro readwrite_fs_blk_files ((type ARG1))
		     (allow ARG1 fs readwrite_blk_file))

	      (macro readwriteinherited_fs_blk_files ((type ARG1))
		     (allow ARG1 fs readwriteinherited_blk_file))

	      (macro relabel_fs_blk_files ((type ARG1))
		     (allow ARG1 fs relabel_blk_file))

	      (macro relabelfrom_fs_blk_files ((type ARG1))
		     (allow ARG1 fs relabelfrom_blk_file))

	      (macro relabelto_fs_blk_files ((type ARG1))
		     (allow ARG1 fs relabelto_blk_file))

	      (macro rename_fs_blk_files ((type ARG1))
		     (allow ARG1 fs rename_blk_file))

	      (macro write_fs_blk_files ((type ARG1))
		     (allow ARG1 fs write_blk_file))

	      (macro writeinherited_fs-blk_files ((type ARG1))
		     (allow ARG1 fs writeinherited_blk_file)))

       (block macro_template_chr_files

	      (blockabstract macro_template_chr_files)

	      (macro append_fs_chr_files ((type ARG1))
		     (allow ARG1 fs append_chr_file))

	      (macro appendinherited_fs_chr_files ((type ARG1))
		     (allow ARG1 fs appendinherited_chr_file))

	      (macro create_fs_chr_files ((type ARG1))
		     (allow ARG1 fs create_chr_file))

	      (macro delete_fs_chr_files ((type ARG1))
		     (allow ARG1 fs delete_chr_file))

	      (macro manage_fs_chr_files ((type ARG1))
		     (allow ARG1 fs manage_chr_file))

	      (macro mapexecute_fs_chr_files ((type ARG1))
		     (allow ARG1 fs mapexecute_chr_file))

	      (macro read_fs_chr_files ((type ARG1))
		     (allow ARG1 fs read_chr_file))

	      (macro readinherited_fs_chr_files ((type ARG1))
		     (allow ARG1 fs readinherited_chr_file))

	      (macro readwrite_fs_chr_files ((type ARG1))
		     (allow ARG1 fs readwrite_chr_file))

	      (macro readwriteinherited_fs_chr_files ((type ARG1))
		     (allow ARG1 fs readwriteinherited_chr_file))

	      (macro relabel_fs_chr_files ((type ARG1))
		     (allow ARG1 fs relabel_chr_file))

	      (macro relabelfrom_fs_chr_files ((type ARG1))
		     (allow ARG1 fs relabelfrom_chr_file))

	      (macro relabelto_fs_chr_files ((type ARG1))
		     (allow ARG1 fs relabelto_chr_file))

	      (macro rename_fs_chr_files ((type ARG1))
		     (allow ARG1 fs rename_chr_file))

	      (macro write_fs_chr_files ((type ARG1))
		     (allow ARG1 fs write_chr_file))

	      (macro writeinherited_fs_chr_files ((type ARG1))
		     (allow ARG1 fs writeinherited_chr_file)))

       (block macro_template_dirs

	      (blockabstract macro_template_dirs)

	      (macro addname_fs_dirs ((type ARG1))
		     (allow ARG1 fs addname_dir))

	      (macro create_fs_dirs ((type ARG1))
		     (allow ARG1 fs create_dir))

	      (macro delete_fs_dirs ((type ARG1))
		     (allow ARG1 fs delete_dir))

	      (macro deletename_fs_dirs ((type ARG1))
		     (allow ARG1 fs deletename_dir))

	      (macro fs_type_transition
		     ((type ARG1)(type ARG2)(class ARG3)(name ARG4))
		     (typetransition ARG1 fs ARG3 ARG4 ARG2)
		     (call addname_fs_dirs (ARG1)))

	      (macro list_fs_dirs ((type ARG1))
		     (allow ARG1 fs list_dir))

	      (macro listinherited_fs_dirs ((type ARG1))
		     (allow ARG1 fs listinherited_dir))

	      (macro manage_fs_dirs ((type ARG1))
		     (allow ARG1 fs manage_dir))

	      (macro mounton_fs_dirs ((type ARG1))
		     (allow ARG1 fs mounton_dir))

	      (macro readwrite_fs_dirs ((type ARG1))
		     (allow ARG1 fs readwrite_dir))

	      (macro readwriteinherited_fs_dirs ((type ARG1))
		     (allow ARG1 fs readwriteinherited_dir))

	      (macro relabel_fs_dirs ((type ARG1))
		     (allow ARG1 fs relabel_dir))

	      (macro relabelfrom_fs_dirs ((type ARG1))
		     (allow ARG1 fs relabelfrom_dir))

	      (macro relabelto_fs_dirs ((type ARG1))
		     (allow ARG1 fs relabelto_dir))

	      (macro rename_fs_dirs ((type ARG1))
		     (allow ARG1 fs rename_dir))

	      (macro search_fs_dirs ((type ARG1))
		     (allow ARG1 fs search_dir))

	      (macro write_fs_dirs ((type ARG1))
		     (allow ARG1 fs write_dir))

	      (macro writeinherited_fs_dirs ((type ARG1))
		     (allow ARG1 fs writeinherited_dir)))

       (block macro_template_fifo_files

	      (blockabstract macro_template_fifo_files)

	      (macro append_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs append_fifo_file))

	      (macro appendinherited_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs appendinherited_fifo_file))

	      (macro create_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs create_fifo_file))

	      (macro delete_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs delete_fifo_file))

	      (macro manage_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs manage_fifo_file))

	      (macro read_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs read_fifo_file))

	      (macro readinherited_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs readinherited_fifo_file))

	      (macro readwrite_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs readwrite_fifo_file))

	      (macro readwriteinherited_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs readwriteinherited_fifo_file))

	      (macro relabel_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs relabel_fifo_file))

	      (macro relabelfrom_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs relabelfrom_fifo_file))

	      (macro relabelto_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs relabelto_fifo_file))

	      (macro rename_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs rename_fifo_file))

	      (macro write_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs write_fifo_file))

	      (macro writeinherited_fs_fifo_files ((type ARG1))
		     (allow ARG1 fs writeinherited_fifo_file)))

       (block macro_template_files

	      (blockabstract macro_template_files)

	      (macro append_fs_files ((type ARG1))
		     (allow ARG1 fs append_file))

	      (macro appendinherited_fs_files ((type ARG1))
		     (allow ARG1 fs appendinherited_file))

	      (macro create_fs_files ((type ARG1))
		     (allow ARG1 fs create_file))

	      (macro delete_fs_files ((type ARG1))
		     (allow ARG1 fs delete_file))

	      (macro execute_fs_files ((type ARG1))
		     (allow ARG1 fs execute_file))

	      (macro manage_fs_files ((type ARG1))
		     (allow ARG1 fs manage_file))

	      (macro mapexecute_fs_files ((type ARG1))
		     (allow ARG1 fs mapexecute_file))

	      (macro mounton_fs_files ((type ARG1))
		     (allow ARG1 fs mounton_file))

	      (macro read_fs_files ((type ARG1))
		     (allow ARG1 fs read_file))

	      (macro readinherited_fs_files ((type ARG1))
		     (allow ARG1 fs readinherited_file))

	      (macro readwrite_fs_files ((type ARG1))
		     (allow ARG1 fs readwrite_file))

	      (macro readwriteinherited_fs_files ((type ARG1))
		     (allow ARG1 fs readwriteinherited_file))

	      (macro relabel_fs_files ((type ARG1))
		     (allow ARG1 fs relabel_file))

	      (macro relabelfrom_fs_files ((type ARG1))
		     (allow ARG1 fs relabelfrom_file))

	      (macro relabelto_fs_files ((type ARG1))
		     (allow ARG1 fs relabelto_file))

	      (macro rename_fs_files ((type ARG1))
		     (allow ARG1 fs rename_file))

	      (macro write_fs_files ((type ARG1))
		     (allow ARG1 fs write_file))

	      (macro writeinherited_fs_files ((type ARG1))
		     (allow ARG1 fs writeinherited_file)))

       (block macro_template_lnk_files

	      (blockabstract macro_template_lnk_files)

	      (macro create_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs create_lnk_file))

	      (macro delete_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs delete_lnk_file))

	      (macro manage_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs manage_lnk_file))

	      (macro read_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs read_lnk_file))

	      (macro readwrite_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs readwrite_lnk_file))

	      (macro relabel_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs relabel_lnk_file))

	      (macro relabelfrom_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs relabelfrom_lnk_file))

	      (macro relabelto_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs relabelto_lnk_file))

	      (macro rename_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs rename_lnk_file))

	      (macro write_fs_lnk_files ((type ARG1))
		     (allow ARG1 fs write_lnk_file)))

       (block macro_template_sock_files

	      (blockabstract macro_template_sock_files)

	      (macro create_fs_sock_files ((type ARG1))
		     (allow ARG1 fs create_sock_file))

	      (macro delete_fs_sock_files ((type ARG1))
		     (allow ARG1 fs delete_sock_file))

	      (macro manage_fs_sock_files ((type ARG1))
		     (allow ARG1 fs manage_sock_file))

	      (macro read_fs_sock_files ((type ARG1))
		     (allow ARG1 fs read_sock_file))

	      (macro readinherited_fs_sock_files ((type ARG1))
		     (allow ARG1 fs readinherited_sock_file))

	      (macro readwrite_fs_sock_files ((type ARG1))
		     (allow ARG1 fs readwrite_sock_file))

	      (macro readwriteinherited_fs_sock_files ((type ARG1))
		     (allow ARG1 fs readwriteinherited_sock_file))

	      (macro relabel_fs_sock_files ((type ARG1))
		     (allow ARG1 fs relabel_sock_file))

	      (macro relabelfrom_fs_sock_files ((type ARG1))
		     (allow ARG1 fs relabelfrom_sock_file))

	      (macro relabelto_fs_sock_files ((type ARG1))
		     (allow ARG1 fs relabelto_sock_file))

	      (macro rename_fs_sock_files ((type ARG1))
		     (allow ARG1 fs rename_sock_file))

	      (macro write_fs_sock_files ((type ARG1))
		     (allow ARG1 fs write_sock_file))

	      (macro writeinherited_fs_sock_files ((type ARG1))
		     (allow ARG1 fs writeinherited_sock_file)))

       (block macro_template_fs

	      (blockabstract macro_template_fs)

	      (macro associate_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (associate))))

	      (macro getattr_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (getattr))))

	      (macro mount_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (mount))))

	      (macro quotaget_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (quotaget))))

	      (macro quotamod_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (quotamod))))

	      (macro relabel_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (relabelfrom relabelto))))

	      (macro relabelfrom_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (relabelfrom))))

	      (macro relabelto_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (relabelto))))

	      (macro remount_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (remount))))

	      (macro unmount_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (unmount))))

	      (macro watch_fs ((type ARG1))
		     (allow ARG1 fs (filesystem (watch)))))

       (block template

	      (blockabstract template)

	      (blockabstract .fs.base_template)
	      (blockabstract .fs.macro_template_fs))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr fs.typeattr
		     (blk_file (not (execmod map mounton))))
	      (allow typeattr fs.typeattr (chr_file (not (execmod mounton))))
	      (allow typeattr fs.typeattr (dir (not execmod)))
	      (allow typeattr fs.typeattr
		     (fifo_file (not (execmod map mounton))))
	      (allow typeattr fs.typeattr (file (not (entrypoint execmod))))
	      (allow typeattr fs.typeattr (filesystem (not associate)))
	      (allow typeattr fs.typeattr (lnk_file (not (execmod map mounton))))
	      (allow typeattr fs.typeattr
		     (sock_file (not (execmod map mounton))))))

(in invalid.unconfined

    (allow typeattr .invalid (filesystem (not (associate relabelto)))))

(in unconfined

    (call .fs.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block dev

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_blk_files)
       (blockinherit .file.all_macro_template_chr_files)

       (call .obj.type (typeattr))

       (call .devtmp.associate_fs (typeattr))

       (block except

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (blockinherit .file.all_macro_template_blk_files)
	      (blockinherit .file.all_macro_template_chr_files)

	      (typeattribute typeattr)

	      (typeattributeset typeattr (and dev.typeattr
					      (not (exception.typeattr)))))

       (block exception

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call dev.type (typeattr)))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr dev.typeattr
		     (blk_file (not (execmod map mounton))))
	      (allow typeattr dev.typeattr (chr_file (not (execmod mounton))))))

(in unconfined

    (call .dev.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block noseclabelfs

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .fs.all_macro_template_fs)

       (allow typeattr self (filesystem (associate)))

       (call .fs.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (blockinherit .fs.base_template)

	      (call .noseclabelfs.type (fs)))

       (block template

	      (blockabstract template)

	      (blockinherit .fs.macro_template_dirs)
	      (blockinherit .fs.macro_template_files)
	      (blockinherit .fs.macro_template_fs)
	      (blockinherit .noseclabelfs.base_template)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in fuse

    (genfscon "fuse" "/" fs_context)
    (genfscon "fuseblk" "/" fs_context)
    (genfscon "fusectl" "/" fs_context)

    (blockinherit .fs.macro_template_lnk_files)
    (blockinherit .noseclabelfs.template)

    (call .rbacsep.exempt.obj.type (fs)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block iso9660

       (genfscon "iso9660" "/" fs_context)
       (genfscon "udf" "/" fs_context)

       (blockinherit .noseclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ns

       (genfscon "nsfs" "/" fs_context)

       (blockinherit .noseclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block config

       (genfscon "configfs" "/" fs_context)

       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_fs)
       (blockinherit .noseclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block drm

       (genfscon "drm" "/" fs_context)

       (blockinherit .fs.macro_template_fs)
       (blockinherit .noseclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block bpf

       (genfscon "bpf" "/" fs_context)

       (blockinherit .fs.macro_template_lnk_files)
       (blockinherit .noseclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in selinux

    (genfscon "selinuxfs" "/" fs_context)

    (blockinherit .noseclabelfs.template)

    (call .rbacsep.exempt.obj.type (fs)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block efivar

       (genfscon "efivarfs" "/" fs_context)

       (blockinherit .noseclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block binfmtmisc

       (genfscon "binfmt_misc" "/" fs_context)

       (blockinherit .fs.macro_template_fs)
       (blockinherit .noseclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block bdev

       (genfscon "bdev" "/" fs_context)

       (blockinherit .fs.macro_template_fs)
       (blockinherit .noseclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block nfs

       (genfscon "afs" "/" fs_context)
       (genfscon "nfs" "/" fs_context)
       (genfscon "nfs4" "/" fs_context)

       (blockinherit .fs.macro_template_fifo_files)
       (blockinherit .fs.macro_template_lnk_files)
       (blockinherit .fs.macro_template_sock_files)
       (blockinherit .noseclabelfs.template)

       (call .rbacsep.exempt.obj.type (fs)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cpuset

       (genfscon "cpuset" "/" fs_context)

       (blockinherit .fs.macro_template_fs)
       (blockinherit .noseclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block aio

       (genfscon "aio" "/" fs_context)

       (blockinherit .fs.macro_template_fs)
       (blockinherit .noseclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in removable

    (blockinherit .noseclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ci

       (genfscon "cifs" "/" fs_context)
       (genfscon "smbfs" "/" fs_context)

       (blockinherit .noseclabelfs.template)

       (call .rbacsep.exempt.obj.type (fs)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block nfsd

       (genfscon "nfsd" "/" fs_context)

       (blockinherit .noseclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block auto

       (genfscon "autofs" "/" fs_context)
       (genfscon "automount" "/" fs_context)

       (macro getattr_fs_dirs ((type ARG1))
	      (allow ARG1 fs (dir (getattr))))

       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_fs)
       (blockinherit .noseclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block dos

       (genfscon "fat" "/" fs_context)
       (genfscon "hfs" "/" fs_context)
       (genfscon "hfsplus" "/" fs_context)
       (genfscon "msdos" "/" fs_context)
       (genfscon "ntfs" "/" fs_context)
       (genfscon "ntfs-3g" "/" fs_context)
       (genfscon "vfat" "/" fs_context)
       (genfscon "exfat" "/" fs_context)

       (blockinherit .noseclabelfs.template)

       (call .rbacsep.exempt.obj.type (fs)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block rpcpipe

       (genfscon "rpc_pipefs" "/" fs_context)

       (blockinherit .fs.macro_template_fs)
       (blockinherit .noseclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block proc

       (genfscon "proc" "/" fs_context)

       (blockinherit .fs.macro_template_lnk_files)
       (blockinherit .noseclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block anoninode

       (genfscon "anon_inodefs" "/" fs_context)

       (blockinherit .noseclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block security

       (genfscon "securityfs" "/" fs_context)

       (blockinherit .fs.macro_template_lnk_files)
       (blockinherit .noseclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block hugetlb

       (fsuse trans "hugetlbfs" fs_context)

       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_files)
       (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block trace

       (genfscon "tracefs" "/" fs_context)

       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_files)
       (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block tmp

       (fsuse trans "ramfs" fs_context)
       (fsuse trans "shm" fs_context)
       (fsuse trans "tmpfs" fs_context)

       (blockinherit .fs.macro_template_all_files)
       (blockinherit .fs.macro_template_blk_files)
       (blockinherit .fs.macro_template_chr_files)
       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_fifo_files)
       (blockinherit .fs.macro_template_files)
       (blockinherit .fs.macro_template_lnk_files)
       (blockinherit .fs.macro_template_sock_files)
       (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block sock

       (fsuse task "sockfs" fs_context)

       (blockinherit .seclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mqueue

       (fsuse trans "mqueue" fs_context)

       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_files)
       (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in debug

    (genfscon "debugfs" "/" fs_context)

    (blockinherit .fs.macro_template_dirs)
    (blockinherit .fs.macro_template_files)
    (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block pipe

       (fsuse task "pipefs" fs_context)

       (blockinherit .seclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in root

    (genfscon "rootfs" "/" fs_context)

    (blockinherit .fs.macro_template_dirs)
    (blockinherit .fs.macro_template_fifo_files)
    (blockinherit .fs.macro_template_files)
    (blockinherit .fs.macro_template_lnk_files)
    (blockinherit .fs.macro_template_sock_files)
    (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block pstore

       (genfscon "pstore" "/" fs_context)

       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_files)
       (blockinherit .fs.macro_template_lnk_files)
       (blockinherit .seclabelfs.template)

       (allow fs self (filesystem (associate))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block eventpoll

       (fsuse task "eventpollfs" fs_context)

       (blockinherit .seclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block xattr

       (fsuse xattr "btrfs" fs_context)
       (fsuse xattr "ceph" fs_context)
       (fsuse xattr "encfs" fs_context)
       (fsuse xattr "erofs" fs_context)
       (fsuse xattr "ext2" fs_context)
       (fsuse xattr "ext3" fs_context)
       (fsuse xattr "ext4" fs_context)
       (fsuse xattr "ext4dev" fs_context)
       (fsuse xattr "f2fs" fs_context)
       (fsuse xattr "gfs" fs_context)
       (fsuse xattr "gfs2" fs_context)
       (fsuse xattr "gpfs" fs_context)
       (fsuse xattr "incremental-fs" fs_context)
       (fsuse xattr "jffs2" fs_context)
       (fsuse xattr "jfs" fs_context)
       (fsuse xattr "lustre" fs_context)
       (fsuse xattr "ocfs2" fs_context)
       (fsuse xattr "odms" fs_context)
       (fsuse xattr "overlay" fs_context)
       (fsuse xattr "shiftfs" fs_context)
       (fsuse xattr "squashfs" fs_context)
       (fsuse xattr "ubifs" fs_context)
       (fsuse xattr "virtiofs" fs_context)
       (fsuse xattr "vxclonefs" fs_context)
       (fsuse xattr "vxfs" fs_context)
       (fsuse xattr "xfs" fs_context)
       (fsuse xattr "yaffs2" fs_context)
       (fsuse xattr "zfs" fs_context)

       (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block devpts

       (fsuse trans "devpts" fs_context)

       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_chr_files)
       (blockinherit .fs.macro_template_fs)
       (blockinherit .seclabelfs.base_template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block devtmp

       (fsuse trans "devtmpfs" fs_context)

       (blockinherit .fs.macro_template_all_files)
       (blockinherit .fs.macro_template_blk_files)
       (blockinherit .fs.macro_template_chr_files)
       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_fifo_files)
       (blockinherit .fs.macro_template_files)
       (blockinherit .fs.macro_template_lnk_files)
       (blockinherit .fs.macro_template_sock_files)
       (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in sys

    (genfscon "sysfs" "/" fs_context)

    (blockinherit .fs.macro_template_dirs)
    (blockinherit .fs.macro_template_files)
    (blockinherit .fs.macro_template_lnk_files)
    (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cgroup

       (genfscon "cgroup" "/" fs_context)
       (genfscon "cgroup2" "/" fs_context)

       (blockinherit .fs.macro_template_dirs)
       (blockinherit .fs.macro_template_files)
       (blockinherit .seclabelfs.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block seclabelfs

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .fs.all_macro_template_fs)

       (blockinherit .file.all_macro_template_all_files)
       (blockinherit .file.all_macro_template_blk_files)
       (blockinherit .file.all_macro_template_chr_files)
       (blockinherit .file.all_macro_template_dirs)
       (blockinherit .file.all_macro_template_fifo_files)
       (blockinherit .file.all_macro_template_files)
       (blockinherit .file.all_macro_template_lnk_files)
       (blockinherit .file.all_macro_template_sock_files)

       (call .fs.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (blockinherit .fs.base_template)

	      (call .seclabelfs.type (fs)))

       (block template

	      (blockabstract template)

	      (blockinherit .fs.macro_template_fs)
	      (blockinherit .seclabelfs.base_template)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block file

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit all_macro_template_all_files)
       (blockinherit all_macro_template_blk_files)
       (blockinherit all_macro_template_chr_files)
       (blockinherit all_macro_template_dirs)
       (blockinherit all_macro_template_fifo_files)
       (blockinherit all_macro_template_files)
       (blockinherit all_macro_template_lnk_files)
       (blockinherit all_macro_template_sock_files)

       (call .obj.type (typeattr))

       (block all_macro_template_all_files

	      (blockabstract all_macro_template_all_files)

	      (macro create_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (create))))

	      (macro delete_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (delete))))

	      (macro manage_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (manage))))

	      (macro read_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (read))))

	      (macro readwrite_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (readwrite))))

	      (macro relabel_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (relabel))))

	      (macro relabelfrom_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (relabelfrom))))

	      (macro relabelto_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (relabelto))))

	      (macro rename_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (rename))))

	      (macro write_all_file ((type ARG1))
		     (allow ARG1 typeattr (files (write)))))

       (block all_macro_template_blk_files

	      (blockabstract all_macro_template_blk_files)

	      (macro append_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr append_blk_file))

	      (macro appendinherited_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr appendinherited_blk_file))

	      (macro create_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr create_blk_file))

	      (macro delete_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr delete_blk_file))

	      (macro manage_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr manage_blk_file))

	      (macro read_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr read_blk_file))

	      (macro readinherited_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr readinherited_blk_file))

	      (macro readwrite_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr readwrite_blk_file))

	      (macro readwriteinherited_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr readwriteinherited_blk_file))

	      (macro relabel_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr relabel_blk_file))

	      (macro relabelfrom_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr relabelfrom_blk_file))

	      (macro relabelto_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr relabelto_blk_file))

	      (macro rename_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr rename_blk_file))

	      (macro write_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr write_blk_file))

	      (macro writeinherited_all_blk_files ((type ARG1))
		     (allow ARG1 typeattr writeinherited_blk_file)))

       (block all_macro_template_chr_files

	      (blockabstract all_macro_template_chr_files)

	      (macro append_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr append_chr_file))

	      (macro appendinherited_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr appendinherited_chr_file))

	      (macro create_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr create_chr_file))

	      (macro delete_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr delete_chr_file))

	      (macro manage_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr manage_chr_file))

	      (macro mapexecute_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr mapexecute_chr_file))

	      (macro read_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr read_chr_file))

	      (macro readinherited_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr readinherited_chr_file))

	      (macro readwrite_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr readwrite_chr_file))

	      (macro readwriteinherited_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr readwriteinherited_chr_file))

	      (macro relabel_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr relabel_chr_file))

	      (macro relabelfrom_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr relabelfrom_chr_file))

	      (macro relabelto_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr relabelto_chr_file))

	      (macro rename_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr rename_chr_file))

	      (macro write_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr write_chr_file))

	      (macro writeinherited_all_chr_files ((type ARG1))
		     (allow ARG1 typeattr writeinherited_chr_file)))

       (block all_macro_template_dirs

	      (blockabstract all_macro_template_dirs)

	      (macro addname_all_dirs ((type ARG1))
		     (allow ARG1 typeattr addname_dir))

	      (macro create_all_dirs ((type ARG1))
		     (allow ARG1 typeattr create_dir))

	      (macro delete_all_dirs ((type ARG1))
		     (allow ARG1 typeattr delete_dir))

	      (macro deletename_all_dirs ((type ARG1))
		     (allow ARG1 typeattr deletename_dir))

	      (macro list_all_dirs ((type ARG1))
		     (allow ARG1 typeattr list_dir))

	      (macro listinherited_all_dirs ((type ARG1))
		     (allow ARG1 typeattr listinherited_dir))

	      (macro manage_all_dirs ((type ARG1))
		     (allow ARG1 typeattr manage_dir))

	      (macro mounton_all_dirs ((type ARG1))
		     (allow ARG1 typeattr mounton_dir))

	      (macro all_type_transition
		     ((type ARG1)(type ARG2)(class ARG3)(name ARG4))
		     (typetransition ARG1 typeattr ARG3 ARG4 ARG2)
		     (call addname_all_dirs (ARG1)))

	      (macro readwrite_all_dirs ((type ARG1))
		     (allow ARG1 typeattr readwrite_dir))

	      (macro readwriteinherited_all_dirs ((type ARG1))
		     (allow ARG1 typeattr readwriteinherited_dir))

	      (macro relabel_all_dirs ((type ARG1))
		     (allow ARG1 typeattr relabel_dir))

	      (macro relabelfrom_all_dirs ((type ARG1))
		     (allow ARG1 typeattr relabelfrom_dir))

	      (macro relabelto_all_dirs ((type ARG1))
		     (allow ARG1 typeattr relabelto_dir))

	      (macro rename_all_dirs ((type ARG1))
		     (allow ARG1 typeattr rename_dir))

	      (macro search_all_dirs ((type ARG1))
		     (allow ARG1 typeattr search_dir))

	      (macro write_all_dirs ((type ARG1))
		     (allow ARG1 typeattr write_dir))

	      (macro writeinherited_all_dirs ((type ARG1))
		     (allow ARG1 typeattr writeinherited_dir)))

       (block all_macro_template_fifo_files

	      (blockabstract all_macro_template_fifo_files)

	      (macro append_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr append_fifo_file))

	      (macro appendinherited_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr appendinherited_fifo_file))

	      (macro create_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr create_fifo_file))

	      (macro delete_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr delete_fifo_file))

	      (macro manage_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr manage_fifo_file))

	      (macro read_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr read_fifo_file))

	      (macro readinherited_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr readinherited_fifo_file))

	      (macro readwrite_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr readwrite_fifo_file))

	      (macro readwriteinherited_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr readwriteinherited_fifo_file))

	      (macro relabel_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr relabel_fifo_file))

	      (macro relabelfrom_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr relabelfrom_fifo_file))

	      (macro relabelto_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr relabelto_fifo_file))

	      (macro rename_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr rename_fifo_file))

	      (macro write_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr write_fifo_file))

	      (macro writeinherited_all_fifo_files ((type ARG1))
		     (allow ARG1 typeattr writeinherited_fifo_file)))

       (block all_macro_template_files

	      (blockabstract all_macro_template_files)

	      (macro append_all_files ((type ARG1))
		     (allow ARG1 typeattr append_file))

	      (macro appendinherited_all_files ((type ARG1))
		     (allow ARG1 typeattr appendinherited_file))

	      (macro create_all_files ((type ARG1))
		     (allow ARG1 typeattr create_file))

	      (macro delete_all_files ((type ARG1))
		     (allow ARG1 typeattr delete_file))

	      (macro execute_all_files ((type ARG1))
		     (allow ARG1 typeattr execute_file))

	      (macro manage_all_files ((type ARG1))
		     (allow ARG1 typeattr manage_file))

	      (macro mapexecute_all_files ((type ARG1))
		     (allow ARG1 typeattr mapexecute_file))

	      (macro mounton_all_files ((type ARG1))
		     (allow ARG1 typeattr mounton_file))

	      (macro read_all_files ((type ARG1))
		     (allow ARG1 typeattr read_file))

	      (macro readinherited_all_files ((type ARG1))
		     (allow ARG1 typeattr readinherited_file))

	      (macro readwrite_all_files ((type ARG1))
		     (allow ARG1 typeattr readwrite_file))

	      (macro readwriteinherited_all_files ((type ARG1))
		     (allow ARG1 typeattr readwriteinherited_file))

	      (macro relabel_all_files ((type ARG1))
		     (allow ARG1 typeattr relabel_file))

	      (macro relabelfrom_all_files ((type ARG1))
		     (allow ARG1 typeattr relabelfrom_file))

	      (macro relabelto_all_files ((type ARG1))
		     (allow ARG1 typeattr relabelto_file))

	      (macro rename_all_files ((type ARG1))
		     (allow ARG1 typeattr rename_file))

	      (macro write_all_files ((type ARG1))
		     (allow ARG1 typeattr write_file))

	      (macro writeinherited_all_files ((type ARG1))
		     (allow ARG1 typeattr writeinherited_file)))

       (block all_macro_template_lnk_files

	      (blockabstract all_macro_template_lnk_files)

	      (macro create_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr create_lnk_file))

	      (macro delete_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr delete_lnk_file))

	      (macro manage_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr manage_lnk_file))

	      (macro read_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr read_lnk_file))

	      (macro readwrite_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr readwrite_lnk_file))

	      (macro relabel_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr relabel_lnk_file))

	      (macro relabelfrom_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr relabelfrom_lnk_file))

	      (macro relabelto_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr relabelto_lnk_file))

	      (macro rename_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr rename_lnk_file))

	      (macro write_all_lnk_files ((type ARG1))
		     (allow ARG1 typeattr write_lnk_file)))

       (block all_macro_template_sock_files

	      (blockabstract all_macro_template_sock_files)

	      (macro create_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr create_sock_file))

	      (macro delete_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr delete_sock_file))

	      (macro manage_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr manage_sock_file))

	      (macro read_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr read_sock_file))

	      (macro readinherited_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr readinherited_sock_file))

	      (macro readwrite_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr readwrite_sock_file))

	      (macro readwriteinherited_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr readwriteinherited_sock_file))

	      (macro relabel_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr relabel_sock_file))

	      (macro relabelfrom_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr relabelfrom_sock_file))

	      (macro relabelto_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr relabelto_sock_file))

	      (macro rename_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr rename_sock_file))

	      (macro write_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr write_sock_file))

	      (macro writeinherited_all_sock_files ((type ARG1))
		     (allow ARG1 typeattr writeinherited_sock_file)))

       (block base_template

	      (blockabstract base_template)

	      (context file_context
		       (.sys.id .sys.role file (systemlow systemlow)))

	      (type file)
	      (call .file.type (file)))

       (block except

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (blockinherit file.all_macro_template_all_files)
	      (blockinherit file.all_macro_template_blk_files)
	      (blockinherit file.all_macro_template_chr_files)
	      (blockinherit file.all_macro_template_dirs)
	      (blockinherit file.all_macro_template_fifo_files)
	      (blockinherit file.all_macro_template_files)
	      (blockinherit file.all_macro_template_lnk_files)
	      (blockinherit file.all_macro_template_sock_files)

	      (typeattribute typeattr)

	      (typeattributeset typeattr (and file.typeattr
					      (not (exception.typeattr)))))

       (block exception

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call file.type (typeattr)))

       (block macro_template_all_files

	      (blockabstract macro_template_all_files)

	      (macro create_file ((type ARG1))
		     (allow ARG1 file (files (create))))

	      (macro delete_file ((type ARG1))
		     (allow ARG1 file (files (delete))))

	      (macro manage_file ((type ARG1))
		     (allow ARG1 file (files (manage))))

	      (macro read_file ((type ARG1))
		     (allow ARG1 file (files (read))))

	      (macro readwrite_file ((type ARG1))
		     (allow ARG1 file (files (readwrite))))

	      (macro relabel_file ((type ARG1))
		     (allow ARG1 file (files (relabel))))

	      (macro relabelfrom_file ((type ARG1))
		     (allow ARG1 file (files (relabelfrom))))

	      (macro relabelto_file ((type ARG1))
		     (allow ARG1 file (files (relabelto))))

	      (macro rename_file ((type ARG1))
		     (allow ARG1 file (files (rename))))

	      (macro write_file ((type ARG1))
		     (allow ARG1 file (files (write)))))

       (block macro_template_blk_files

	      (blockabstract macro_template_blk_files)

	      (macro append_file_blk_files ((type ARG1))
		     (allow ARG1 file append_blk_file))

	      (macro appendinherited_file_blk_files ((type ARG1))
		     (allow ARG1 file appendinherited_blk_file))

	      (macro create_file_blk_files ((type ARG1))
		     (allow ARG1 file create_blk_file))

	      (macro delete_file_blk_files ((type ARG1))
		     (allow ARG1 file delete_blk_file))

	      (macro manage_file_blk_files ((type ARG1))
		     (allow ARG1 file manage_blk_file))

	      (macro read_file_blk_files ((type ARG1))
		     (allow ARG1 file read_blk_file))

	      (macro readinherited_file_blk_files ((type ARG1))
		     (allow ARG1 file readinherited_blk_file))

	      (macro readwrite_file_blk_files ((type ARG1))
		     (allow ARG1 file readwrite_blk_file))

	      (macro readwriteinherited_file_blk_files ((type ARG1))
		     (allow ARG1 file readwriteinherited_blk_file))

	      (macro relabel_file_blk_files ((type ARG1))
		     (allow ARG1 file relabel_blk_file))

	      (macro relabelfrom_file_blk_files ((type ARG1))
		     (allow ARG1 file relabelfrom_blk_file))

	      (macro relabelto_file_blk_files ((type ARG1))
		     (allow ARG1 file relabelto_blk_file))

	      (macro rename_file_blk_files ((type ARG1))
		     (allow ARG1 file rename_blk_file))

	      (macro write_file_blk_files ((type ARG1))
		     (allow ARG1 file write_blk_file))

	      (macro writeinherited_file_blk_files ((type ARG1))
		     (allow ARG1 file writeinherited_blk_file)))

       (block macro_template_chr_files

	      (blockabstract macro_template_chr_files)

	      (macro append_file_chr_files ((type ARG1))
		     (allow ARG1 file append_chr_file))

	      (macro appendinherited_file_chr_files ((type ARG1))
		     (allow ARG1 file appendinherited_chr_file))

	      (macro create_file_chr_files ((type ARG1))
		     (allow ARG1 file create_chr_file))

	      (macro delete_file_chr_files ((type ARG1))
		     (allow ARG1 file delete_chr_file))

	      (macro manage_file_chr_files ((type ARG1))
		     (allow ARG1 file manage_chr_file))

	      (macro mapexecute_file_chr_files ((type ARG1))
		     (allow ARG1 file mapexecute_chr_file))

	      (macro read_file_chr_files ((type ARG1))
		     (allow ARG1 file read_chr_file))

	      (macro readinherited_file_chr_files ((type ARG1))
		     (allow ARG1 file readinherited_chr_file))

	      (macro readwrite_file_chr_files ((type ARG1))
		     (allow ARG1 file readwrite_chr_file))

	      (macro readwriteinherited_file_chr_files ((type ARG1))
		     (allow ARG1 file readwriteinherited_chr_file))

	      (macro relabel_file_chr_files ((type ARG1))
		     (allow ARG1 file relabel_chr_file))

	      (macro relabelfrom_file_chr_files ((type ARG1))
		     (allow ARG1 file relabelfrom_chr_file))

	      (macro relabelto_file_chr_files ((type ARG1))
		     (allow ARG1 file relabelto_chr_file))

	      (macro rename_file_chr_files ((type ARG1))
		     (allow ARG1 file rename_chr_file))

	      (macro write_file_chr_files ((type ARG1))
		     (allow ARG1 file write_chr_file))

	      (macro writeinherited_file_chr_files ((type ARG1))
		     (allow ARG1 file writeinherited_chr_file)))

       (block macro_template_dirs

	      (blockabstract macro_template_dirs)

	      (macro addname_file_dirs ((type ARG1))
		     (allow ARG1 file addname_dir))

	      (macro create_file_dirs ((type ARG1))
		     (allow ARG1 file create_dir))

	      (macro delete_file_dirs ((type ARG1))
		     (allow ARG1 file delete_dir))

	      (macro deletename_file_dirs ((type ARG1))
		     (allow ARG1 file deletename_dir))

	      (macro list_file_dirs ((type ARG1))
		     (allow ARG1 file list_dir))

	      (macro listinherited_file_dirs ((type ARG1))
		     (allow ARG1 file listinherited_dir))

	      (macro manage_file_dirs ((type ARG1))
		     (allow ARG1 file manage_dir))

	      (macro mounton_file_dirs ((type ARG1))
		     (allow ARG1 file mounton_dir))

	      (macro file_type_transition
		     ((type ARG1)(type ARG2)(class ARG3)(name ARG4))
		     (typetransition ARG1 file ARG3 ARG4 ARG2)
		     (call addname_file_dirs (ARG1)))

	      (macro readwrite_file_dirs ((type ARG1))
		     (allow ARG1 file readwrite_dir))

	      (macro readwriteinherited_file_dirs ((type ARG1))
		     (allow ARG1 file readwriteinherited_dir))

	      (macro relabel_file_dirs ((type ARG1))
		     (allow ARG1 file relabel_dir))

	      (macro relabelfrom_file_dirs ((type ARG1))
		     (allow ARG1 file relabelfrom_dir))

	      (macro relabelto_file_dirs ((type ARG1))
		     (allow ARG1 file relabelto_dir))

	      (macro rename_file_dirs ((type ARG1))
		     (allow ARG1 file rename_dir))

	      (macro search_file_dirs ((type ARG1))
		     (allow ARG1 file search_dir))

	      (macro write_file_dirs ((type ARG1))
		     (allow ARG1 file write_dir))

	      (macro writeinherited_file_dirs ((type ARG1))
		     (allow ARG1 file writeinherited_dir)))

       (block macro_template_fifo_files

	      (blockabstract macro_template_fifo_files)

	      (macro append_file_fifo_files ((type ARG1))
		     (allow ARG1 file append_fifo_file))

	      (macro appendinherited_file_fifo_files ((type ARG1))
		     (allow ARG1 file appendinherited_fifo_file))

	      (macro create_file_fifo_files ((type ARG1))
		     (allow ARG1 file create_fifo_file))

	      (macro delete_file_fifo_files ((type ARG1))
		     (allow ARG1 file delete_fifo_file))

	      (macro manage_file_fifo_files ((type ARG1))
		     (allow ARG1 file manage_fifo_file))

	      (macro read_file_fifo_files ((type ARG1))
		     (allow ARG1 file read_fifo_file))

	      (macro readinherited_file_fifo_files ((type ARG1))
		     (allow ARG1 file readinherited_fifo_file))

	      (macro readwrite_file_fifo_files ((type ARG1))
		     (allow ARG1 file readwrite_fifo_file))

	      (macro readwriteinherited_file_fifo_files ((type ARG1))
		     (allow ARG1 file readwriteinherited_fifo_file))

	      (macro relabel_file_fifo_files ((type ARG1))
		     (allow ARG1 file relabel_fifo_file))

	      (macro relabelfrom_file_fifo_files ((type ARG1))
		     (allow ARG1 file relabelfrom_fifo_file))

	      (macro relabelto_file_fifo_files ((type ARG1))
		     (allow ARG1 file relabelto_fifo_file))

	      (macro rename_file_fifo_files ((type ARG1))
		     (allow ARG1 file rename_fifo_file))

	      (macro write_file_fifo_files ((type ARG1))
		     (allow ARG1 file write_fifo_file))

	      (macro writeinherited_file_fifo_files ((type ARG1))
		     (allow ARG1 file writeinherited_fifo_file)))

       (block macro_template_files

	      (blockabstract macro_template_files)

	      (macro append_file_files ((type ARG1))
		     (allow ARG1 file append_file))

	      (macro appendinherited_file_files ((type ARG1))
		     (allow ARG1 file appendinherited_file))

	      (macro create_file_files ((type ARG1))
		     (allow ARG1 file create_file))

	      (macro delete_file_files ((type ARG1))
		     (allow ARG1 file delete_file))

	      (macro execute_file_files ((type ARG1))
		     (allow ARG1 file execute_file))

	      (macro manage_file_files ((type ARG1))
		     (allow ARG1 file manage_file))

	      (macro mapexecute_file_files ((type ARG1))
		     (allow ARG1 file mapexecute_file))

	      (macro mounton_file_files ((type ARG1))
		     (allow ARG1 file mounton_file))

	      (macro read_file_files ((type ARG1))
		     (allow ARG1 file read_file))

	      (macro readinherited_file_files ((type ARG1))
		     (allow ARG1 file readinherited_file))

	      (macro readwrite_file_files ((type ARG1))
		     (allow ARG1 file readwrite_file))

	      (macro readwriteinherited_file_files ((type ARG1))
		     (allow ARG1 file readwriteinherited_file))

	      (macro relabel_file_files ((type ARG1))
		     (allow ARG1 file relabel_file))

	      (macro relabelfrom_file_files ((type ARG1))
		     (allow ARG1 file relabelfrom_file))

	      (macro relabelto_file_files ((type ARG1))
		     (allow ARG1 file relabelto_file))

	      (macro rename_file_files ((type ARG1))
		     (allow ARG1 file rename_file))

	      (macro write_file_files ((type ARG1))
		     (allow ARG1 file write_file))

	      (macro writeinherited_file_files ((type ARG1))
		     (allow ARG1 file writeinherited_file)))

       (block macro_template_lnk_files

	      (blockabstract macro_template_lnk_files)

	      (macro create_file_lnk_files ((type ARG1))
		     (allow ARG1 file create_lnk_file))

	      (macro delete_file_lnk_files ((type ARG1))
		     (allow ARG1 file delete_lnk_file))

	      (macro manage_file_lnk_files ((type ARG1))
		     (allow ARG1 file manage_lnk_file))

	      (macro read_file_lnk_files ((type ARG1))
		     (allow ARG1 file read_lnk_file))

	      (macro readwrite_file_lnk_files ((type ARG1))
		     (allow ARG1 file readwrite_lnk_file))

	      (macro relabel_file_lnk_files ((type ARG1))
		     (allow ARG1 file relabel_lnk_file))

	      (macro relabelfrom_file_lnk_files ((type ARG1))
		     (allow ARG1 file relabelfrom_lnk_file))

	      (macro relabelto_file_lnk_files ((type ARG1))
		     (allow ARG1 file relabelto_lnk_file))

	      (macro rename_file_lnk_files ((type ARG1))
		     (allow ARG1 file rename_lnk_file))

	      (macro write_file_lnk_files ((type ARG1))
		     (allow ARG1 file write_lnk_file)))

       (block macro_template_sock_files

	      (blockabstract macro_template_sock_files)

	      (macro create_file_sock_files ((type ARG1))
		     (allow ARG1 file create_sock_file))

	      (macro delete_file_sock_files ((type ARG1))
		     (allow ARG1 file delete_sock_file))

	      (macro manage_file_sock_files ((type ARG1))
		     (allow ARG1 file manage_sock_file))

	      (macro read_file_sock_files ((type ARG1))
		     (allow ARG1 file read_sock_file))

	      (macro readinherited_file_sock_files ((type ARG1))
		     (allow ARG1 file readinherited_sock_file))

	      (macro readwrite_file_sock_files ((type ARG1))
		     (allow ARG1 file readwrite_sock_file))

	      (macro readwriteinherited_file_sock_files ((type ARG1))
		     (allow ARG1 file readwriteinherited_sock_file))

	      (macro relabel_file_sock_files ((type ARG1))
		     (allow ARG1 file relabel_sock_file))

	      (macro relabelfrom_file_sock_files ((type ARG1))
		     (allow ARG1 file relabelfrom_sock_file))

	      (macro relabelto_file_sock_files ((type ARG1))
		     (allow ARG1 file relabelto_sock_file))

	      (macro rename_file_sock_files ((type ARG1))
		     (allow ARG1 file rename_sock_file))

	      (macro write_file_sock_files ((type ARG1))
		     (allow ARG1 file write_sock_file))

	      (macro writeinherited_file_sock_files ((type ARG1))
		     (allow ARG1 file writeinherited_sock_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .file.base_template)
	      (blockinherit .file.macro_template_dirs)
	      (blockinherit .file.macro_template_files)
	      (blockinherit .file.macro_template_lnk_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr file.typeattr
		     (blk_file (not (execmod map mounton))))
	      (allow typeattr file.typeattr (chr_file (not (execmod mounton))))
	      (allow typeattr file.typeattr (dir (not execmod)))
	      (allow typeattr file.typeattr
		     (fifo_file (not (execmod map mounton))))
	      (allow typeattr file.typeattr (file (not (entrypoint execmod))))
	      (allow typeattr file.typeattr
		     (lnk_file (not (execmod map mounton))))
	      (allow typeattr file.typeattr
		     (sock_file (not (execmod map))))))

(in unconfined

    (call .file.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sidcontext kernel (sys.id sys.role sys.subj (systemlow systemlow)))

(block sys

       (role role)
       (roletype role subj)

       (user id)
       (userrole id role)

       (userlevel id systemlow)
       (userrange id (systemlow systemhigh))

       (blockinherit .subj.template)

       (call .obj.role (role))

       (call .unconfined.type (subj)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sidcontext file (sys.id sys.role unlabeled (systemlow systemlow)))

(macro addname_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled addname_dir))

(macro append_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled append_blk_file))

(macro append_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled append_chr_file))

(macro append_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled append_fifo_file))

(macro append_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled append_file))

(macro appendinherited_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled appendinherited_blk_file))

(macro appendinherited_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled appendinherited_chr_file))

(macro appendinherited_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled appendinherited_fifo_file))

(macro appendinherited_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled appendinherited_file))

(macro create_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (create))))

(macro create_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled create_blk_file))

(macro create_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled create_chr_file))

(macro create_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled create_dir))

(macro create_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled create_fifo_file))

(macro create_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled create_file))

(macro create_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled create_lnk_file))

(macro create_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled create_sock_file))

(macro delete_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (delete))))

(macro delete_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled delete_blk_file))

(macro delete_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled delete_chr_file))

(macro delete_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled delete_dir))

(macro delete_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled delete_fifo_file))

(macro delete_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled delete_file))

(macro delete_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled delete_lnk_file))

(macro delete_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled delete_sock_file))

(macro deletename_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled deletename_dir))

(macro execute_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled execute_file))

(macro list_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled list_dir))

(macro listinherited_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled listinherited_dir))

(macro manage_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (manage))))

(macro manage_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled manage_blk_file))

(macro manage_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled manage_chr_file))

(macro manage_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled manage_dir))

(macro manage_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled manage_fifo_file))

(macro manage_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled manage_file))

(macro manage_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled manage_lnk_file))

(macro manage_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled manage_sock_file))

(macro mapexecute_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled mapexecute_chr_file))

(macro mapexecute_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled mapexecute_file))

(macro mounton_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled mounton_dir))

(macro mounton_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled mounton_file))

(macro read_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (read))))

(macro read_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled read_blk_file))

(macro read_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled read_chr_file))

(macro read_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled read_fifo_file))

(macro read_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled read_file))

(macro read_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled read_lnk_file))

(macro read_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled read_sock_file))

(macro readinherited_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled readinherited_blk_file))

(macro readinherited_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled readinherited_chr_file))

(macro readinherited_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled readinherited_fifo_file))

(macro readinherited_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled readinherited_file))

(macro readinherited_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled readinherited_sock_file))

(macro readwrite_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (readwrite))))

(macro readwrite_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled readwrite_blk_file))

(macro readwrite_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled readwrite_chr_file))

(macro readwrite_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled readwrite_dir))

(macro readwrite_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled readwrite_fifo_file))

(macro readwrite_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled readwrite_file))

(macro readwrite_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled readwrite_lnk_file))

(macro readwrite_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled readwrite_sock_file))

(macro readwriteinherited_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled readwriteinherited_blk_file))

(macro readwriteinherited_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled readwriteinherited_chr_file))

(macro readwriteinherited_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled readwriteinherited_dir))

(macro readwriteinherited_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled readwriteinherited_fifo_file))

(macro readwriteinherited_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled readwriteinherited_file))

(macro readwriteinherited_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled readwriteinherited_sock_file))

(macro relabel_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (relabel))))

(macro relabel_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled relabel_blk_file))

(macro relabel_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled relabel_chr_file))

(macro relabel_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled relabel_dir))

(macro relabel_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled relabel_fifo_file))

(macro relabel_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled relabel_file))

(macro relabel_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled relabel_lnk_file))

(macro relabel_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled relabel_sock_file))

(macro relabelfrom_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (relabelfrom))))

(macro relabelfrom_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled relabelfrom_blk_file))

(macro relabelfrom_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled relabelfrom_chr_file))

(macro relabelfrom_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled relabelfrom_dir))

(macro relabelfrom_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled relabelfrom_fifo_file))

(macro relabelfrom_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled relabelfrom_file))

(macro relabelfrom_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled relabelfrom_lnk_file))

(macro relabelfrom_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled relabelfrom_sock_file))

(macro relabelto_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (relabelto))))

(macro relabelto_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled relabelto_blk_file))

(macro relabelto_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled relabelto_chr_file))

(macro relabelto_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled relabelto_dir))

(macro relabelto_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled relabelto_fifo_file))

(macro relabelto_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled relabelto_file))

(macro relabelto_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled relabelto_lnk_file))

(macro relabelto_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled relabelto_sock_file))

(macro rename_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (rename))))

(macro rename_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled rename_blk_file))

(macro rename_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled rename_chr_file))

(macro rename_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled rename_dir))

(macro rename_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled rename_fifo_file))

(macro rename_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled rename_file))

(macro rename_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled rename_lnk_file))

(macro rename_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled rename_sock_file))

(macro search_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled search_dir))

(macro unlabeled_type_transition ((type ARG1)(type ARG2)(class ARG3)(name ARG4))
       (typetransition ARG1 unlabeled ARG3 ARG4 ARG2)
       (call addname_unlabeled_dirs (ARG1)))

(macro write_unlabeled ((type ARG1))
       (allow ARG1 unlabeled (files (write))))

(macro write_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled write_blk_file))

(macro write_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled write_chr_file))

(macro write_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled write_dir))

(macro write_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled write_fifo_file))

(macro write_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled write_file))

(macro write_unlabeled_lnk_files ((type ARG1))
       (allow ARG1 unlabeled write_lnk_file))

(macro write_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled write_sock_file))

(macro writeinherited_unlabeled_blk_files ((type ARG1))
       (allow ARG1 unlabeled writeinherited_blk_file))

(macro writeinherited_unlabeled_chr_files ((type ARG1))
       (allow ARG1 unlabeled writeinherited_chr_file))

(macro writeinherited_unlabeled_dirs ((type ARG1))
       (allow ARG1 unlabeled writeinherited_dir))

(macro writeinherited_unlabeled_fifo_files ((type ARG1))
       (allow ARG1 unlabeled writeinherited_fifo_file))

(macro writeinherited_unlabeled_files ((type ARG1))
       (allow ARG1 unlabeled writeinherited_file))

(macro writeinherited_unlabeled_sock_files ((type ARG1))
       (allow ARG1 unlabeled writeinherited_sock_file))

(type unlabeled)
(roletype sys.role unlabeled)

(block unlabeled

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr .unlabeled
		     (blk_file (not (execmod map mounton relabelto))))
	      (allow typeattr .unlabeled
		     (chr_file (not (execmod mounton relabelto))))
	      (allow typeattr .unlabeled (dir (not (execmod relabelto))))
	      (allow typeattr .unlabeled
		     (fifo_file (not (execmod map mounton relabelto))))
	      (allow typeattr .unlabeled
		     (file (not (entrypoint execmod relabelto))))
	      (allow typeattr .unlabeled
		     (lnk_file (not (execmod map mounton relabelto))))
	      (allow typeattr .unlabeled
		     (sock_file (not (execmod map mounton relabelto))))))

(in unconfined

    (call .unlabeled.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block net

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)))

(in unconfined

    (call .net.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sidcontext unlabeled (sys.id sys.role invalid (systemlow systemlow)))

(macro addname_invalid_dirs ((type ARG1))
       (allow ARG1 invalid addname_dir))

(macro append_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid append_blk_file))

(macro append_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid append_chr_file))

(macro append_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid append_fifo_file))

(macro append_invalid_files ((type ARG1))
       (allow ARG1 invalid append_file))

(macro appendinherited_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid appendinherited_blk_file))

(macro appendinherited_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid appendinherited_chr_file))

(macro appendinherited_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid appendinherited_fifo_file))

(macro appendinherited_invalid_files ((type ARG1))
       (allow ARG1 invalid appendinherited_file))

(macro create_invalid ((type ARG1))
       (allow ARG1 invalid (files (create))))

(macro create_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid create_blk_file))

(macro create_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid create_chr_file))

(macro create_invalid_dirs ((type ARG1))
       (allow ARG1 invalid create_dir))

(macro create_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid create_fifo_file))

(macro create_invalid_files ((type ARG1))
       (allow ARG1 invalid create_file))

(macro create_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid create_lnk_file))

(macro create_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid create_sock_file))

(macro delete_invalid ((type ARG1))
       (allow ARG1 invalid (files (delete))))

(macro delete_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid delete_blk_file))

(macro delete_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid delete_chr_file))

(macro delete_invalid_dirs ((type ARG1))
       (allow ARG1 invalid delete_dir))

(macro delete_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid delete_fifo_file))

(macro delete_invalid_files ((type ARG1))
       (allow ARG1 invalid delete_file))

(macro delete_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid delete_lnk_file))

(macro delete_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid delete_sock_file))

(macro deletename_invalid_dirs ((type ARG1))
       (allow ARG1 invalid deletename_dir))

(macro execute_invalid_files ((type ARG1))
       (allow ARG1 invalid execute_file))

(macro getattr_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (getattr))))

(macro getrlimit_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (getrlimit))))

(macro getsched_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (getsched))))

(macro invalid_type_transition ((type ARG1)(type ARG2)(class ARG3)(name ARG4))
       (typetransition ARG1 invalid ARG3 ARG4 ARG2)
       (call addname_invalid_dirs (ARG1)))

(macro list_invalid_dirs ((type ARG1))
       (allow ARG1 invalid list_dir))

(macro listinherited_invalid_dirs ((type ARG1))
       (allow ARG1 invalid listinherited_dir))

(macro manage_invalid ((type ARG1))
       (allow ARG1 invalid (files (manage))))

(macro manage_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid manage_blk_file))

(macro manage_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid manage_chr_file))

(macro manage_invalid_dirs ((type ARG1))
       (allow ARG1 invalid manage_dir))

(macro manage_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid manage_fifo_file))

(macro manage_invalid_files ((type ARG1))
       (allow ARG1 invalid manage_file))

(macro manage_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid manage_lnk_file))

(macro manage_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid manage_sock_file))

(macro mapexecute_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid mapexecute_chr_file))

(macro mapexecute_invalid_files ((type ARG1))
       (allow ARG1 invalid mapexecute_file))

(macro mounton_invalid_dirs ((type ARG1))
       (allow ARG1 invalid mounton_dir))

(macro mounton_invalid_files ((type ARG1))
       (allow ARG1 invalid mounton_file))

(macro nnptransition_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process2 (nnp_transition))))

(macro noatsecure_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (noatsecure))))

(macro nosuidtransition_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process2 (nosuid_transition))))

(macro ps_invalid_states ((type ARG1))
       (allow ARG1 invalid (state (ps))))

(macro ptrace_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (ptrace))))

(macro read_invalid ((type ARG1))
       (allow ARG1 invalid (files (read))))

(macro read_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid read_blk_file))

(macro read_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid read_chr_file))

(macro read_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid read_fifo_file))

(macro read_invalid_files ((type ARG1))
       (allow ARG1 invalid read_file))

(macro read_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid read_lnk_file))

(macro read_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid read_sock_file))

(macro read_invalid_states ((type ARG1))
       (allow ARG1 invalid (state (read))))

(macro readinherited_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid readinherited_blk_file))

(macro readinherited_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid readinherited_chr_file))

(macro readinherited_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid readinherited_fifo_file))

(macro readinherited_invalid_files ((type ARG1))
       (allow ARG1 invalid readinherited_file))

(macro readinherited_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid readinherited_sock_file))

(macro readwrite_invalid ((type ARG1))
       (allow ARG1 invalid (files (readwrite))))

(macro readwrite_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid readwrite_blk_file))

(macro readwrite_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid readwrite_chr_file))

(macro readwrite_invalid_dirs ((type ARG1))
       (allow ARG1 invalid readwrite_dir))

(macro readwrite_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid readwrite_fifo_file))

(macro readwrite_invalid_files ((type ARG1))
       (allow ARG1 invalid readwrite_file))

(macro readwrite_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid readwrite_lnk_file))

(macro readwrite_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid readwrite_sock_file))

(macro readwriteinherited_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid readwriteinherited_blk_file))

(macro readwriteinherited_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid readwriteinherited_chr_file))

(macro readwriteinherited_invalid_dirs ((type ARG1))
       (allow ARG1 invalid readwriteinherited_dir))

(macro readwriteinherited_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid readwriteinherited_fifo_file))

(macro readwriteinherited_invalid_files ((type ARG1))
       (allow ARG1 invalid readwriteinherited_file))

(macro readwriteinherited_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid readwriteinherited_sock_file))

(macro relabel_invalid ((type ARG1))
       (allow ARG1 invalid (files (relabel))))

(macro relabel_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid relabel_blk_file))

(macro relabel_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid relabel_chr_file))

(macro relabel_invalid_dirs ((type ARG1))
       (allow ARG1 invalid relabel_dir))

(macro relabel_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid relabel_fifo_file))

(macro relabel_invalid_files ((type ARG1))
       (allow ARG1 invalid relabel_file))

(macro relabel_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid relabel_lnk_file))

(macro relabel_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid relabel_sock_file))

(macro relabelfrom_invalid ((type ARG1))
       (allow ARG1 invalid (files (relabelfrom))))

(macro relabelfrom_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid relabelfrom_blk_file))

(macro relabelfrom_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid relabelfrom_chr_file))

(macro relabelfrom_invalid_dirs ((type ARG1))
       (allow ARG1 invalid relabelfrom_dir))

(macro relabelfrom_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid relabelfrom_fifo_file))

(macro relabelfrom_invalid_files ((type ARG1))
       (allow ARG1 invalid relabelfrom_file))

(macro relabelfrom_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid relabelfrom_lnk_file))

(macro relabelfrom_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid relabelfrom_sock_file))

(macro relabelto_invalid ((type ARG1))
       (allow ARG1 invalid (files (relabelto))))

(macro relabelto_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid relabelto_blk_file))

(macro relabelto_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid relabelto_chr_file))

(macro relabelto_invalid_dirs ((type ARG1))
       (allow ARG1 invalid relabelto_dir))

(macro relabelto_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid relabelto_fifo_file))

(macro relabelto_invalid_files ((type ARG1))
       (allow ARG1 invalid relabelto_file))

(macro relabelto_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid relabelto_lnk_file))

(macro relabelto_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid relabelto_sock_file))

(macro rename_invalid ((type ARG1))
       (allow ARG1 invalid (files (rename))))

(macro rename_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid rename_blk_file))

(macro rename_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid rename_chr_file))

(macro rename_invalid_dirs ((type ARG1))
       (allow ARG1 invalid rename_dir))

(macro rename_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid rename_fifo_file))

(macro rename_invalid_files ((type ARG1))
       (allow ARG1 invalid rename_file))

(macro rename_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid rename_lnk_file))

(macro rename_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid rename_sock_file))

(macro rlimitinh_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (rlimitinh))))

(macro search_invalid_dirs ((type ARG1))
       (allow ARG1 invalid search_dir))

(macro setrlimit_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (setrlimit))))

(macro setsched_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (setsched))))

(macro sigchld_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (sigchld))))

(macro sigkill_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (sigkill))))

(macro signal_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (signal))))

(macro signull_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (signull))))

(macro sigstop_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (sigstop))))

(macro transition_invalid_processes ((type ARG1))
       (allow ARG1 invalid (process (transition))))

(macro write_invalid ((type ARG1))
       (allow ARG1 invalid (files (write))))

(macro write_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid write_blk_file))

(macro write_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid write_chr_file))

(macro write_invalid_dirs ((type ARG1))
       (allow ARG1 invalid write_dir))

(macro write_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid write_fifo_file))

(macro write_invalid_files ((type ARG1))
       (allow ARG1 invalid write_file))

(macro write_invalid_lnk_files ((type ARG1))
       (allow ARG1 invalid write_lnk_file))

(macro write_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid write_sock_file))

(macro writeinherited_invalid_blk_files ((type ARG1))
       (allow ARG1 invalid writeinherited_blk_file))

(macro writeinherited_invalid_chr_files ((type ARG1))
       (allow ARG1 invalid writeinherited_chr_file))

(macro writeinherited_invalid_dirs ((type ARG1))
       (allow ARG1 invalid writeinherited_dir))

(macro writeinherited_invalid_fifo_files ((type ARG1))
       (allow ARG1 invalid writeinherited_fifo_file))

(macro writeinherited_invalid_files ((type ARG1))
       (allow ARG1 invalid writeinherited_file))

(macro writeinherited_invalid_sock_files ((type ARG1))
       (allow ARG1 invalid writeinherited_sock_file))

(type invalid)
(roletype sys.role invalid)

(block invalid

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr .invalid
		     (process (not (dyntransition execheap execstack
						  transition))))
	      (allow typeattr .invalid
		     (process2 (not (nnp_transition nosuid_transition))))

	      (allow typeattr .invalid
		     (blk_file (not (execmod map mounton relabelto))))
	      (allow typeattr .invalid
		     (chr_file (not (execmod mounton relabelto))))
	      (allow typeattr .invalid (dir (not (execmod relabelto))))
	      (allow typeattr .invalid
		     (fifo_file (not (execmod map mounton relabelto))))
	      (allow typeattr .invalid
		     (file (not (entrypoint execmod relabelto))))
	      (allow typeattr .invalid
		     (lnk_file (not (execmod map mounton relabelto))))
	      (allow typeattr .invalid
		     (sock_file (not (execmod map mounton relabelto))))))

(in unconfined

    (call .invalid.unconfined.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in dev.unconfined

    (call .sys.loginserialtermdev_all_type_change_serialtermdev (typeattr)))

(in serialtermdev.unconfined

    (call .sys.loginserialtermdev_all_type_change_serialtermdev (typeattr)))

(in sys

    (macro loginserialtermdev_all_type_change_serialtermdev ((type ARG1))
	   (call .loginserialtermdev.all_type_change
		 (ARG1 serialtermdev)))

    (blockinherit .serialtermdev.template))

(in termdev.unconfined

    (call .sys.loginserialtermdev_all_type_change_serialtermdev (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block loginserialtermdev

       (macro all_type_change ((type ARG1)(type ARG2))
	      (typechange ARG1 typeattr chr_file ARG2))

       (macro appendinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr appendinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro readwriteinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr readwriteinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (macro writeinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr writeinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_chr_files)

       (call .serialtermdev.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (blockinherit .serialtermdev.base_template)

	      (call .loginserialtermdev.type (serialtermdev)))

       (block template

	      (blockabstract template)

	      (macro serialtermdev_type_change ((type ARG1)(type ARG2))
		     (typechange ARG1 serialtermdev chr_file ARG2))

	      (blockinherit .loginserialtermdev.base_template)
	      (blockinherit .serialtermdev.macro_template_chr_files)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in tty

    (filecon "/dev/tty.+" char serialtermdev_context)

    (blockinherit .loginserialtermdev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block acm

       (filecon "/dev/ttyACM[0-9]+" char serialtermdev_context)

       (blockinherit .serialtermdev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in usb

    (filecon "/dev/ttyUSB[0-9]+" char serialtermdev_context)

    (blockinherit .serialtermdev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vport

       (filecon "/dev/vport[0-9]p[0-9]+" char serialtermdev_context)

       (blockinherit .serialtermdev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vcs

       (filecon "/dev/vcs[^/]*" char serialtermdev_context)

       (blockinherit .serialtermdev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block msm

       (filecon "/dev/ttyMSM[0-9]+" char serialtermdev_context)

       (blockinherit .serialtermdev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block console

       (filecon "/dev/console" char serialtermdev_context)

       (blockinherit .serialtermdev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ptytermdev

       (macro appendinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr appendinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro readwriteinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr readwriteinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (macro writeinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr writeinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_chr_files)

       (call .devpts.associate_fs (typeattr))

       (call .termdev.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context ptytermdev_context
		       (.sys.id .sys.role ptytermdev (systemlow systemlow)))

	      (type ptytermdev)
	      (call .ptytermdev.type (ptytermdev)))

       (block macro_template_chr_files

	      (blockabstract macro_template_chr_files)

	      (macro append_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev append_chr_file))

	      (macro appendinherited_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev appendinherited_chr_file)
		     (allowx ARG1 ptytermdev (ioctl chr_file (not (0x5412)))))

	      (macro create_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev create_chr_file))

	      (macro delete_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev delete_chr_file))

	      (macro manage_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev manage_chr_file))

	      (macro mapexecute_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev mapexecute_chr_file))

	      (macro read_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev read_chr_file))

	      (macro readinherited_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev readinherited_chr_file))

	      (macro readwrite_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev readwrite_chr_file))

	      (macro readwriteinherited_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev readwriteinherited_chr_file)
		     (allowx ARG1 ptytermdev (ioctl chr_file (not (0x5412)))))

	      (macro relabel_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev relabel_chr_file))

	      (macro relabelfrom_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev relabelfrom_chr_file))

	      (macro relabelto_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev relabelto_chr_file))

	      (macro rename_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev rename_chr_file))

	      (macro write_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev write_chr_file))

	      (macro writeinherited_ptytermdev_chr_files ((type ARG1))
		     (allow ARG1 ptytermdev writeinherited_chr_file)
		     (allowx ARG1 ptytermdev (ioctl chr_file (not (0x5412))))))

       (block template

	      (blockabstract template)

	      (blockinherit .ptytermdev.base_template)
	      (blockinherit .ptytermdev.macro_template_chr_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr ptytermdev.typeattr
		     (chr_file (not (execmod mounton))))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block serialtermdev

       (macro appendinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr appendinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro readwriteinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr readwriteinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (macro writeinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr writeinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_chr_files)

       (call .termdev.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context serialtermdev_context
		       (.sys.id .sys.role serialtermdev (systemlow systemlow)))

	      (type serialtermdev)
	      (call .serialtermdev.type (serialtermdev)))

       (block macro_template_chr_files

	      (blockabstract macro_template_chr_files)

	      (macro append_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev append_chr_file))

	      (macro appendinherited_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev appendinherited_chr_file)
		     (allowx ARG1 serialtermdev (ioctl chr_file (not (0x5412)))))

	      (macro create_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev create_chr_file))

	      (macro delete_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev delete_chr_file))

	      (macro manage_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev manage_chr_file))

	      (macro mapexecute_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev mapexecute_chr_file))

	      (macro read_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev read_chr_file))

	      (macro readinherited_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev readinherited_chr_file))

	      (macro readwrite_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev readwrite_chr_file))

	      (macro readwriteinherited_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev readwriteinherited_chr_file)
		     (allowx ARG1 serialtermdev (ioctl chr_file (not (0x5412)))))

	      (macro relabel_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev relabel_chr_file))

	      (macro relabelfrom_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev relabelfrom_chr_file))

	      (macro relabelto_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev relabelto_chr_file))

	      (macro rename_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev rename_chr_file))

	      (macro write_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev write_chr_file))

	      (macro writeinherited_serialtermdev_chr_files ((type ARG1))
		     (allow ARG1 serialtermdev writeinherited_chr_file)
		     (allowx ARG1 serialtermdev
			     (ioctl chr_file (not (0x5412))))))

       (block template

	      (blockabstract template)

	      (blockinherit .serialtermdev.base_template)
	      (blockinherit .serialtermdev.macro_template_chr_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr serialtermdev.typeattr
		     (chr_file (not (execmod mounton))))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(in dev.unconfined

    (call .sys.loginptytermdev_all_type_change_ptytermdev (typeattr)))

(in ptytermdev.unconfined

    (call .sys.loginptytermdev_all_type_change_ptytermdev (typeattr)))

(in sys

    (macro devpts_fs_type_transition_ptytermdev ((type ARG1))
	   (call .devpts.fs_type_transition
		 (ARG1 ptytermdev chr_file "*")))

    (macro loginptytermdev_all_type_change_ptytermdev ((type ARG1))
	   (call .loginptytermdev.all_type_change
		 (ARG1 ptytermdev)))

    ;; support for unknown login services
    (blockinherit .loginptytermdev.template)

    (call devpts_fs_type_transition_ptytermdev (subj)))

(in termdev.unconfined

    (call .sys.loginptytermdev_all_type_change_ptytermdev (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block loginptytermdev

       (macro all_type_change ((type ARG1)(type ARG2))
	      (typechange ARG1 typeattr chr_file ARG2))

       (macro appendinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr appendinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro readwriteinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr readwriteinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (macro writeinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr writeinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_chr_files)

       (call .ptytermdev.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (blockinherit .ptytermdev.base_template)

	      (call .loginptytermdev.type (ptytermdev)))

       (block template

	      (blockabstract template)

	      (macro ptytermdev_type_change ((type ARG1)(type ARG2))
		     (typechange ARG1 ptytermdev chr_file ARG2))

	      (blockinherit .loginptytermdev.base_template)
	      (blockinherit .ptytermdev.macro_template_chr_files)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block drmdpaux

       (filecon "/dev/drm_dp_aux[0-9]+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vgaarbiter

       (filecon "/dev/vga_arbiter" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cdcwdm

       (filecon "/dev/cdc-wdm([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ndctl

       (filecon "/dev/ndctl([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block qos

       (filecon "/dev/cpu_dma_latency" char nodedev_context)
       (filecon "/dev/memory_bandwidth" char nodedev_context)
       (filecon "/dev/network_latency" char nodedev_context)
       (filecon "/dev/network_throughput" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block v4l

       (filecon "/dev/media([0-9]+)?" char nodedev_context)
       (filecon "/dev/video([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block random

       (filecon "/dev/random" char nodedev_context)
       (filecon "/dev/urandom" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block kfd

       (filecon "/dev/kfd" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block kvm

       (filecon "/dev/kvm" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block i2c

       (filecon "/dev/i2c([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block infiniband

       (filecon "/dev/infiniband/.+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block printer

       (filecon "/dev/lp([0-9]+)?" char nodedev_context)
       (filecon "/dev/parport([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block uio

       (filecon "/dev/uio[0-9]+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block nvram

       (filecon "/dev/nvram" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block tuntap

       (filecon "/dev/net/tun" char nodedev_context)
       (filecon "/dev/tap([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cuse

       (filecon "/dev/cuse" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cachefiles

       (filecon "/dev/cachefiles" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block crash

       (filecon "/dev/crash" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block dri

       (filecon "/dev/dri/.+" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vmci

       (filecon "/dev/vmci" char nodedev_context)
       (filecon "/dev/vsock" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block dmcontrol

       (filecon "/dev/mapper/control" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ipmi

       (filecon "/dev/ipmi[0-9]+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block cpu

       (filecon "/dev/cpu/.+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ppp

       (filecon "/dev/ppp" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block modem

       (filecon "/dev/modem" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ksm

       (filecon "/dev/ksm" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block uinput

       (filecon "/dev/uinput" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block hidraw

       (filecon "/dev/hidraw[0-9]+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vhost

       (filecon "/dev/vhci" char nodedev_context)
       (filecon "/dev/vhost-net" char nodedev_context)
       (filecon "/dev/vhost-scsi" char nodedev_context)
       (filecon "/dev/vhost-vsock" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mcelog

       (filecon "/dev/mcelog" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block usb

       (filecon "/dev/usb.+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block tpm

       (filecon "/dev/tpm([0-9]+)?" char nodedev_context)
       (filecon "/dev/tpmrm([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mei

       (filecon "/dev/mei([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block dmaheap

       (filecon "/dev/dma_heap/.*" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block uhid

       (filecon "/dev/uhid" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block udmabuf

       (filecon "/dev/udmabuf" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block gpio

       (filecon "/dev/gpiochip([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block lirc

       (filecon "/dev/lirc[0-9]+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block fb

       (filecon "/dev/fb([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(sidcontext devnull
	    (sys.id sys.role null.nodedev (systemlow systemlow)))

(block null

       (filecon "/dev/full" char nodedev_context)
       (filecon "/dev/null" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block zero

       (filecon "/dev/zero" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block event

       (filecon "/dev/input/event([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block iio

       (filecon "/dev/iio:device([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block autofs

       (filecon "/dev/autofs" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block btrfscontrol

       (filecon "/dev/btrfs-control" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block usbmon

       (filecon "/dev/usbmon[0-9]+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block tty

       (filecon "/dev/tty" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block hwrng

       (filecon "/dev/hwrng" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block snd

       (filecon "/dev/snd/.+" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vfio

       (filecon "/dev/vfio/.+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block hiddev

       (filecon "/dev/hiddev[0-9]+" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block loopcontrol

       (filecon "/dev/loop-control" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block input

       (filecon "/dev/input/js([0-9]+)?" char nodedev_context)
       (filecon "/dev/input/mice" char nodedev_context)
       (filecon "/dev/input/mouse([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block ptmx

       (filecon "/dev/ptmx" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .rbacsep.exempt.obj.type (nodedev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block watchdog

       (filecon "/dev/watchdog([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block clock

       (filecon "/dev/hpet" char nodedev_context)
       (filecon "/dev/ptp([0-9]+)?" char nodedev_context)
       (filecon "/dev/rtc([0-9]+)?" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block rfkill

       (filecon "/dev/rfkill" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block apm

       (filecon "/dev/snapshot" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block pmu

       (filecon "/dev/pmu" char nodedev_context)
       (filecon "/dev/smu" char nodedev_context)

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block kmsg

       (filecon "/dev/kmsg" char nodedev_context)

       (macro mounton_nodedev_chr_files ((type ARG1))
	      (allow ARG1 nodedev mounton_chr_file))

       (blockinherit .nodedev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mem

       (filecon "/dev/mem" char nodedev_context)
       (filecon "/dev/port" char nodedev_context)

       (blockinherit .nodedev.template)

       (call .nodedev.exception.type (nodedev))

       (block read

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr mem.nodedev (chr_file (read)))
	   )

       (block readwrite

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call read.type (typeattr))
	      (call write.type (typeattr)))

       (block write

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr mem.nodedev
			  (chr_file (append write)))
		))

(in dev.unconfined

    (call .mem.readwrite.type (typeattr)))

(in nodedev.unconfined

    (call .mem.readwrite.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block stordev

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_blk_files)
       (blockinherit .file.all_macro_template_chr_files)

       (call .dev.exception.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context stordev_context
		       (.sys.id .sys.role stordev (systemlow systemlow)))

	      (type stordev)
	      (call .stordev.type (stordev)))

       (block macro_template_blk_files

	      (blockabstract macro_template_blk_files)

	      (macro append_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev append_blk_file))

	      (macro appendinherited_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev appendinherited_blk_file))

	      (macro create_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev create_blk_file))

	      (macro delete_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev delete_blk_file))

	      (macro manage_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev manage_blk_file))

	      (macro read_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev read_blk_file))

	      (macro readinherited_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev readinherited_blk_file))

	      (macro readwrite_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev readwrite_blk_file))

	      (macro readwriteinherited_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev readwriteinherited_blk_file))

	      (macro relabel_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev relabel_blk_file))

	      (macro relabelfrom_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev relabelfrom_blk_file))

	      (macro relabelto_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev relabelto_blk_file))

	      (macro rename_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev rename_blk_file))

	      (macro write_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev write_blk_file))

	      (macro writeinherited_stordev_blk_files ((type ARG1))
		     (allow ARG1 stordev writeinherited_blk_file)))

       (block macro_template_chr_files

	      (blockabstract macro_template_chr_files)

	      (macro append_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev append_chr_file))

	      (macro appendinherited_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev appendinherited_chr_file))

	      (macro create_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev create_chr_file))

	      (macro delete_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev delete_chr_file))

	      (macro manage_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev manage_chr_file))

	      (macro mapexecute_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev mapexecute_chr_file))

	      (macro read_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev read_chr_file))

	      (macro readinherited_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev readinherited_chr_file))

	      (macro readwrite_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev readwrite_chr_file))

	      (macro readwriteinherited_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev readwriteinherited_chr_file))

	      (macro relabel_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev relabel_chr_file))

	      (macro relabelfrom_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev relabelfrom_chr_file))

	      (macro relabelto_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev relabelto_chr_file))

	      (macro rename_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev rename_chr_file))

	      (macro write_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev write_chr_file))

	      (macro writeinherited_stordev_chr_files ((type ARG1))
		     (allow ARG1 stordev writeinherited_chr_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .stordev.base_template)
	      (blockinherit .stordev.macro_template_blk_files)
	      (blockinherit .stordev.macro_template_chr_files))

       (block read

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr stordev.typeattr (blk_file (read)))
	      (neverallow not_typeattr stordev.typeattr (chr_file (read)))
		)

       (block readwrite

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call read.type (typeattr))
	      (call write.type (typeattr)))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr stordev.typeattr
		     (blk_file (not (execmod map mounton))))
	      (allow typeattr stordev.typeattr
		     (chr_file (not (execmod mounton))))

	      (call readwrite.type (typeattr)))

       (block write

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute not_typeattr)
	      (typeattribute typeattr)

	      (typeattributeset not_typeattr (not typeattr))

	      (neverallow not_typeattr stordev.typeattr
			  (blk_file (append write)))
	      (neverallow not_typeattr stordev.typeattr
			  (chr_file (append write)))
		))

(in dev.unconfined

    (call .stordev.readwrite.type (typeattr)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block termdev

       (macro appendinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr appendinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro readwriteinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr readwriteinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (macro writeinherited_all_chr_files ((type ARG1))
	      (allow ARG1 typeattr writeinherited_chr_file)
	      (allowx ARG1 typeattr (ioctl chr_file (not (0x5412)))))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_chr_files)

       (call .dev.type (typeattr))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr termdev.typeattr
		     (chr_file (not (execmod mounton))))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block nodedev

       (macro type ((type ARG1))
	      (typeattributeset typeattr ARG1))

       (typeattribute typeattr)

       (blockinherit .file.all_macro_template_chr_files)

       (call .dev.type (typeattr))

       (block base_template

	      (blockabstract base_template)

	      (context nodedev_context
		       (.sys.id .sys.role nodedev (systemlow systemlow)))

	      (type nodedev)
	      (call .nodedev.type (nodedev)))

       (block except

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (blockinherit file.all_macro_template_chr_files)

	      (typeattribute typeattr)

	      (typeattributeset typeattr
				(and nodedev.typeattr
				     (not (exception.typeattr)))))

       (block exception

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (call nodedev.type (typeattr))

	      (call .dev.exception.type (typeattr)))

       (block macro_template_chr_files

	      (blockabstract macro_template_chr_files)

	      (macro append_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev append_chr_file))

	      (macro appendinherited_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev appendinherited_chr_file))

	      (macro create_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev create_chr_file))

	      (macro delete_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev delete_chr_file))

	      (macro manage_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev manage_chr_file))

	      (macro mapexecute_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev mapexecute_chr_file))

	      (macro read_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev read_chr_file))

	      (macro readinherited_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev readinherited_chr_file))

	      (macro readwrite_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev readwrite_chr_file))

	      (macro readwriteinherited_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev readwriteinherited_chr_file))

	      (macro relabel_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev relabel_chr_file))

	      (macro relabelfrom_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev relabelfrom_chr_file))

	      (macro relabelto_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev relabelto_chr_file))

	      (macro rename_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev rename_chr_file))

	      (macro write_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev write_chr_file))

	      (macro writeinherited_nodedev_chr_files ((type ARG1))
		     (allow ARG1 nodedev writeinherited_chr_file)))

       (block template

	      (blockabstract template)

	      (blockinherit .nodedev.base_template)
	      (blockinherit .nodedev.macro_template_chr_files))

       (block unconfined

	      (macro type ((type ARG1))
		     (typeattributeset typeattr ARG1))

	      (typeattribute typeattr)

	      (allow typeattr nodedev.typeattr
		     (chr_file (not (execmod mounton))))))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block dm

       (filecon "/dev/dm-[0-9]+" block stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_blk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block mtd

       (filecon "/dev/mtd[0-9]+" char stordev_context)
       (filecon "/dev/mtd[0-9]+ro" char stordev_context)
       (filecon "/dev/mtdblock[0-9]+" block stordev_context)

       (filecon "/dev/ubi[0-9]+_[0-9]+" char stordev_context)
       (filecon "/dev/ubi_ctrl" char stordev_context)
       (filecon "/dev/ubiblock[0-9]+_[0-9]+" block stordev_context)

       (blockinherit .stordev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block fuse

       (filecon "/dev/fuse" char stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_chr_files)

       (call .rbacsep.exempt.obj.type (stordev)))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block vd

       (filecon "/dev/vd[^/]+" block stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_blk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block hd

       (filecon "/dev/hd[^/]+" block stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_blk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block raw

       (filecon "/dev/raw/.+" char stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_chr_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block nvme

       (filecon "/dev/ng[0-9]n[^/]+" char stordev_context)
       (filecon "/dev/nvme[0-9]+" char stordev_context)
       (filecon "/dev/nvme[0-9]n[^/]+" block stordev_context)

       (blockinherit .stordev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block sd

       (filecon "/dev/sd[^/]+" block stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_blk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block zram

       (filecon "/dev/zram[0-9]+" block stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_blk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block loop

       (filecon "/dev/loop.+" block stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_blk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block removable

       (filecon "/dev/fd[^/]+" block stordev_context)
       (filecon "/dev/mmcblk[0-9]+" block stordev_context)
       (filecon "/dev/mmcblk[0-9]boot[^/]+" block stordev_context)
       (filecon "/dev/mmcblk[0-9]p[^/]+" block stordev_context)
       (filecon "/dev/mmcblk[0-9]rpmb" char stordev_context)
       (filecon "/dev/mspblk[0-9]+" block stordev_context)
       (filecon "/dev/mspblk[0-9]boot[^/]+" block stordev_context)
       (filecon "/dev/mspblk[0-9]p[^/]+" block stordev_context)
       (filecon "/dev/mspblk[0-9]rpmb" char stordev_context)
       (filecon "/dev/sr[0-9]+" block stordev_context)

       (blockinherit .stordev.template))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block xd

       (filecon "/dev/xd[^/]+" block stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_blk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block md

       (filecon "/dev/md[^/]+" block stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_blk_files))
;; SPDX-FileCopyrightText: © 2021 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block sg

       (filecon "/dev/bsg/.+" char stordev_context)
       (filecon "/dev/sg[0-9]+" char stordev_context)

       (blockinherit .stordev.base_template)
       (blockinherit .stordev.macro_template_chr_files))
